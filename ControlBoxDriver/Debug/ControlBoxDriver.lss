
ControlBoxDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  00003fca  0000405e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000070c  008002c0  008002c0  0000411e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000411e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000417c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b50  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014a63  00000000  00000000  00004d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d57  00000000  00000000  0001976f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c3d  00000000  00000000  0001e4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002048  00000000  00000000  00024104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004562  00000000  00000000  0002614c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a4cf  00000000  00000000  0002a6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b20  00000000  00000000  00034b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	b7 c0       	rjmp	.+366    	; 0x1b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c0       	rjmp	.+362    	; 0x1b4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b3 c0       	rjmp	.+358    	; 0x1b4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__vector_23>
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__vector_25>
      68:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__vector_26>
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	a0 c0       	rjmp	.+320    	; 0x1b6 <__vector_29>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	99 c0       	rjmp	.+306    	; 0x1b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	97 c0       	rjmp	.+302    	; 0x1b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	95 c0       	rjmp	.+298    	; 0x1b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 c0       	rjmp	.+294    	; 0x1b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__vector_36>
      94:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__vector_37>
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	85 c0       	rjmp	.+266    	; 0x1b4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	83 c0       	rjmp	.+262    	; 0x1b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	81 c0       	rjmp	.+258    	; 0x1b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7f c0       	rjmp	.+254    	; 0x1b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7b c0       	rjmp	.+246    	; 0x1b4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	79 c0       	rjmp	.+242    	; 0x1b4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	77 c0       	rjmp	.+238    	; 0x1b4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	75 c0       	rjmp	.+234    	; 0x1b4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__vector_51>
      d0:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__vector_52>
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 97 18 	jmp	0x312e	; 0x312e <__vector_54>
      dc:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__vector_55>
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	84 07       	cpc	r24, r20
      e6:	63 07       	cpc	r22, r19
      e8:	66 07       	cpc	r22, r22
      ea:	69 07       	cpc	r22, r25
      ec:	6c 07       	cpc	r22, r28
      ee:	6f 07       	cpc	r22, r31
      f0:	72 07       	cpc	r23, r18
      f2:	75 07       	cpc	r23, r21
      f4:	78 07       	cpc	r23, r24
      f6:	7b 07       	cpc	r23, r27
      f8:	7e 07       	cpc	r23, r30
      fa:	b1 07       	cpc	r27, r17
      fc:	90 07       	cpc	r25, r16
      fe:	93 07       	cpc	r25, r19
     100:	96 07       	cpc	r25, r22
     102:	99 07       	cpc	r25, r25
     104:	9c 07       	cpc	r25, r28
     106:	9f 07       	cpc	r25, r31
     108:	a2 07       	cpc	r26, r18
     10a:	a5 07       	cpc	r26, r21
     10c:	a8 07       	cpc	r26, r24
     10e:	ab 07       	cpc	r26, r27
     110:	52 08       	sbc	r5, r2
     112:	31 08       	sbc	r3, r1
     114:	34 08       	sbc	r3, r4
     116:	37 08       	sbc	r3, r7
     118:	3a 08       	sbc	r3, r10
     11a:	3d 08       	sbc	r3, r13
     11c:	40 08       	sbc	r4, r0
     11e:	43 08       	sbc	r4, r3
     120:	46 08       	sbc	r4, r6
     122:	49 08       	sbc	r4, r9
     124:	4c 08       	sbc	r4, r12
     126:	a4 0e       	add	r10, r20
     128:	a9 0e       	add	r10, r25
     12a:	ac 0e       	add	r10, r28
     12c:	b0 0e       	add	r11, r16
     12e:	b3 0e       	add	r11, r19
     130:	c7 0e       	add	r12, r23
     132:	be 0e       	add	r11, r30
     134:	c1 0e       	add	r12, r17
     136:	32 0f       	add	r19, r18
     138:	37 0f       	add	r19, r23
     13a:	3a 0f       	add	r19, r26
     13c:	3e 0f       	add	r19, r30
     13e:	4d 0f       	add	r20, r29
     140:	41 0f       	add	r20, r17
     142:	44 0f       	add	r20, r20
     144:	47 0f       	add	r20, r23
     146:	c0 16       	cp	r12, r16
     148:	c3 16       	cp	r12, r19
     14a:	c7 16       	cp	r12, r23
     14c:	cb 16       	cp	r12, r27
     14e:	cf 16       	cp	r12, r31
     150:	d3 16       	cp	r13, r19
     152:	d7 16       	cp	r13, r23
     154:	db 16       	cp	r13, r27

00000156 <__ctors_start>:
     156:	2f 06       	cpc	r2, r31
     158:	cf 0a       	sbc	r12, r31
     15a:	66 0d       	add	r22, r6
     15c:	19 15       	cp	r17, r9
     15e:	cb 15       	cp	r28, r11

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	d1 e2       	ldi	r29, 0x21	; 33
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b2 e0       	ldi	r27, 0x02	; 2
     172:	ea ec       	ldi	r30, 0xCA	; 202
     174:	ff e3       	ldi	r31, 0x3F	; 63
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	0b bf       	out	0x3b, r16	; 59
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x14>
     17c:	07 90       	elpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a0 3c       	cpi	r26, 0xC0	; 192
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0x10>

00000186 <__do_clear_bss>:
     186:	29 e0       	ldi	r18, 0x09	; 9
     188:	a0 ec       	ldi	r26, 0xC0	; 192
     18a:	b2 e0       	ldi	r27, 0x02	; 2
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	ac 3c       	cpi	r26, 0xCC	; 204
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	10 e0       	ldi	r17, 0x00	; 0
     198:	c0 eb       	ldi	r28, 0xB0	; 176
     19a:	d0 e0       	ldi	r29, 0x00	; 0
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	21 97       	sbiw	r28, 0x01	; 1
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 6f 1b 	call	0x36de	; 0x36de <__tablejump2__>
     1a6:	cb 3a       	cpi	r28, 0xAB	; 171
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 2e 14 	call	0x285c	; 0x285c <main>
     1b0:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <__vector_29>:
  ADMUX |= channel;
}

void AnalogInput::disable_digital_input_buffers ()
{
  DIDR0 |= 0xFF;
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	8f 93       	push	r24
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__data_end>
     1c8:	8f 91       	pop	r24
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <_ZN11AnalogInput24select_voltage_referenceEv>:
     1d4:	ec e7       	ldi	r30, 0x7C	; 124
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	80 83       	st	Z, r24
     1de:	08 95       	ret

000001e0 <_ZN11AnalogInput22switch_to_this_channelEv>:
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
     1e6:	ec e7       	ldi	r30, 0x7C	; 124
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	90 7e       	andi	r25, 0xE0	; 224
     1ee:	90 83       	st	Z, r25
     1f0:	ab e7       	ldi	r26, 0x7B	; 123
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	9c 91       	ld	r25, X
     1f6:	97 7f       	andi	r25, 0xF7	; 247
     1f8:	9c 93       	st	X, r25
     1fa:	90 81       	ld	r25, Z
     1fc:	88 81       	ld	r24, Y
     1fe:	89 2b       	or	r24, r25
     200:	80 83       	st	Z, r24
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <_ZN11AnalogInput12set_prescaleEv>:

void AnalogInput::set_prescale ()
{
  // Divide the clock speed (16MHz) by 128, to provide a frequency of
  // 125kHz to the ADC input clock.  The acceptable range is 50kHz to 200kHz.
  ADCSRA |= 0b00000111;
     208:	ea e7       	ldi	r30, 0x7A	; 122
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	87 60       	ori	r24, 0x07	; 7
     210:	80 83       	st	Z, r24
     212:	08 95       	ret

00000214 <_ZN11AnalogInput10enable_adcEv>:
}

void AnalogInput::enable_adc ()
{
  ADCSRA |= (1 << ADEN);
     214:	ea e7       	ldi	r30, 0x7A	; 122
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	80 83       	st	Z, r24
     21e:	08 95       	ret

00000220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>:
{
  conversion_complete = true;
}

void AnalogInput::initialize (ANALOG_CHANNEL channel)
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
  sei();
     226:	78 94       	sei
  this->channel = channel;
     228:	68 83       	st	Y, r22
  select_voltage_reference();
     22a:	d4 df       	rcall	.-88     	; 0x1d4 <_ZN11AnalogInput24select_voltage_referenceEv>
  ADMUX |= channel;
}

void AnalogInput::disable_digital_input_buffers ()
{
  DIDR0 |= 0xFF;
     22c:	ee e7       	ldi	r30, 0x7E	; 126
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	80 83       	st	Z, r24
{
  sei();
  this->channel = channel;
  select_voltage_reference();
  disable_digital_input_buffers();
  set_prescale();
     236:	ce 01       	movw	r24, r28
     238:	e7 df       	rcall	.-50     	; 0x208 <_ZN11AnalogInput12set_prescaleEv>
  enable_adc();
     23a:	ce 01       	movw	r24, r28
     23c:	eb df       	rcall	.-42     	; 0x214 <_ZN11AnalogInput10enable_adcEv>
     23e:	df 91       	pop	r29
}
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <_ZN11AnalogInput16start_conversionEv>:
     244:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__data_end>
}

void AnalogInput::start_conversion ()
{
  conversion_complete = false;
  ADCSRA |= (1 << ADIE); // Enable the ADC interrupt.
     248:	ea e7       	ldi	r30, 0x7A	; 122
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	88 60       	ori	r24, 0x08	; 8
     250:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADSC); // Start the conversion.
     252:	80 81       	ld	r24, Z
     254:	80 64       	ori	r24, 0x40	; 64
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <_ZN11AnalogInput4readEv>:
  set_prescale();
  enable_adc();
}

uint16_t AnalogInput::read ()
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
  switch_to_this_channel();
     260:	bf df       	rcall	.-130    	; 0x1e0 <_ZN11AnalogInput22switch_to_this_channelEv>
  start_conversion();
     262:	ce 01       	movw	r24, r28
     264:	ef df       	rcall	.-34     	; 0x244 <_ZN11AnalogInput16start_conversionEv>
  while (!conversion_complete);
     266:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     26a:	88 23       	and	r24, r24
     26c:	e1 f3       	breq	.-8      	; 0x266 <_ZN11AnalogInput4readEv+0xc>
  uint16_t low = ADCL;
     26e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  uint16_t high = ADCH;
     272:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  return low + (high << 8);
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	98 2f       	mov	r25, r24
     27a:	88 27       	eor	r24, r24
}
     27c:	82 0f       	add	r24, r18
     27e:	91 1d       	adc	r25, r1
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <_ZN14Communications10initializeEjP6Memory>:
}

long Communications::mapVal(long x, long in_min, long in_max, long out_min, long out_max)
{
	return  (x - in_min) * (out_max - out_min ) / (in_max - in_min) + out_min;
     286:	fc 01       	movw	r30, r24
     288:	51 83       	std	Z+1, r21	; 0x01
     28a:	40 83       	st	Z, r20
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_Z16uart1_initializej>
     294:	44 e6       	ldi	r20, 0x64	; 100
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	81 ef       	ldi	r24, 0xF1	; 241
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN6Clocks11setIntervalEl>
     2a4:	4c e2       	ldi	r20, 0x2C	; 44
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	85 ee       	ldi	r24, 0xE5	; 229
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN6Clocks11setIntervalEl>
     2b4:	40 ed       	ldi	r20, 0xD0	; 208
     2b6:	57 e0       	ldi	r21, 0x07	; 7
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	89 ed       	ldi	r24, 0xD9	; 217
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN6Clocks11setIntervalEl>
     2c4:	42 ef       	ldi	r20, 0xF2	; 242
     2c6:	53 e0       	ldi	r21, 0x03	; 3
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	8d ec       	ldi	r24, 0xCD	; 205
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_ZN6Clocks11setIntervalEl>
     2d4:	08 95       	ret

000002d6 <_ZN14Communications16check_connectionEv>:
     2d6:	89 ed       	ldi	r24, 0xD9	; 217
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <_ZN6Clocks14isDone_NoResetEv>
     2de:	88 23       	and	r24, r24
     2e0:	71 f0       	breq	.+28     	; 0x2fe <_ZN14Communications16check_connectionEv+0x28>
     2e2:	8d ec       	ldi	r24, 0xCD	; 205
     2e4:	92 e0       	ldi	r25, 0x02	; 2
     2e6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN6Clocks5resetEv>
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
     2fe:	08 95       	ret

00000300 <_ZN14Communications25is_emergency_stop_pressedEv>:
     300:	80 e3       	ldi	r24, 0x30	; 48
     302:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	89 2b       	or	r24, r25
     30a:	09 f4       	brne	.+2      	; 0x30e <_ZN14Communications25is_emergency_stop_pressedEv+0xe>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	82 2f       	mov	r24, r18
     310:	08 95       	ret

00000312 <_ZN14Communications19get_requested_macroEv>:
     312:	cf 93       	push	r28
     314:	c0 e0       	ldi	r28, 0x00	; 0
     316:	80 e4       	ldi	r24, 0x40	; 64
     318:	8c 0f       	add	r24, r28
     31a:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     31e:	89 2b       	or	r24, r25
     320:	19 f0       	breq	.+6      	; 0x328 <_ZN14Communications19get_requested_macroEv+0x16>
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	8c 0f       	add	r24, r28
     326:	04 c0       	rjmp	.+8      	; 0x330 <_ZN14Communications19get_requested_macroEv+0x1e>
     328:	cf 5f       	subi	r28, 0xFF	; 255
     32a:	c0 31       	cpi	r28, 0x10	; 16
     32c:	a1 f7       	brne	.-24     	; 0x316 <_ZN14Communications19get_requested_macroEv+0x4>
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh>:
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	eb 01       	movw	r28, r22
     346:	8a 01       	movw	r16, r20
     348:	85 e2       	ldi	r24, 0x25	; 37
     34a:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     34e:	25 e5       	ldi	r18, 0x55	; 85
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	dc 01       	movw	r26, r24
     354:	0e 94 87 1b 	call	0x370e	; 0x370e <__usmulhisi3>
     358:	6b 01       	movw	r12, r22
     35a:	7c 01       	movw	r14, r24
     35c:	99 23       	and	r25, r25
     35e:	34 f4       	brge	.+12     	; 0x36c <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x38>
     360:	2f ef       	ldi	r18, 0xFF	; 255
     362:	c2 0e       	add	r12, r18
     364:	23 e0       	ldi	r18, 0x03	; 3
     366:	d2 1e       	adc	r13, r18
     368:	e1 1c       	adc	r14, r1
     36a:	f1 1c       	adc	r15, r1
     36c:	d7 01       	movw	r26, r14
     36e:	c6 01       	movw	r24, r12
     370:	07 2e       	mov	r0, r23
     372:	7a e0       	ldi	r23, 0x0A	; 10
     374:	b5 95       	asr	r27
     376:	a7 95       	ror	r26
     378:	97 95       	ror	r25
     37a:	87 95       	ror	r24
     37c:	7a 95       	dec	r23
     37e:	d1 f7       	brne	.-12     	; 0x374 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x40>
     380:	70 2d       	mov	r23, r0
     382:	6c 01       	movw	r12, r24
     384:	7d 01       	movw	r14, r26
     386:	2f e0       	ldi	r18, 0x0F	; 15
     388:	c2 0e       	add	r12, r18
     38a:	d1 1c       	adc	r13, r1
     38c:	e1 1c       	adc	r14, r1
     38e:	f1 1c       	adc	r15, r1
     390:	85 e3       	ldi	r24, 0x35	; 53
     392:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     396:	89 2b       	or	r24, r25
     398:	31 f0       	breq	.+12     	; 0x3a6 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x72>
     39a:	d1 94       	neg	r13
     39c:	c1 94       	neg	r12
     39e:	d1 08       	sbc	r13, r1
     3a0:	3c 2d       	mov	r19, r12
     3a2:	2d 2d       	mov	r18, r13
     3a4:	0a c0       	rjmp	.+20     	; 0x3ba <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x86>
     3a6:	84 e3       	ldi	r24, 0x34	; 52
     3a8:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     3ac:	89 2b       	or	r24, r25
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x82>
     3b0:	3c 2d       	mov	r19, r12
     3b2:	2d 2d       	mov	r18, r13
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x86>
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	d8 01       	movw	r26, r16
     3bc:	ec 91       	ld	r30, X
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	8e 0f       	add	r24, r30
     3c2:	8c 93       	st	X, r24
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	cf 01       	movw	r24, r30
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	e8 0f       	add	r30, r24
     3ce:	f9 1f       	adc	r31, r25
     3d0:	ec 0f       	add	r30, r28
     3d2:	fd 1f       	adc	r31, r29
     3d4:	84 e0       	ldi	r24, 0x04	; 4
     3d6:	80 83       	st	Z, r24
     3d8:	31 83       	std	Z+1, r19	; 0x01
     3da:	22 83       	std	Z+2, r18	; 0x02
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <_ZN14Communications22get_plow_motor_commandEP7MessageRh>:
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	8b 01       	movw	r16, r22
     3f8:	ea 01       	movw	r28, r20
     3fa:	81 e3       	ldi	r24, 0x31	; 49
     3fc:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     400:	89 2b       	or	r24, r25
     402:	91 f4       	brne	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     404:	87 e3       	ldi	r24, 0x37	; 55
     406:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     40a:	89 2b       	or	r24, r25
     40c:	81 f4       	brne	.+32     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     40e:	82 e3       	ldi	r24, 0x32	; 50
     410:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     414:	89 2b       	or	r24, r25
     416:	71 f4       	brne	.+28     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     418:	88 e3       	ldi	r24, 0x38	; 56
     41a:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     41e:	89 2b       	or	r24, r25
     420:	61 f0       	breq	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	94 e6       	ldi	r25, 0x64	; 100
     426:	0b c0       	rjmp	.+22     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	9c e9       	ldi	r25, 0x9C	; 156
     42c:	08 c0       	rjmp	.+16     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	9c e9       	ldi	r25, 0x9C	; 156
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	94 e6       	ldi	r25, 0x64	; 100
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	e8 81       	ld	r30, Y
     440:	21 e0       	ldi	r18, 0x01	; 1
     442:	2e 0f       	add	r18, r30
     444:	28 83       	st	Y, r18
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	9f 01       	movw	r18, r30
     44a:	22 0f       	add	r18, r18
     44c:	33 1f       	adc	r19, r19
     44e:	e2 0f       	add	r30, r18
     450:	f3 1f       	adc	r31, r19
     452:	e0 0f       	add	r30, r16
     454:	f1 1f       	adc	r31, r17
     456:	25 e0       	ldi	r18, 0x05	; 5
     458:	20 83       	st	Z, r18
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	82 83       	std	Z+2, r24	; 0x02
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <_ZN14Communications13joystickR_msgEP7MessageRh>:
     468:	2f 92       	push	r2
     46a:	3f 92       	push	r3
     46c:	4f 92       	push	r4
     46e:	5f 92       	push	r5
     470:	6f 92       	push	r6
     472:	7f 92       	push	r7
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN14Communications13joystickR_msgEP7MessageRh+0x26>
     48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN14Communications13joystickR_msgEP7MessageRh+0x28>
     490:	00 d0       	rcall	.+0      	; 0x492 <_ZN14Communications13joystickR_msgEP7MessageRh+0x2a>
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	8b 01       	movw	r16, r22
     498:	5e 83       	std	Y+6, r21	; 0x06
     49a:	4d 83       	std	Y+5, r20	; 0x05
     49c:	80 e2       	ldi	r24, 0x20	; 32
     49e:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     4a2:	6c 01       	movw	r12, r24
     4a4:	81 e2       	ldi	r24, 0x21	; 33
     4a6:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     4aa:	7c 01       	movw	r14, r24
     4ac:	85 e2       	ldi	r24, 0x25	; 37
     4ae:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     4b2:	25 e5       	ldi	r18, 0x55	; 85
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	dc 01       	movw	r26, r24
     4b8:	0e 94 87 1b 	call	0x370e	; 0x370e <__usmulhisi3>
     4bc:	28 ee       	ldi	r18, 0xE8	; 232
     4be:	33 e0       	ldi	r19, 0x03	; 3
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__divmodsi4>
     4c8:	29 01       	movw	r4, r18
     4ca:	3a 01       	movw	r6, r20
     4cc:	8f e0       	ldi	r24, 0x0F	; 15
     4ce:	48 0e       	add	r4, r24
     4d0:	51 1c       	adc	r5, r1
     4d2:	61 1c       	adc	r6, r1
     4d4:	71 1c       	adc	r7, r1
     4d6:	97 01       	movw	r18, r14
     4d8:	ad ec       	ldi	r26, 0xCD	; 205
     4da:	bc ec       	ldi	r27, 0xCC	; 204
     4dc:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__umulhisi3>
     4e0:	96 95       	lsr	r25
     4e2:	87 95       	ror	r24
     4e4:	96 95       	lsr	r25
     4e6:	87 95       	ror	r24
     4e8:	bc 01       	movw	r22, r24
     4ea:	64 56       	subi	r22, 0x64	; 100
     4ec:	71 09       	sbc	r23, r1
     4ee:	07 2e       	mov	r0, r23
     4f0:	00 0c       	add	r0, r0
     4f2:	88 0b       	sbc	r24, r24
     4f4:	99 0b       	sbc	r25, r25
     4f6:	0e 94 0f 1a 	call	0x341e	; 0x341e <__floatsisf>
     4fa:	4b 01       	movw	r8, r22
     4fc:	5c 01       	movw	r10, r24
     4fe:	96 01       	movw	r18, r12
     500:	ad ec       	ldi	r26, 0xCD	; 205
     502:	bc ec       	ldi	r27, 0xCC	; 204
     504:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__umulhisi3>
     508:	96 95       	lsr	r25
     50a:	87 95       	ror	r24
     50c:	96 95       	lsr	r25
     50e:	87 95       	ror	r24
     510:	bc 01       	movw	r22, r24
     512:	64 56       	subi	r22, 0x64	; 100
     514:	71 09       	sbc	r23, r1
     516:	07 2e       	mov	r0, r23
     518:	00 0c       	add	r0, r0
     51a:	88 0b       	sbc	r24, r24
     51c:	99 0b       	sbc	r25, r25
     51e:	0e 94 0f 1a 	call	0x341e	; 0x341e <__floatsisf>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	5f e3       	ldi	r21, 0x3F	; 63
     52a:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     52e:	6b 01       	movw	r12, r22
     530:	7c 01       	movw	r14, r24
     532:	9b 01       	movw	r18, r22
     534:	ac 01       	movw	r20, r24
     536:	c5 01       	movw	r24, r10
     538:	b4 01       	movw	r22, r8
     53a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__addsf3>
     53e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__fixsfsi>
     542:	69 83       	std	Y+1, r22	; 0x01
     544:	7a 83       	std	Y+2, r23	; 0x02
     546:	8b 83       	std	Y+3, r24	; 0x03
     548:	9c 83       	std	Y+4, r25	; 0x04
     54a:	a7 01       	movw	r20, r14
     54c:	96 01       	movw	r18, r12
     54e:	c5 01       	movw	r24, r10
     550:	b4 01       	movw	r22, r8
     552:	0e 94 0b 19 	call	0x3216	; 0x3216 <__subsf3>
     556:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__fixsfsi>
     55a:	29 81       	ldd	r18, Y+1	; 0x01
     55c:	3a 81       	ldd	r19, Y+2	; 0x02
     55e:	2c 39       	cpi	r18, 0x9C	; 156
     560:	ef ef       	ldi	r30, 0xFF	; 255
     562:	3e 07       	cpc	r19, r30
     564:	14 f4       	brge	.+4      	; 0x56a <_ZN14Communications13joystickR_msgEP7MessageRh+0x102>
     566:	2c e9       	ldi	r18, 0x9C	; 156
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	1b 01       	movw	r2, r22
     56c:	6c 39       	cpi	r22, 0x9C	; 156
     56e:	7f 4f       	sbci	r23, 0xFF	; 255
     570:	34 f4       	brge	.+12     	; 0x57e <_ZN14Communications13joystickR_msgEP7MessageRh+0x116>
     572:	0f 2e       	mov	r0, r31
     574:	fc e9       	ldi	r31, 0x9C	; 156
     576:	2f 2e       	mov	r2, r31
     578:	33 24       	eor	r3, r3
     57a:	3a 94       	dec	r3
     57c:	f0 2d       	mov	r31, r0
     57e:	88 24       	eor	r8, r8
     580:	99 24       	eor	r9, r9
     582:	84 18       	sub	r8, r4
     584:	95 08       	sbc	r9, r5
     586:	09 2c       	mov	r0, r9
     588:	00 0c       	add	r0, r0
     58a:	aa 08       	sbc	r10, r10
     58c:	bb 08       	sbc	r11, r11
     58e:	05 2c       	mov	r0, r5
     590:	00 0c       	add	r0, r0
     592:	66 08       	sbc	r6, r6
     594:	77 08       	sbc	r7, r7
     596:	48 18       	sub	r4, r8
     598:	59 08       	sbc	r5, r9
     59a:	6a 08       	sbc	r6, r10
     59c:	7b 08       	sbc	r7, r11
     59e:	25 36       	cpi	r18, 0x65	; 101
     5a0:	31 05       	cpc	r19, r1
     5a2:	14 f0       	brlt	.+4      	; 0x5a8 <_ZN14Communications13joystickR_msgEP7MessageRh+0x140>
     5a4:	24 e6       	ldi	r18, 0x64	; 100
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	c9 01       	movw	r24, r18
     5aa:	33 0f       	add	r19, r19
     5ac:	aa 0b       	sbc	r26, r26
     5ae:	bb 0b       	sbc	r27, r27
     5b0:	9c 01       	movw	r18, r24
     5b2:	ad 01       	movw	r20, r26
     5b4:	2c 59       	subi	r18, 0x9C	; 156
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	4f 4f       	sbci	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	c3 01       	movw	r24, r6
     5be:	b2 01       	movw	r22, r4
     5c0:	0e 94 22 1b 	call	0x3644	; 0x3644 <__mulsi3>
     5c4:	28 ec       	ldi	r18, 0xC8	; 200
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__divmodsi4>
     5d0:	69 01       	movw	r12, r18
     5d2:	7a 01       	movw	r14, r20
     5d4:	c8 0c       	add	r12, r8
     5d6:	d9 1c       	adc	r13, r9
     5d8:	ea 1c       	adc	r14, r10
     5da:	fb 1c       	adc	r15, r11
     5dc:	da 82       	std	Y+2, r13	; 0x02
     5de:	c9 82       	std	Y+1, r12	; 0x01
     5e0:	91 01       	movw	r18, r2
     5e2:	25 36       	cpi	r18, 0x65	; 101
     5e4:	31 05       	cpc	r19, r1
     5e6:	14 f0       	brlt	.+4      	; 0x5ec <_ZN14Communications13joystickR_msgEP7MessageRh+0x184>
     5e8:	24 e6       	ldi	r18, 0x64	; 100
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	c9 01       	movw	r24, r18
     5ee:	33 0f       	add	r19, r19
     5f0:	aa 0b       	sbc	r26, r26
     5f2:	bb 0b       	sbc	r27, r27
     5f4:	9c 01       	movw	r18, r24
     5f6:	ad 01       	movw	r20, r26
     5f8:	2c 59       	subi	r18, 0x9C	; 156
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	4f 4f       	sbci	r20, 0xFF	; 255
     5fe:	5f 4f       	sbci	r21, 0xFF	; 255
     600:	c3 01       	movw	r24, r6
     602:	b2 01       	movw	r22, r4
     604:	0e 94 22 1b 	call	0x3644	; 0x3644 <__mulsi3>
     608:	28 ec       	ldi	r18, 0xC8	; 200
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__divmodsi4>
     614:	82 0e       	add	r8, r18
     616:	93 1e       	adc	r9, r19
     618:	a4 1e       	adc	r10, r20
     61a:	b5 1e       	adc	r11, r21
     61c:	c4 01       	movw	r24, r8
     61e:	29 81       	ldd	r18, Y+1	; 0x01
     620:	3a 81       	ldd	r19, Y+2	; 0x02
     622:	33 23       	and	r19, r19
     624:	5c f4       	brge	.+22     	; 0x63c <_ZN14Communications13joystickR_msgEP7MessageRh+0x1d4>
     626:	96 01       	movw	r18, r12
     628:	dd 20       	and	r13, r13
     62a:	24 f4       	brge	.+8      	; 0x634 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1cc>
     62c:	22 27       	eor	r18, r18
     62e:	33 27       	eor	r19, r19
     630:	2c 19       	sub	r18, r12
     632:	3d 09       	sbc	r19, r13
     634:	cc 24       	eor	r12, r12
     636:	dd 24       	eor	r13, r13
     638:	c2 1a       	sub	r12, r18
     63a:	d3 0a       	sbc	r13, r19
     63c:	99 23       	and	r25, r25
     63e:	5c f4       	brge	.+22     	; 0x656 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1ee>
     640:	94 01       	movw	r18, r8
     642:	99 20       	and	r9, r9
     644:	24 f4       	brge	.+8      	; 0x64e <_ZN14Communications13joystickR_msgEP7MessageRh+0x1e6>
     646:	22 27       	eor	r18, r18
     648:	33 27       	eor	r19, r19
     64a:	28 19       	sub	r18, r8
     64c:	39 09       	sbc	r19, r9
     64e:	88 24       	eor	r8, r8
     650:	99 24       	eor	r9, r9
     652:	82 1a       	sub	r8, r18
     654:	93 0a       	sbc	r9, r19
     656:	ed 81       	ldd	r30, Y+5	; 0x05
     658:	fe 81       	ldd	r31, Y+6	; 0x06
     65a:	80 81       	ld	r24, Z
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	8e 0f       	add	r24, r30
     666:	9f 1f       	adc	r25, r31
     668:	f8 01       	movw	r30, r16
     66a:	e8 0f       	add	r30, r24
     66c:	f9 1f       	adc	r31, r25
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 83       	st	Z, r24
     672:	ed 81       	ldd	r30, Y+5	; 0x05
     674:	fe 81       	ldd	r31, Y+6	; 0x06
     676:	80 81       	ld	r24, Z
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	fc 01       	movw	r30, r24
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	8e 0f       	add	r24, r30
     682:	9f 1f       	adc	r25, r31
     684:	f8 01       	movw	r30, r16
     686:	e8 0f       	add	r30, r24
     688:	f9 1f       	adc	r31, r25
     68a:	c1 82       	std	Z+1, r12	; 0x01
     68c:	ed 81       	ldd	r30, Y+5	; 0x05
     68e:	fe 81       	ldd	r31, Y+6	; 0x06
     690:	80 81       	ld	r24, Z
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	fc 01       	movw	r30, r24
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	8e 0f       	add	r24, r30
     69c:	9f 1f       	adc	r25, r31
     69e:	f8 01       	movw	r30, r16
     6a0:	e8 0f       	add	r30, r24
     6a2:	f9 1f       	adc	r31, r25
     6a4:	d2 82       	std	Z+2, r13	; 0x02
     6a6:	ed 81       	ldd	r30, Y+5	; 0x05
     6a8:	fe 81       	ldd	r31, Y+6	; 0x06
     6aa:	80 81       	ld	r24, Z
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 83       	st	Z, r24
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	fc 01       	movw	r30, r24
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	8e 0f       	add	r24, r30
     6ba:	9f 1f       	adc	r25, r31
     6bc:	f8 01       	movw	r30, r16
     6be:	e8 0f       	add	r30, r24
     6c0:	f9 1f       	adc	r31, r25
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	80 83       	st	Z, r24
     6c6:	ed 81       	ldd	r30, Y+5	; 0x05
     6c8:	fe 81       	ldd	r31, Y+6	; 0x06
     6ca:	80 81       	ld	r24, Z
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	8e 0f       	add	r24, r30
     6d6:	9f 1f       	adc	r25, r31
     6d8:	f8 01       	movw	r30, r16
     6da:	e8 0f       	add	r30, r24
     6dc:	f9 1f       	adc	r31, r25
     6de:	81 82       	std	Z+1, r8	; 0x01
     6e0:	ed 81       	ldd	r30, Y+5	; 0x05
     6e2:	fe 81       	ldd	r31, Y+6	; 0x06
     6e4:	80 81       	ld	r24, Z
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	9c 01       	movw	r18, r24
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	f8 01       	movw	r30, r16
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	92 82       	std	Z+2, r9	; 0x02
     6fa:	ed 81       	ldd	r30, Y+5	; 0x05
     6fc:	fe 81       	ldd	r31, Y+6	; 0x06
     6fe:	80 81       	ld	r24, Z
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	80 83       	st	Z, r24
     704:	26 96       	adiw	r28, 0x06	; 6
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	9f 90       	pop	r9
     726:	8f 90       	pop	r8
     728:	7f 90       	pop	r7
     72a:	6f 90       	pop	r6
     72c:	5f 90       	pop	r5
     72e:	4f 90       	pop	r4
     730:	3f 90       	pop	r3
     732:	2f 90       	pop	r2
     734:	08 95       	ret

00000736 <_ZN14Communications13joystickL_msgEP7MessageRh>:
     736:	8f 92       	push	r8
     738:	9f 92       	push	r9
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	8b 01       	movw	r16, r22
     750:	ea 01       	movw	r28, r20
     752:	83 e2       	ldi	r24, 0x23	; 35
     754:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     758:	9c 01       	movw	r18, r24
     75a:	ad ec       	ldi	r26, 0xCD	; 205
     75c:	bc ec       	ldi	r27, 0xCC	; 204
     75e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__umulhisi3>
     762:	96 95       	lsr	r25
     764:	87 95       	ror	r24
     766:	96 95       	lsr	r25
     768:	87 95       	ror	r24
     76a:	7c 01       	movw	r14, r24
     76c:	24 e6       	ldi	r18, 0x64	; 100
     76e:	e2 1a       	sub	r14, r18
     770:	f1 08       	sbc	r15, r1
     772:	84 e2       	ldi	r24, 0x24	; 36
     774:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     778:	25 e5       	ldi	r18, 0x55	; 85
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	dc 01       	movw	r26, r24
     77e:	0e 94 87 1b 	call	0x370e	; 0x370e <__usmulhisi3>
     782:	28 ee       	ldi	r18, 0xE8	; 232
     784:	33 e0       	ldi	r19, 0x03	; 3
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__divmodsi4>
     78e:	49 01       	movw	r8, r18
     790:	5a 01       	movw	r10, r20
     792:	8f e0       	ldi	r24, 0x0F	; 15
     794:	88 0e       	add	r8, r24
     796:	91 1c       	adc	r9, r1
     798:	a1 1c       	adc	r10, r1
     79a:	b1 1c       	adc	r11, r1
     79c:	c7 01       	movw	r24, r14
     79e:	2c e9       	ldi	r18, 0x9C	; 156
     7a0:	e2 16       	cp	r14, r18
     7a2:	2f ef       	ldi	r18, 0xFF	; 255
     7a4:	f2 06       	cpc	r15, r18
     7a6:	14 f4       	brge	.+4      	; 0x7ac <_ZN14Communications13joystickL_msgEP7MessageRh+0x76>
     7a8:	8c e9       	ldi	r24, 0x9C	; 156
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
     7ac:	cc 24       	eor	r12, r12
     7ae:	dd 24       	eor	r13, r13
     7b0:	c8 18       	sub	r12, r8
     7b2:	d9 08       	sbc	r13, r9
     7b4:	0d 2c       	mov	r0, r13
     7b6:	00 0c       	add	r0, r0
     7b8:	ee 08       	sbc	r14, r14
     7ba:	ff 08       	sbc	r15, r15
     7bc:	9c 01       	movw	r18, r24
     7be:	85 36       	cpi	r24, 0x65	; 101
     7c0:	91 05       	cpc	r25, r1
     7c2:	14 f0       	brlt	.+4      	; 0x7c8 <_ZN14Communications13joystickL_msgEP7MessageRh+0x92>
     7c4:	24 e6       	ldi	r18, 0x64	; 100
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	c9 01       	movw	r24, r18
     7ca:	33 0f       	add	r19, r19
     7cc:	aa 0b       	sbc	r26, r26
     7ce:	bb 0b       	sbc	r27, r27
     7d0:	9c 01       	movw	r18, r24
     7d2:	ad 01       	movw	r20, r26
     7d4:	2c 59       	subi	r18, 0x9C	; 156
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	4f 4f       	sbci	r20, 0xFF	; 255
     7da:	5f 4f       	sbci	r21, 0xFF	; 255
     7dc:	c4 01       	movw	r24, r8
     7de:	99 0c       	add	r9, r9
     7e0:	aa 0b       	sbc	r26, r26
     7e2:	bb 0b       	sbc	r27, r27
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	6c 19       	sub	r22, r12
     7ea:	7d 09       	sbc	r23, r13
     7ec:	8e 09       	sbc	r24, r14
     7ee:	9f 09       	sbc	r25, r15
     7f0:	0e 94 22 1b 	call	0x3644	; 0x3644 <__mulsi3>
     7f4:	28 ec       	ldi	r18, 0xC8	; 200
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__divmodsi4>
     800:	c2 0e       	add	r12, r18
     802:	d3 1e       	adc	r13, r19
     804:	e4 1e       	adc	r14, r20
     806:	f5 1e       	adc	r15, r21
     808:	88 81       	ld	r24, Y
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	8e 0f       	add	r24, r30
     814:	9f 1f       	adc	r25, r31
     816:	f8 01       	movw	r30, r16
     818:	e8 0f       	add	r30, r24
     81a:	f9 1f       	adc	r31, r25
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	80 83       	st	Z, r24
     820:	88 81       	ld	r24, Y
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	fc 01       	movw	r30, r24
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	8e 0f       	add	r24, r30
     82c:	9f 1f       	adc	r25, r31
     82e:	f8 01       	movw	r30, r16
     830:	e8 0f       	add	r30, r24
     832:	f9 1f       	adc	r31, r25
     834:	c1 82       	std	Z+1, r12	; 0x01
     836:	88 81       	ld	r24, Y
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	9c 01       	movw	r18, r24
     83c:	22 0f       	add	r18, r18
     83e:	33 1f       	adc	r19, r19
     840:	82 0f       	add	r24, r18
     842:	93 1f       	adc	r25, r19
     844:	f8 01       	movw	r30, r16
     846:	e8 0f       	add	r30, r24
     848:	f9 1f       	adc	r31, r25
     84a:	d2 82       	std	Z+2, r13	; 0x02
     84c:	88 81       	ld	r24, Y
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	88 83       	st	Y, r24
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	af 90       	pop	r10
     866:	9f 90       	pop	r9
     868:	8f 90       	pop	r8
     86a:	08 95       	ret

0000086c <_ZN14Communications3crcEPK7Messageh>:
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	00 d0       	rcall	.+0      	; 0x878 <_ZN14Communications3crcEPK7Messageh+0xc>
     878:	1f 92       	push	r1
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	44 23       	and	r20, r20
     880:	61 f1       	breq	.+88     	; 0x8da <_ZN14Communications3crcEPK7Messageh+0x6e>
     882:	a6 2f       	mov	r26, r22
     884:	b7 2f       	mov	r27, r23
     886:	f1 2c       	mov	r15, r1
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	8e 01       	movw	r16, r28
     88c:	0c 5f       	subi	r16, 0xFC	; 252
     88e:	1f 4f       	sbci	r17, 0xFF	; 255
     890:	7c e8       	ldi	r23, 0x8C	; 140
     892:	8c 91       	ld	r24, X
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	11 96       	adiw	r26, 0x01	; 1
     898:	8c 91       	ld	r24, X
     89a:	11 97       	sbiw	r26, 0x01	; 1
     89c:	8a 83       	std	Y+2, r24	; 0x02
     89e:	12 96       	adiw	r26, 0x02	; 2
     8a0:	8c 91       	ld	r24, X
     8a2:	12 97       	sbiw	r26, 0x02	; 2
     8a4:	8b 83       	std	Y+3, r24	; 0x03
     8a6:	fe 01       	movw	r30, r28
     8a8:	31 96       	adiw	r30, 0x01	; 1
     8aa:	51 91       	ld	r21, Z+
     8ac:	38 e0       	ldi	r19, 0x08	; 8
     8ae:	62 2f       	mov	r22, r18
     8b0:	65 27       	eor	r22, r21
     8b2:	82 2f       	mov	r24, r18
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	95 95       	asr	r25
     8b8:	87 95       	ror	r24
     8ba:	28 2f       	mov	r18, r24
     8bc:	60 ff       	sbrs	r22, 0
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <_ZN14Communications3crcEPK7Messageh+0x58>
     8c0:	27 2f       	mov	r18, r23
     8c2:	28 27       	eor	r18, r24
     8c4:	56 95       	lsr	r21
     8c6:	31 50       	subi	r19, 0x01	; 1
     8c8:	91 f7       	brne	.-28     	; 0x8ae <_ZN14Communications3crcEPK7Messageh+0x42>
     8ca:	e0 17       	cp	r30, r16
     8cc:	f1 07       	cpc	r31, r17
     8ce:	69 f7       	brne	.-38     	; 0x8aa <_ZN14Communications3crcEPK7Messageh+0x3e>
     8d0:	f3 94       	inc	r15
     8d2:	13 96       	adiw	r26, 0x03	; 3
     8d4:	4f 11       	cpse	r20, r15
     8d6:	dd cf       	rjmp	.-70     	; 0x892 <_ZN14Communications3crcEPK7Messageh+0x26>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <_ZN14Communications3crcEPK7Messageh+0x70>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	82 2f       	mov	r24, r18
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	08 95       	ret

000008f0 <_ZN14Communications4sendEPK7Messageh>:
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	7b 01       	movw	r14, r22
     900:	14 2f       	mov	r17, r20
     902:	b4 df       	rcall	.-152    	; 0x86c <_ZN14Communications3crcEPK7Messageh>
     904:	d8 2e       	mov	r13, r24
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     90c:	85 e8       	ldi	r24, 0x85	; 133
     90e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     91e:	81 2f       	mov	r24, r17
     920:	88 0f       	add	r24, r24
     922:	81 0f       	add	r24, r17
     924:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     928:	11 23       	and	r17, r17
     92a:	c1 f0       	breq	.+48     	; 0x95c <_ZN14Communications4sendEPK7Messageh+0x6c>
     92c:	e7 01       	movw	r28, r14
     92e:	41 2f       	mov	r20, r17
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	8a 01       	movw	r16, r20
     934:	00 0f       	add	r16, r16
     936:	11 1f       	adc	r17, r17
     938:	40 0f       	add	r20, r16
     93a:	51 1f       	adc	r21, r17
     93c:	87 01       	movw	r16, r14
     93e:	04 0f       	add	r16, r20
     940:	15 1f       	adc	r17, r21
     942:	88 81       	ld	r24, Y
     944:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     94e:	8a 81       	ldd	r24, Y+2	; 0x02
     950:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     954:	23 96       	adiw	r28, 0x03	; 3
     956:	c0 17       	cp	r28, r16
     958:	d1 07       	cpc	r29, r17
     95a:	99 f7       	brne	.-26     	; 0x942 <_ZN14Communications4sendEPK7Messageh+0x52>
     95c:	8d 2d       	mov	r24, r13
     95e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_Z15uart1_send_byteh>
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	08 95       	ret

00000972 <_ZN14Communications21handle_manual_commandEv>:
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	60 97       	sbiw	r28, 0x10	; 16
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	8c 01       	movw	r16, r24
     98c:	18 8a       	std	Y+16, r1	; 0x10
     98e:	ae 01       	movw	r20, r28
     990:	40 5f       	subi	r20, 0xF0	; 240
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	be 01       	movw	r22, r28
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	66 dd       	rcall	.-1332   	; 0x468 <_ZN14Communications13joystickR_msgEP7MessageRh>
     99c:	ae 01       	movw	r20, r28
     99e:	40 5f       	subi	r20, 0xF0	; 240
     9a0:	5f 4f       	sbci	r21, 0xFF	; 255
     9a2:	be 01       	movw	r22, r28
     9a4:	6f 5f       	subi	r22, 0xFF	; 255
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	c8 01       	movw	r24, r16
     9aa:	c5 de       	rcall	.-630    	; 0x736 <_ZN14Communications13joystickL_msgEP7MessageRh>
     9ac:	ae 01       	movw	r20, r28
     9ae:	40 5f       	subi	r20, 0xF0	; 240
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	c8 01       	movw	r24, r16
     9ba:	bc dc       	rcall	.-1672   	; 0x334 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh>
     9bc:	ae 01       	movw	r20, r28
     9be:	40 5f       	subi	r20, 0xF0	; 240
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
     9c2:	be 01       	movw	r22, r28
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	c8 01       	movw	r24, r16
     9ca:	11 dd       	rcall	.-1502   	; 0x3ee <_ZN14Communications22get_plow_motor_commandEP7MessageRh>
     9cc:	45 e0       	ldi	r20, 0x05	; 5
     9ce:	be 01       	movw	r22, r28
     9d0:	6f 5f       	subi	r22, 0xFF	; 255
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	c8 01       	movw	r24, r16
     9d6:	8c df       	rcall	.-232    	; 0x8f0 <_ZN14Communications4sendEPK7Messageh>
     9d8:	60 96       	adiw	r28, 0x10	; 16
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <_ZN14Communications5parseEh>:
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <_ZN14Communications5parseEh+0x12>
     a00:	1f 92       	push	r1
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	6c 01       	movw	r12, r24
     a08:	7c 01       	movw	r14, r24
     a0a:	8b e9       	ldi	r24, 0x9B	; 155
     a0c:	e8 0e       	add	r14, r24
     a0e:	f1 1c       	adc	r15, r1
     a10:	c7 01       	movw	r24, r14
     a12:	94 d1       	rcall	.+808    	; 0xd3c <_ZN18FastTransferParser4pushEh>
     a14:	c7 01       	movw	r24, r14
     a16:	f2 d1       	rcall	.+996    	; 0xdfc <_ZNK18FastTransferParser14valid_messagesEv>
     a18:	88 23       	and	r24, r24
     a1a:	d1 f0       	breq	.+52     	; 0xa50 <_ZN14Communications5parseEh+0x62>
     a1c:	c7 01       	movw	r24, r14
     a1e:	05 d2       	rcall	.+1034   	; 0xe2a <_ZNK18FastTransferParser12num_messagesEv>
     a20:	08 2f       	mov	r16, r24
     a22:	88 23       	and	r24, r24
     a24:	91 f0       	breq	.+36     	; 0xa4a <_ZN14Communications5parseEh+0x5c>
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	c8 0e       	add	r12, r24
     a2c:	d1 1c       	adc	r13, r1
     a2e:	61 2f       	mov	r22, r17
     a30:	c7 01       	movw	r24, r14
     a32:	9d d1       	rcall	.+826    	; 0xd6e <_ZNK18FastTransferParser11get_messageEh>
     a34:	69 83       	std	Y+1, r22	; 0x01
     a36:	7a 83       	std	Y+2, r23	; 0x02
     a38:	8b 83       	std	Y+3, r24	; 0x03
     a3a:	be 01       	movw	r22, r28
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	c6 01       	movw	r24, r12
     a42:	2b d1       	rcall	.+598    	; 0xc9a <_ZN12MessageQueue4pushERK7Message>
     a44:	1f 5f       	subi	r17, 0xFF	; 255
     a46:	01 13       	cpse	r16, r17
     a48:	f2 cf       	rjmp	.-28     	; 0xa2e <_ZN14Communications5parseEh+0x40>
     a4a:	c7 01       	movw	r24, r14
     a4c:	8d d1       	rcall	.+794    	; 0xd68 <_ZN18FastTransferParser5clearEv>
     a4e:	06 c0       	rjmp	.+12     	; 0xa5c <_ZN14Communications5parseEh+0x6e>
     a50:	c7 01       	movw	r24, r14
     a52:	82 d1       	rcall	.+772    	; 0xd58 <_ZNK18FastTransferParser7is_fullEv>
     a54:	88 23       	and	r24, r24
     a56:	11 f0       	breq	.+4      	; 0xa5c <_ZN14Communications5parseEh+0x6e>
     a58:	c7 01       	movw	r24, r14
     a5a:	86 d1       	rcall	.+780    	; 0xd68 <_ZN18FastTransferParser5clearEv>
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret

00000a74 <_ZN14Communications4readEv>:
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	ec 01       	movw	r28, r24
     a7a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_Z15uart1_read_bytev>
     a7e:	9c 01       	movw	r18, r24
     a80:	22 27       	eor	r18, r18
     a82:	23 2b       	or	r18, r19
     a84:	49 f4       	brne	.+18     	; 0xa98 <_ZN14Communications4readEv+0x24>
     a86:	68 2f       	mov	r22, r24
     a88:	ce 01       	movw	r24, r28
     a8a:	b1 df       	rcall	.-158    	; 0x9ee <_ZN14Communications5parseEh>
     a8c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_Z15uart1_read_bytev>
     a90:	9c 01       	movw	r18, r24
     a92:	22 27       	eor	r18, r18
     a94:	23 2b       	or	r18, r19
     a96:	b9 f3       	breq	.-18     	; 0xa86 <_ZN14Communications4readEv+0x12>
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <_ZN14Communications7receiveEv>:
     a9e:	df 92       	push	r13
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	7c 01       	movw	r14, r24
     aae:	e2 df       	rcall	.-60     	; 0xa74 <_ZN14Communications4readEv>
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	e8 0e       	add	r14, r24
     ab4:	f1 1c       	adc	r15, r1
     ab6:	c7 01       	movw	r24, r14
     ab8:	3b d1       	rcall	.+630    	; 0xd30 <_ZNK12MessageQueue5countEv>
     aba:	88 23       	and	r24, r24
     abc:	49 f1       	breq	.+82     	; 0xb10 <_ZN14Communications7receiveEv+0x72>
     abe:	c7 01       	movw	r24, r14
     ac0:	17 d1       	rcall	.+558    	; 0xcf0 <_ZN12MessageQueue3popEv>
     ac2:	16 2f       	mov	r17, r22
     ac4:	d7 2e       	mov	r13, r23
     ac6:	c8 2f       	mov	r28, r24
     ac8:	86 2f       	mov	r24, r22
     aca:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN6Memory13valid_addressEh>
     ace:	88 23       	and	r24, r24
     ad0:	a9 f0       	breq	.+42     	; 0xafc <_ZN14Communications7receiveEv+0x5e>
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
     ad4:	dc 2f       	mov	r29, r28
     ad6:	cc 27       	eor	r28, r28
     ad8:	cd 0d       	add	r28, r13
     ada:	d1 1d       	adc	r29, r1
     adc:	18 30       	cpi	r17, 0x08	; 8
     ade:	51 f4       	brne	.+20     	; 0xaf4 <_ZN14Communications7receiveEv+0x56>
     ae0:	20 97       	sbiw	r28, 0x00	; 0
     ae2:	41 f4       	brne	.+16     	; 0xaf4 <_ZN14Communications7receiveEv+0x56>
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	81 5c       	subi	r24, 0xC1	; 193
     af0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
     af4:	be 01       	movw	r22, r28
     af6:	81 2f       	mov	r24, r17
     af8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
     afc:	89 ed       	ldi	r24, 0xD9	; 217
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN6Clocks5resetEv>
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
     b0e:	d3 cf       	rjmp	.-90     	; 0xab6 <_ZN14Communications7receiveEv+0x18>
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	08 95       	ret

00000b20 <_ZN14Communications21handle_emergency_stopEv>:
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	65 97       	sbiw	r28, 0x15	; 21
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	8c 01       	movw	r16, r24
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	1a 82       	std	Y+2, r1	; 0x02
     b40:	1b 82       	std	Y+3, r1	; 0x03
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	8c 83       	std	Y+4, r24	; 0x04
     b46:	1d 82       	std	Y+5, r1	; 0x05
     b48:	1e 82       	std	Y+6, r1	; 0x06
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	8f 83       	std	Y+7, r24	; 0x07
     b4e:	18 86       	std	Y+8, r1	; 0x08
     b50:	19 86       	std	Y+9, r1	; 0x09
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	8a 87       	std	Y+10, r24	; 0x0a
     b56:	1b 86       	std	Y+11, r1	; 0x0b
     b58:	1c 86       	std	Y+12, r1	; 0x0c
     b5a:	85 e0       	ldi	r24, 0x05	; 5
     b5c:	8d 87       	std	Y+13, r24	; 0x0d
     b5e:	1e 86       	std	Y+14, r1	; 0x0e
     b60:	1f 86       	std	Y+15, r1	; 0x0f
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	88 8b       	std	Y+16, r24	; 0x10
     b66:	19 8a       	std	Y+17, r1	; 0x11
     b68:	1a 8a       	std	Y+18, r1	; 0x12
     b6a:	89 e0       	ldi	r24, 0x09	; 9
     b6c:	8b 8b       	std	Y+19, r24	; 0x13
     b6e:	1c 8a       	std	Y+20, r1	; 0x14
     b70:	1d 8a       	std	Y+21, r1	; 0x15
     b72:	47 e0       	ldi	r20, 0x07	; 7
     b74:	be 01       	movw	r22, r28
     b76:	6f 5f       	subi	r22, 0xFF	; 255
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	c8 01       	movw	r24, r16
     b7c:	b9 de       	rcall	.-654    	; 0x8f0 <_ZN14Communications4sendEPK7Messageh>
     b7e:	c8 01       	movw	r24, r16
     b80:	8e df       	rcall	.-228    	; 0xa9e <_ZN14Communications7receiveEv>
     b82:	65 96       	adiw	r28, 0x15	; 21
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <_ZN14Communications20handle_macro_requestEh>:
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <_ZN14Communications20handle_macro_requestEh+0xa>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <_ZN14Communications20handle_macro_requestEh+0xc>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <_ZN14Communications20handle_macro_requestEh+0xe>
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	8c 01       	movw	r16, r24
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	6a 83       	std	Y+2, r22	; 0x02
     bb2:	1b 82       	std	Y+3, r1	; 0x03
     bb4:	89 e0       	ldi	r24, 0x09	; 9
     bb6:	8c 83       	std	Y+4, r24	; 0x04
     bb8:	1d 82       	std	Y+5, r1	; 0x05
     bba:	1e 82       	std	Y+6, r1	; 0x06
     bbc:	c8 01       	movw	r24, r16
     bbe:	82 53       	subi	r24, 0x32	; 50
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN6Clocks5resetEv>
     bc6:	42 e0       	ldi	r20, 0x02	; 2
     bc8:	be 01       	movw	r22, r28
     bca:	6f 5f       	subi	r22, 0xFF	; 255
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	c8 01       	movw	r24, r16
     bd0:	8f de       	rcall	.-738    	; 0x8f0 <_ZN14Communications4sendEPK7Messageh>
     bd2:	c8 01       	movw	r24, r16
     bd4:	64 df       	rcall	.-312    	; 0xa9e <_ZN14Communications7receiveEv>
     bd6:	26 96       	adiw	r28, 0x06	; 6
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <_ZN14Communications8transmitEv>:
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ec 01       	movw	r28, r24
     bf6:	53 df       	rcall	.-346    	; 0xa9e <_ZN14Communications7receiveEv>
     bf8:	ce 01       	movw	r24, r28
     bfa:	82 db       	rcall	.-2300   	; 0x300 <_ZN14Communications25is_emergency_stop_pressedEv>
     bfc:	88 23       	and	r24, r24
     bfe:	19 f0       	breq	.+6      	; 0xc06 <_ZN14Communications8transmitEv+0x1a>
     c00:	ce 01       	movw	r24, r28
     c02:	8e df       	rcall	.-228    	; 0xb20 <_ZN14Communications21handle_emergency_stopEv>
     c04:	27 c0       	rjmp	.+78     	; 0xc54 <_ZN14Communications8transmitEv+0x68>
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     c0c:	89 2b       	or	r24, r25
     c0e:	11 f5       	brne	.+68     	; 0xc54 <_ZN14Communications8transmitEv+0x68>
     c10:	81 ec       	ldi	r24, 0xC1	; 193
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN6Clocks6isDoneEv>
     c18:	88 23       	and	r24, r24
     c1a:	11 f0       	breq	.+4      	; 0xc20 <_ZN14Communications8transmitEv+0x34>
     c1c:	ce 01       	movw	r24, r28
     c1e:	a9 de       	rcall	.-686    	; 0x972 <_ZN14Communications21handle_manual_commandEv>
     c20:	ce 01       	movw	r24, r28
     c22:	77 db       	rcall	.-2322   	; 0x312 <_ZN14Communications19get_requested_macroEv>
     c24:	08 2f       	mov	r16, r24
     c26:	88 0f       	add	r24, r24
     c28:	11 0b       	sbc	r17, r17
     c2a:	0f 3f       	cpi	r16, 0xFF	; 255
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	18 07       	cpc	r17, r24
     c30:	89 f0       	breq	.+34     	; 0xc54 <_ZN14Communications8transmitEv+0x68>
     c32:	88 e0       	ldi	r24, 0x08	; 8
     c34:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
     c38:	08 17       	cp	r16, r24
     c3a:	19 07       	cpc	r17, r25
     c3c:	59 f0       	breq	.+22     	; 0xc54 <_ZN14Communications8transmitEv+0x68>
     c3e:	81 ef       	ldi	r24, 0xF1	; 241
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN6Clocks6isDoneEv>
     c46:	88 23       	and	r24, r24
     c48:	29 f0       	breq	.+10     	; 0xc54 <_ZN14Communications8transmitEv+0x68>
     c4a:	ce 01       	movw	r24, r28
     c4c:	62 db       	rcall	.-2364   	; 0x312 <_ZN14Communications19get_requested_macroEv>
     c4e:	68 2f       	mov	r22, r24
     c50:	ce 01       	movw	r24, r28
     c52:	a2 df       	rcall	.-188    	; 0xb98 <_ZN14Communications20handle_macro_requestEh>
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <_GLOBAL__sub_I_MACRO_RE_SEND_TIMER>:
#define when break;case
#define otherwise break;default

const UART_MODULE uart = UART_1;

Clocks MACRO_RE_SEND_TIMER, ROBOT_PING_TIMER;
     c5e:	81 ef       	ldi	r24, 0xF1	; 241
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN6ClocksC1Ev>
     c66:	85 ee       	ldi	r24, 0xE5	; 229
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN6ClocksC1Ev>
Clocks ROBOT_CONNECTED_TIMEOUT, CONNECTED_TIME;
     c6e:	89 ed       	ldi	r24, 0xD9	; 217
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN6ClocksC1Ev>
     c76:	8d ec       	ldi	r24, 0xCD	; 205
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN6ClocksC1Ev>
		memory->write(CONNECTED, false);
	}
}

// Talking to the Robot
static Clocks TransmitPeriodTimer(100);
     c7e:	44 e6       	ldi	r20, 0x64	; 100
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	81 ec       	ldi	r24, 0xC1	; 193
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_ZN6ClocksC1El>
     c8e:	08 95       	ret

00000c90 <_ZN12MessageQueueC1Ev>:
}

bool MessageQueue::full () const
{
  return message_count >= SIZE;
}
     c90:	fc 01       	movw	r30, r24
     c92:	10 82       	st	Z, r1
     c94:	11 82       	std	Z+1, r1	; 0x01
     c96:	12 82       	std	Z+2, r1	; 0x02
     c98:	08 95       	ret

00000c9a <_ZN12MessageQueue4pushERK7Message>:
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	dc 01       	movw	r26, r24
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	2c 91       	ld	r18, X
     ca4:	11 97       	sbiw	r26, 0x01	; 1
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	82 0f       	add	r24, r18
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	8c 93       	st	X, r24
     cae:	11 97       	sbiw	r26, 0x01	; 1
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	f9 01       	movw	r30, r18
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	2e 0f       	add	r18, r30
     cbe:	3f 1f       	adc	r19, r31
     cc0:	fd 01       	movw	r30, r26
     cc2:	e2 0f       	add	r30, r18
     cc4:	f3 1f       	adc	r31, r19
     cc6:	eb 01       	movw	r28, r22
     cc8:	28 81       	ld	r18, Y
     cca:	39 81       	ldd	r19, Y+1	; 0x01
     ccc:	4a 81       	ldd	r20, Y+2	; 0x02
     cce:	20 83       	st	Z, r18
     cd0:	31 83       	std	Z+1, r19	; 0x01
     cd2:	42 83       	std	Z+2, r20	; 0x02
     cd4:	82 33       	cpi	r24, 0x32	; 50
     cd6:	18 f0       	brcs	.+6      	; 0xcde <_ZN12MessageQueue4pushERK7Message+0x44>
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	1c 92       	st	X, r1
     cdc:	11 97       	sbiw	r26, 0x01	; 1
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	8c 91       	ld	r24, X
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	8c 93       	st	X, r24
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <_ZN12MessageQueue3popEv>:
     cf0:	dc 01       	movw	r26, r24
     cf2:	9c 91       	ld	r25, X
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	89 0f       	add	r24, r25
     cf8:	29 2f       	mov	r18, r25
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	82 33       	cpi	r24, 0x32	; 50
     cfe:	10 f4       	brcc	.+4      	; 0xd04 <_ZN12MessageQueue3popEv+0x14>
     d00:	8c 93       	st	X, r24
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <_ZN12MessageQueue3popEv+0x16>
     d04:	1c 92       	st	X, r1
     d06:	12 96       	adiw	r26, 0x02	; 2
     d08:	8c 91       	ld	r24, X
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	81 50       	subi	r24, 0x01	; 1
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	8c 93       	st	X, r24
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	2f 5f       	subi	r18, 0xFF	; 255
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	f9 01       	movw	r30, r18
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	2e 0f       	add	r18, r30
     d20:	3f 1f       	adc	r19, r31
     d22:	fd 01       	movw	r30, r26
     d24:	e2 0f       	add	r30, r18
     d26:	f3 1f       	adc	r31, r19
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	08 95       	ret

00000d30 <_ZNK12MessageQueue5countEv>:

uint8_t MessageQueue::count () const
{
  return message_count;
     d30:	fc 01       	movw	r30, r24
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	08 95       	ret

00000d36 <_ZN18FastTransferParserC1Ev>:


uint8_t FastTransferParser::size () const
{
	return index;
}
     d36:	fc 01       	movw	r30, r24
     d38:	12 aa       	std	Z+50, r1	; 0x32
     d3a:	08 95       	ret

00000d3c <_ZN18FastTransferParser4pushEh>:
     d3c:	fc 01       	movw	r30, r24
     d3e:	22 a9       	ldd	r18, Z+50	; 0x32
     d40:	21 11       	cpse	r18, r1
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <_ZN18FastTransferParser4pushEh+0xc>
     d44:	66 30       	cpi	r22, 0x06	; 6
     d46:	39 f4       	brne	.+14     	; 0xd56 <_ZN18FastTransferParser4pushEh+0x1a>
     d48:	31 e0       	ldi	r19, 0x01	; 1
     d4a:	32 0f       	add	r19, r18
     d4c:	fc 01       	movw	r30, r24
     d4e:	32 ab       	std	Z+50, r19	; 0x32
     d50:	e2 0f       	add	r30, r18
     d52:	f1 1d       	adc	r31, r1
     d54:	60 83       	st	Z, r22
     d56:	08 95       	ret

00000d58 <_ZNK18FastTransferParser7is_fullEv>:
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	fc 01       	movw	r30, r24
     d5c:	82 a9       	ldd	r24, Z+50	; 0x32
     d5e:	82 33       	cpi	r24, 0x32	; 50
     d60:	08 f4       	brcc	.+2      	; 0xd64 <_ZNK18FastTransferParser7is_fullEv+0xc>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	82 2f       	mov	r24, r18
     d66:	08 95       	ret

00000d68 <_ZN18FastTransferParser5clearEv>:

void FastTransferParser::clear ()
{
	index = 0;
     d68:	fc 01       	movw	r30, r24
     d6a:	12 aa       	std	Z+50, r1	; 0x32
     d6c:	08 95       	ret

00000d6e <_ZNK18FastTransferParser11get_messageEh>:

Message FastTransferParser::get_message (uint8_t i) const
{
	uint8_t index = Message::DATA_INDEX + i * Message::LENGTH;
	Message msg;
	msg.address = buffer[index];
     d6e:	26 2f       	mov	r18, r22
     d70:	22 0f       	add	r18, r18
     d72:	62 0f       	add	r22, r18
     d74:	6b 5f       	subi	r22, 0xFB	; 251
	msg.first = buffer[index + 1];
     d76:	fc 01       	movw	r30, r24
     d78:	e6 0f       	add	r30, r22
     d7a:	f1 1d       	adc	r31, r1
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
	msg.second = buffer[index + 2];
	return msg;
     d7e:	60 81       	ld	r22, Z
}
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	08 95       	ret

00000d84 <_ZNK18FastTransferParser10verify_crcEv>:
		return 0;
	return buffer[Message::COUNT_INDEX] / Message::LENGTH;
}

bool FastTransferParser::verify_crc () const
{
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	7c 01       	movw	r14, r24
}


uint8_t FastTransferParser::size () const
{
	return index;
     d92:	fc 01       	movw	r30, r24
     d94:	c2 a9       	ldd	r28, Z+50	; 0x32

bool FastTransferParser::verify_crc () const
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
     d96:	0c 2f       	mov	r16, r28
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	01 50       	subi	r16, 0x01	; 1
     d9c:	11 09       	sbc	r17, r1
     d9e:	06 30       	cpi	r16, 0x06	; 6
     da0:	11 05       	cpc	r17, r1
     da2:	ec f0       	brlt	.+58     	; 0xdde <_ZNK18FastTransferParser10verify_crcEv+0x5a>
     da4:	dc 01       	movw	r26, r24
     da6:	15 96       	adiw	r26, 0x05	; 5
     da8:	e8 01       	movw	r28, r16
     daa:	c8 0f       	add	r28, r24
     dac:	d9 1f       	adc	r29, r25
     dae:	90 e0       	ldi	r25, 0x00	; 0
		for (int j = 0; j < 8; ++j)
		{
			uint8_t sum = (crc ^ data) & 0x01;
			crc >>= 1;
			if (sum)
				crc ^= CRC_POLYNOMIAL;
     db0:	ec e8       	ldi	r30, 0x8C	; 140
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
	{
		uint8_t data = buffer[i];
     db2:	6d 91       	ld	r22, X+
     db4:	48 e0       	ldi	r20, 0x08	; 8
     db6:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 0; j < 8; ++j)
		{
			uint8_t sum = (crc ^ data) & 0x01;
     db8:	79 2f       	mov	r23, r25
     dba:	76 27       	eor	r23, r22
			crc >>= 1;
     dbc:	29 2f       	mov	r18, r25
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	35 95       	asr	r19
     dc2:	27 95       	ror	r18
     dc4:	92 2f       	mov	r25, r18
			if (sum)
     dc6:	70 ff       	sbrs	r23, 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <_ZNK18FastTransferParser10verify_crcEv+0x4a>
				crc ^= CRC_POLYNOMIAL;
     dca:	9e 2f       	mov	r25, r30
     dcc:	92 27       	eor	r25, r18
			data >>= 1;
     dce:	66 95       	lsr	r22
     dd0:	41 50       	subi	r20, 0x01	; 1
     dd2:	51 09       	sbc	r21, r1
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
	{
		uint8_t data = buffer[i];
		for (int j = 0; j < 8; ++j)
     dd4:	89 f7       	brne	.-30     	; 0xdb8 <_ZNK18FastTransferParser10verify_crcEv+0x34>

bool FastTransferParser::verify_crc () const
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
     dd6:	ca 17       	cp	r28, r26
     dd8:	db 07       	cpc	r29, r27
     dda:	59 f7       	brne	.-42     	; 0xdb2 <_ZNK18FastTransferParser10verify_crcEv+0x2e>
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <_ZNK18FastTransferParser10verify_crcEv+0x5c>
}

bool FastTransferParser::verify_crc () const
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
     dde:	90 e0       	ldi	r25, 0x00	; 0
			if (sum)
				crc ^= CRC_POLYNOMIAL;
			data >>= 1;
		}
	}
	return crc == buffer[size() - 1];
     de0:	f7 01       	movw	r30, r14
     de2:	e0 0f       	add	r30, r16
     de4:	f1 1f       	adc	r31, r17
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	20 81       	ld	r18, Z
     dea:	29 13       	cpse	r18, r25
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <_ZNK18FastTransferParser14valid_messagesEv>:
}


uint8_t FastTransferParser::size () const
{
	return index;
     dfc:	fc 01       	movw	r30, r24
     dfe:	22 a9       	ldd	r18, Z+50	; 0x32

bool FastTransferParser::valid_messages () const
{

	// Verify that the size is at least the minimum
	if (size() < MINIMUM_SIZE)
     e00:	26 30       	cpi	r18, 0x06	; 6
     e02:	68 f0       	brcs	.+26     	; 0xe1e <_ZNK18FastTransferParser14valid_messagesEv+0x22>
		return false;

	// Verify that the receiver address matches argument
	if (buffer[2] != 0x01)
     e04:	32 81       	ldd	r19, Z+2	; 0x02
     e06:	31 30       	cpi	r19, 0x01	; 1
     e08:	61 f4       	brne	.+24     	; 0xe22 <_ZNK18FastTransferParser14valid_messagesEv+0x26>
		return false;

	// Verify that the overall size makes sense according to the packet size
	if (buffer[4] + MINIMUM_SIZE != size())
     e0a:	44 81       	ldd	r20, Z+4	; 0x04
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	4a 5f       	subi	r20, 0xFA	; 250
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	42 17       	cp	r20, r18
     e16:	53 07       	cpc	r21, r19
     e18:	31 f4       	brne	.+12     	; 0xe26 <_ZNK18FastTransferParser14valid_messagesEv+0x2a>
		return false;

	return verify_crc();
     e1a:	b4 cf       	rjmp	.-152    	; 0xd84 <_ZNK18FastTransferParser10verify_crcEv>
     e1c:	08 95       	ret
bool FastTransferParser::valid_messages () const
{

	// Verify that the size is at least the minimum
	if (size() < MINIMUM_SIZE)
		return false;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret

	// Verify that the receiver address matches argument
	if (buffer[2] != 0x01)
		return false;
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	08 95       	ret

	// Verify that the overall size makes sense according to the packet size
	if (buffer[4] + MINIMUM_SIZE != size())
		return false;
     e26:	80 e0       	ldi	r24, 0x00	; 0

	return verify_crc();
}
     e28:	08 95       	ret

00000e2a <_ZNK18FastTransferParser12num_messagesEv>:
	msg.second = buffer[index + 2];
	return msg;
}

uint8_t FastTransferParser::num_messages () const
{
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
	if (!valid_messages())
     e30:	e5 df       	rcall	.-54     	; 0xdfc <_ZNK18FastTransferParser14valid_messagesEv>
     e32:	88 23       	and	r24, r24
     e34:	39 f0       	breq	.+14     	; 0xe44 <_ZNK18FastTransferParser12num_messagesEv+0x1a>
		return 0;
	return buffer[Message::COUNT_INDEX] / Message::LENGTH;
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9b ea       	ldi	r25, 0xAB	; 171
     e3a:	89 9f       	mul	r24, r25
     e3c:	81 2d       	mov	r24, r1
     e3e:	11 24       	eor	r1, r1
     e40:	86 95       	lsr	r24
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <_ZNK18FastTransferParser12num_messagesEv+0x1c>
}

uint8_t FastTransferParser::num_messages () const
{
	if (!valid_messages())
		return 0;
     e44:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[Message::COUNT_INDEX] / Message::LENGTH;
}
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <_ZN16ControlBoxEngine10initializeEv>:
#include <avr/interrupt.h>
#include "timer/Clock.hpp"
#include "digital_io/digital_pin.hpp"
#include "uart/uart_2.hpp"
void ControlBoxEngine::initialize ()
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	ec 01       	movw	r28, r24
	sei();
     e52:	78 94       	sei
	uart2_initialize(UART2_BAUD_SELECT(115200UL, 16000000UL));  // For printf
     e54:	88 e0       	ldi	r24, 0x08	; 8
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <_Z16uart2_initializej>
	memory.initialize();
     e5c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN6Memory10initializeEv>
	inputs.initialize(&memory);
     e60:	be 01       	movw	r22, r28
     e62:	ce 01       	movw	r24, r28
     e64:	85 52       	subi	r24, 0x25	; 37
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	fe d2       	rcall	.+1532   	; 0x1466 <_ZN12InputHandler10initializeEP6Memory>
	outputs.initialize(&memory);
     e6a:	be 01       	movw	r22, r28
     e6c:	ce 01       	movw	r24, r28
     e6e:	82 59       	subi	r24, 0x92	; 146
     e70:	9e 4f       	sbci	r25, 0xFE	; 254
     e72:	5c d6       	rcall	.+3256   	; 0x1b2c <_ZN13OutputHandler10initializeEP6Memory>
	communications.initialize(UART_1, &memory);
     e74:	ae 01       	movw	r20, r28
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	03 da       	rcall	.-3066   	; 0x286 <_ZN14Communications10initializeEjP6Memory>


}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <_ZN16ControlBoxEngine4loopEv>:
void ControlBoxEngine::loop ()
{
     e86:	8c 01       	movw	r16, r24
	outputs.startup();
     e88:	7c 01       	movw	r14, r24
     e8a:	82 e9       	ldi	r24, 0x92	; 146
     e8c:	e8 1a       	sub	r14, r24
     e8e:	8e ef       	ldi	r24, 0xFE	; 254
     e90:	f8 0a       	sbc	r15, r24
     e92:	c7 01       	movw	r24, r14
     e94:	af d5       	rcall	.+2910   	; 0x19f4 <_ZN13OutputHandler7startupEv>

	while (1)
	{
		communications.check_connection();
     e96:	e8 01       	movw	r28, r16
     e98:	21 96       	adiw	r28, 0x01	; 1
		inputs.poll();
     e9a:	05 52       	subi	r16, 0x25	; 37
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
{
	outputs.startup();

	while (1)
	{
		communications.check_connection();
     e9e:	ce 01       	movw	r24, r28
     ea0:	1a da       	rcall	.-3020   	; 0x2d6 <_ZN14Communications16check_connectionEv>
		inputs.poll();
     ea2:	c8 01       	movw	r24, r16
     ea4:	6a d3       	rcall	.+1748   	; 0x157a <_ZN12InputHandler4pollEv>
		communications.transmit();
     ea6:	ce 01       	movw	r24, r28
     ea8:	a1 de       	rcall	.-702    	; 0xbec <_ZN14Communications8transmitEv>
		outputs.refresh();
     eaa:	c7 01       	movw	r24, r14
     eac:	11 d5       	rcall	.+2594   	; 0x18d0 <_ZN13OutputHandler7refreshEv>
     eae:	ce 01       	movw	r24, r28
		communications.receive();
     eb0:	f6 dd       	rcall	.-1044   	; 0xa9e <_ZN14Communications7receiveEv>
     eb2:	f5 cf       	rjmp	.-22     	; 0xe9e <_ZN16ControlBoxEngine4loopEv+0x18>

00000eb4 <_ZL12DDR_REGISTER4Port>:
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	8b 30       	cpi	r24, 0x0B	; 11
}

bool DigitalPin::is_high ()
{
  return read();
}
     eb8:	91 05       	cpc	r25, r1
     eba:	18 f5       	brcc	.+70     	; 0xf02 <_ZL12DDR_REGISTER4Port+0x4e>
     ebc:	fc 01       	movw	r30, r24
     ebe:	ee 58       	subi	r30, 0x8E	; 142
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__tablejump2__>
     ec6:	84 e2       	ldi	r24, 0x24	; 36
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	08 95       	ret
     ecc:	87 e2       	ldi	r24, 0x27	; 39
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	08 95       	ret
     ed2:	8a e2       	ldi	r24, 0x2A	; 42
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	08 95       	ret
     ed8:	8d e2       	ldi	r24, 0x2D	; 45
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	08 95       	ret
     ede:	80 e3       	ldi	r24, 0x30	; 48
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret
     ee4:	83 e3       	ldi	r24, 0x33	; 51
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	08 95       	ret
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	08 95       	ret
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	08 95       	ret
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	08 95       	ret
     efc:	8a e0       	ldi	r24, 0x0A	; 10
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	08 95       	ret
     f02:	8d ef       	ldi	r24, 0xFD	; 253
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	08 95       	ret
     f08:	81 e2       	ldi	r24, 0x21	; 33
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	08 95       	ret

00000f0e <_ZL13PORT_REGISTER4Port>:
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	8b 30       	cpi	r24, 0x0B	; 11
     f12:	91 05       	cpc	r25, r1
     f14:	18 f5       	brcc	.+70     	; 0xf5c <_ZL13PORT_REGISTER4Port+0x4e>
     f16:	fc 01       	movw	r30, r24
     f18:	e3 58       	subi	r30, 0x83	; 131
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__tablejump2__>
     f20:	85 e2       	ldi	r24, 0x25	; 37
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	08 95       	ret
     f26:	88 e2       	ldi	r24, 0x28	; 40
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	08 95       	ret
     f2c:	8b e2       	ldi	r24, 0x2B	; 43
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	08 95       	ret
     f32:	8e e2       	ldi	r24, 0x2E	; 46
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	08 95       	ret
     f38:	81 e3       	ldi	r24, 0x31	; 49
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	08 95       	ret
     f3e:	84 e3       	ldi	r24, 0x34	; 52
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	08 95       	ret
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	08 95       	ret
     f4a:	85 e0       	ldi	r24, 0x05	; 5
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	08 95       	ret
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	08 95       	ret
     f56:	8b e0       	ldi	r24, 0x0B	; 11
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	08 95       	ret
     f5c:	8d ef       	ldi	r24, 0xFD	; 253
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	08 95       	ret
     f62:	82 e2       	ldi	r24, 0x22	; 34
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	08 95       	ret

00000f68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>:
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	fc 01       	movw	r30, r24
     f72:	c6 2f       	mov	r28, r22
     f74:	d4 2f       	mov	r29, r20
     f76:	60 83       	st	Z, r22
     f78:	41 83       	std	Z+1, r20	; 0x01
     f7a:	22 83       	std	Z+2, r18	; 0x02
     f7c:	21 11       	cpse	r18, r1
     f7e:	16 c0       	rjmp	.+44     	; 0xfac <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x44>
     f80:	86 2f       	mov	r24, r22
     f82:	98 df       	rcall	.-208    	; 0xeb4 <_ZL12DDR_REGISTER4Port>
     f84:	fc 01       	movw	r30, r24
     f86:	90 81       	ld	r25, Z
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x2a>
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	da 95       	dec	r29
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x26>
     f96:	d2 2f       	mov	r29, r18
     f98:	d0 95       	com	r29
     f9a:	9d 23       	and	r25, r29
     f9c:	90 83       	st	Z, r25
     f9e:	8c 2f       	mov	r24, r28
     fa0:	b6 df       	rcall	.-148    	; 0xf0e <_ZL13PORT_REGISTER4Port>
     fa2:	fc 01       	movw	r30, r24
     fa4:	20 81       	ld	r18, Z
     fa6:	2d 23       	and	r18, r29
     fa8:	20 83       	st	Z, r18
     faa:	25 c0       	rjmp	.+74     	; 0xff6 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	b1 f4       	brne	.+44     	; 0xfdc <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x74>
     fb0:	86 2f       	mov	r24, r22
     fb2:	80 df       	rcall	.-256    	; 0xeb4 <_ZL12DDR_REGISTER4Port>
     fb4:	fc 01       	movw	r30, r24
     fb6:	90 81       	ld	r25, Z
     fb8:	01 e0       	ldi	r16, 0x01	; 1
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x5a>
     fbe:	00 0f       	add	r16, r16
     fc0:	11 1f       	adc	r17, r17
     fc2:	da 95       	dec	r29
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x56>
     fc6:	80 2f       	mov	r24, r16
     fc8:	80 95       	com	r24
     fca:	98 23       	and	r25, r24
     fcc:	90 83       	st	Z, r25
     fce:	8c 2f       	mov	r24, r28
     fd0:	9e df       	rcall	.-196    	; 0xf0e <_ZL13PORT_REGISTER4Port>
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 81       	ld	r18, Z
     fd6:	02 2b       	or	r16, r18
     fd8:	00 83       	st	Z, r16
     fda:	0d c0       	rjmp	.+26     	; 0xff6 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
     fdc:	86 2f       	mov	r24, r22
     fde:	6a df       	rcall	.-300    	; 0xeb4 <_ZL12DDR_REGISTER4Port>
     fe0:	fc 01       	movw	r30, r24
     fe2:	40 81       	ld	r20, Z
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x86>
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	da 95       	dec	r29
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x82>
     ff2:	24 2b       	or	r18, r20
     ff4:	20 83       	st	Z, r18
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <_ZN10DigitalPin5writeEb>:
    1000:	cf 93       	push	r28
    1002:	fc 01       	movw	r30, r24
    1004:	c1 81       	ldd	r28, Z+1	; 0x01
    1006:	80 81       	ld	r24, Z
    1008:	66 23       	and	r22, r22
    100a:	69 f0       	breq	.+26     	; 0x1026 <_ZN10DigitalPin5writeEb+0x26>
    100c:	80 df       	rcall	.-256    	; 0xf0e <_ZL13PORT_REGISTER4Port>
    100e:	fc 01       	movw	r30, r24
    1010:	40 81       	ld	r20, Z
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <_ZN10DigitalPin5writeEb+0x1c>
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	ca 95       	dec	r28
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <_ZN10DigitalPin5writeEb+0x18>
    1020:	24 2b       	or	r18, r20
    1022:	20 83       	st	Z, r18
    1024:	0d c0       	rjmp	.+26     	; 0x1040 <_ZN10DigitalPin5writeEb+0x40>
    1026:	73 df       	rcall	.-282    	; 0xf0e <_ZL13PORT_REGISTER4Port>
    1028:	fc 01       	movw	r30, r24
    102a:	90 81       	ld	r25, Z
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <_ZN10DigitalPin5writeEb+0x36>
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	ca 95       	dec	r28
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <_ZN10DigitalPin5writeEb+0x32>
    103a:	20 95       	com	r18
    103c:	29 23       	and	r18, r25
    103e:	20 83       	st	Z, r18
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <_ZN10DigitalPin4readEv>:
    1044:	dc 01       	movw	r26, r24
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	2c 91       	ld	r18, X
    104a:	11 97       	sbiw	r26, 0x01	; 1
    104c:	ec 91       	ld	r30, X
    104e:	8e 2f       	mov	r24, r30
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	8b 30       	cpi	r24, 0x0B	; 11
    1054:	91 05       	cpc	r25, r1
    1056:	18 f5       	brcc	.+70     	; 0x109e <_ZN10DigitalPin4readEv+0x5a>
    1058:	fc 01       	movw	r30, r24
    105a:	e8 57       	subi	r30, 0x78	; 120
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__tablejump2__>
    1062:	e3 e2       	ldi	r30, 0x23	; 35
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	20 c0       	rjmp	.+64     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    1068:	e6 e2       	ldi	r30, 0x26	; 38
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	1d c0       	rjmp	.+58     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    106e:	e9 e2       	ldi	r30, 0x29	; 41
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	1a c0       	rjmp	.+52     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    1074:	ec e2       	ldi	r30, 0x2C	; 44
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	17 c0       	rjmp	.+46     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    107a:	ef e2       	ldi	r30, 0x2F	; 47
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    1080:	e2 e3       	ldi	r30, 0x32	; 50
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	11 c0       	rjmp	.+34     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    1086:	e0 e0       	ldi	r30, 0x00	; 0
    1088:	f1 e0       	ldi	r31, 0x01	; 1
    108a:	0e c0       	rjmp	.+28     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    108c:	e3 e0       	ldi	r30, 0x03	; 3
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	0b c0       	rjmp	.+22     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    1092:	e6 e0       	ldi	r30, 0x06	; 6
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    1098:	e9 e0       	ldi	r30, 0x09	; 9
    109a:	f1 e0       	ldi	r31, 0x01	; 1
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    109e:	ed ef       	ldi	r30, 0xFD	; 253
    10a0:	f2 e0       	ldi	r31, 0x02	; 2
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <_ZN10DigitalPin4readEv+0x64>
    10a4:	e0 e2       	ldi	r30, 0x20	; 32
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <_ZN10DigitalPin4readEv+0x6e>
    10ae:	95 95       	asr	r25
    10b0:	87 95       	ror	r24
    10b2:	2a 95       	dec	r18
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <_ZN10DigitalPin4readEv+0x6a>
    10b6:	81 70       	andi	r24, 0x01	; 1
    10b8:	08 95       	ret

000010ba <_ZN10DigitalPin6is_lowEv>:

bool DigitalPin::is_low ()
{
  return !read();
    10ba:	c4 df       	rcall	.-120    	; 0x1044 <_ZN10DigitalPin4readEv>
}
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	89 27       	eor	r24, r25
    10c0:	08 95       	ret

000010c2 <_ZN8Expander11set_addressEh>:
#include "expander.hpp"

void Expander::set_address (uint8_t address)
{
  this->address = address;
    10c2:	fc 01       	movw	r30, r24
    10c4:	61 93       	st	Z+, r22
    10c6:	cf 01       	movw	r24, r30
  i2c.set_address(address);
    10c8:	7c c5       	rjmp	.+2808   	; 0x1bc2 <_ZN3I2C11set_addressEh>
    10ca:	08 95       	ret

000010cc <_ZN8Expander14write_registerEhh>:
}

void Expander::write_register (uint8_t reg_addr, uint8_t value)
{
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	00 d0       	rcall	.+0      	; 0x10da <_ZN8Expander14write_registerEhh+0xe>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	e6 2e       	mov	r14, r22
    10e0:	f4 2e       	mov	r15, r20
  i2c.set_address(address);
    10e2:	8c 01       	movw	r16, r24
    10e4:	0f 5f       	subi	r16, 0xFF	; 255
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	fc 01       	movw	r30, r24
    10ea:	60 81       	ld	r22, Z
    10ec:	c8 01       	movw	r24, r16
    10ee:	69 d5       	rcall	.+2770   	; 0x1bc2 <_ZN3I2C11set_addressEh>
  uint8_t msg [] = {reg_addr, value};
    10f0:	e9 82       	std	Y+1, r14	; 0x01
    10f2:	fa 82       	std	Y+2, r15	; 0x02
  i2c.write(msg, 2);
    10f4:	42 e0       	ldi	r20, 0x02	; 2
    10f6:	be 01       	movw	r22, r28
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	c8 01       	movw	r24, r16
    10fe:	e5 d5       	rcall	.+3018   	; 0x1cca <_ZN3I2C5writeEPhh>
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <_ZN8Expander13read_registerEh>:

uint8_t Expander::read_register (uint8_t reg_addr)
{
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	00 d0       	rcall	.+0      	; 0x111c <_ZN8Expander13read_registerEh+0xa>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	6a 83       	std	Y+2, r22	; 0x02
  i2c.set_address(address);
    1122:	8c 01       	movw	r16, r24
    1124:	0f 5f       	subi	r16, 0xFF	; 255
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	fc 01       	movw	r30, r24
    112a:	60 81       	ld	r22, Z
    112c:	c8 01       	movw	r24, r16
    112e:	49 d5       	rcall	.+2706   	; 0x1bc2 <_ZN3I2C11set_addressEh>
  i2c.write(&reg_addr, 1);
    1130:	41 e0       	ldi	r20, 0x01	; 1
    1132:	be 01       	movw	r22, r28
    1134:	6e 5f       	subi	r22, 0xFE	; 254
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	c8 01       	movw	r24, r16
    113a:	c7 d5       	rcall	.+2958   	; 0x1cca <_ZN3I2C5writeEPhh>
  uint8_t value;
  i2c.read(&value, 1);
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	be 01       	movw	r22, r28
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	c8 01       	movw	r24, r16
    1146:	61 d6       	rcall	.+3266   	; 0x1e0a <_ZN3I2C4readEPhh>
  return value;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	08 95       	ret

00001158 <_ZN11ExpanderPin4readEv>:
  this->pin = pin;
  set_mode(mode);
}

bool ExpanderPin::read ()
{
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	ec 01       	movw	r28, r24
  uint8_t reg_addr = (port == A) ? GPIOA : GPIOB;
    115e:	88 81       	ld	r24, Y
    1160:	88 23       	and	r24, r24
    1162:	11 f0       	breq	.+4      	; 0x1168 <_ZN11ExpanderPin4readEv+0x10>
    1164:	63 e1       	ldi	r22, 0x13	; 19
    1166:	01 c0       	rjmp	.+2      	; 0x116a <_ZN11ExpanderPin4readEv+0x12>
    1168:	62 e1       	ldi	r22, 0x12	; 18
  return expander->read_register(reg_addr) & (1 << pin);
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	d1 df       	rcall	.-94     	; 0x1112 <_ZN8Expander13read_registerEh>
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	09 80       	ldd	r0, Y+1	; 0x01
    1174:	02 c0       	rjmp	.+4      	; 0x117a <_ZN11ExpanderPin4readEv+0x22>
    1176:	95 95       	asr	r25
    1178:	87 95       	ror	r24
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <_ZN11ExpanderPin4readEv+0x1e>
}
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <_ZN11ExpanderPin5writeEb>:

void ExpanderPin::write (bool value)
{
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
  uint8_t reg_addr = (port == A) ? GPIOA : GPIOB;
    118e:	88 81       	ld	r24, Y
    1190:	88 23       	and	r24, r24
    1192:	11 f0       	breq	.+4      	; 0x1198 <_ZN11ExpanderPin5writeEb+0x12>
    1194:	13 e1       	ldi	r17, 0x13	; 19
    1196:	01 c0       	rjmp	.+2      	; 0x119a <_ZN11ExpanderPin5writeEb+0x14>
    1198:	12 e1       	ldi	r17, 0x12	; 18
  if (value)
    119a:	66 23       	and	r22, r22
    119c:	91 f0       	breq	.+36     	; 0x11c2 <_ZN11ExpanderPin5writeEb+0x3c>
    expander->write_register(reg_addr, expander->read_register(reg_addr) | (1 << pin));
    119e:	61 2f       	mov	r22, r17
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	b6 df       	rcall	.-148    	; 0x1112 <_ZN8Expander13read_registerEh>
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	09 80       	ldd	r0, Y+1	; 0x01
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <_ZN11ExpanderPin5writeEb+0x2c>
    11ae:	44 0f       	add	r20, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <_ZN11ExpanderPin5writeEb+0x28>
    11b6:	48 2b       	or	r20, r24
    11b8:	61 2f       	mov	r22, r17
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	86 df       	rcall	.-244    	; 0x10cc <_ZN8Expander14write_registerEhh>
    11c0:	12 c0       	rjmp	.+36     	; 0x11e6 <_ZN11ExpanderPin5writeEb+0x60>
  else
    expander->write_register(reg_addr, expander->read_register(reg_addr) & ~(1 << pin));
    11c2:	61 2f       	mov	r22, r17
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	a4 df       	rcall	.-184    	; 0x1112 <_ZN8Expander13read_registerEh>
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	09 80       	ldd	r0, Y+1	; 0x01
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <_ZN11ExpanderPin5writeEb+0x50>
    11d2:	44 0f       	add	r20, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <_ZN11ExpanderPin5writeEb+0x4c>
    11da:	40 95       	com	r20
    11dc:	48 23       	and	r20, r24
    11de:	61 2f       	mov	r22, r17
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	73 df       	rcall	.-282    	; 0x10cc <_ZN8Expander14write_registerEhh>
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	08 95       	ret

000011ee <_ZN11ExpanderPin8set_modeE4Mode>:

void ExpanderPin::set_mode (Mode mode)
{
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	ec 01       	movw	r28, r24
  this->mode = mode;
    11f6:	6a 83       	std	Y+2, r22	; 0x02
  uint8_t addr = (port == A) ? IODIRA : IODIRB;
    11f8:	11 e0       	ldi	r17, 0x01	; 1
    11fa:	88 81       	ld	r24, Y
    11fc:	81 11       	cpse	r24, r1
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <_ZN11ExpanderPin8set_modeE4Mode+0x14>
    1200:	10 e0       	ldi	r17, 0x00	; 0
  if (mode == INPUT)
    1202:	61 11       	cpse	r22, r1
    1204:	12 c0       	rjmp	.+36     	; 0x122a <_ZN11ExpanderPin8set_modeE4Mode+0x3c>
    expander->write_register(addr, expander->read_register(addr) | (1 << pin));
    1206:	61 2f       	mov	r22, r17
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	82 df       	rcall	.-252    	; 0x1112 <_ZN8Expander13read_registerEh>
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	09 80       	ldd	r0, Y+1	; 0x01
    1214:	02 c0       	rjmp	.+4      	; 0x121a <_ZN11ExpanderPin8set_modeE4Mode+0x2c>
    1216:	44 0f       	add	r20, r20
    1218:	55 1f       	adc	r21, r21
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <_ZN11ExpanderPin8set_modeE4Mode+0x28>
    121e:	48 2b       	or	r20, r24
    1220:	61 2f       	mov	r22, r17
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	52 df       	rcall	.-348    	; 0x10cc <_ZN8Expander14write_registerEhh>
    1228:	12 c0       	rjmp	.+36     	; 0x124e <_ZN11ExpanderPin8set_modeE4Mode+0x60>
  else
    expander->write_register(addr, expander->read_register(addr) & ~(1 << pin));
    122a:	61 2f       	mov	r22, r17
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	70 df       	rcall	.-288    	; 0x1112 <_ZN8Expander13read_registerEh>
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	09 80       	ldd	r0, Y+1	; 0x01
    1238:	02 c0       	rjmp	.+4      	; 0x123e <_ZN11ExpanderPin8set_modeE4Mode+0x50>
    123a:	44 0f       	add	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <_ZN11ExpanderPin8set_modeE4Mode+0x4c>
    1242:	40 95       	com	r20
    1244:	48 23       	and	r20, r24
    1246:	61 2f       	mov	r22, r17
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	3f df       	rcall	.-386    	; 0x10cc <_ZN8Expander14write_registerEhh>
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	08 95       	ret

00001256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>:
const uint8_t IODIRB = 0x01;
const uint8_t GPIOA  = 0x12;
const uint8_t GPIOB  = 0x13;

void ExpanderPin::initialize (Expander * expander, Port port, Pin pin, Mode mode)
{
    1256:	0f 93       	push	r16
  this->expander = expander;
    1258:	fc 01       	movw	r30, r24
    125a:	74 83       	std	Z+4, r23	; 0x04
    125c:	63 83       	std	Z+3, r22	; 0x03
  this->port = port;
    125e:	40 83       	st	Z, r20
  this->pin = pin;
    1260:	21 83       	std	Z+1, r18	; 0x01
  set_mode(mode);
    1262:	60 2f       	mov	r22, r16
    1264:	c4 df       	rcall	.-120    	; 0x11ee <_ZN11ExpanderPin8set_modeE4Mode>
}
    1266:	0f 91       	pop	r16
    1268:	08 95       	ret

0000126a <_ZN12InputHandler20initialize_expandersEv>:
	memory->write(SLIDER_LEFT, 0);
	memory->write(SLIDER_RIGHT, 0);
}

void InputHandler::initialize_expanders ()
{
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
	expander_left.set_address(0x20);
    1270:	60 e2       	ldi	r22, 0x20	; 32
    1272:	02 96       	adiw	r24, 0x02	; 2
    1274:	26 df       	rcall	.-436    	; 0x10c2 <_ZN8Expander11set_addressEh>
	expander_right.set_address(0x27);
    1276:	67 e2       	ldi	r22, 0x27	; 39
    1278:	ce 01       	movw	r24, r28
    127a:	42 96       	adiw	r24, 0x12	; 18
    127c:	22 df       	rcall	.-444    	; 0x10c2 <_ZN8Expander11set_addressEh>
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <_ZN12InputHandler23initialize_push_buttonsEv>:

void InputHandler::initialize_push_buttons ()
{
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
	push_buttons[0].initialize(&expander_left, A, ZERO, INPUT);
    1290:	7c 01       	movw	r14, r24
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	e8 0e       	add	r14, r24
    1296:	f1 1c       	adc	r15, r1
    1298:	00 e0       	ldi	r16, 0x00	; 0
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	b7 01       	movw	r22, r14
    12a0:	ce 01       	movw	r24, r28
    12a2:	82 96       	adiw	r24, 0x22	; 34
    12a4:	d8 df       	rcall	.-80     	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[1].initialize(&expander_left, A, TWO,  INPUT);
    12a6:	22 e0       	ldi	r18, 0x02	; 2
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	b7 01       	movw	r22, r14
    12ac:	ce 01       	movw	r24, r28
    12ae:	87 96       	adiw	r24, 0x27	; 39
    12b0:	d2 df       	rcall	.-92     	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[2].initialize(&expander_left, A, FOUR, INPUT);
    12b2:	24 e0       	ldi	r18, 0x04	; 4
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	b7 01       	movw	r22, r14
    12b8:	ce 01       	movw	r24, r28
    12ba:	8c 96       	adiw	r24, 0x2c	; 44
    12bc:	cc df       	rcall	.-104    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[3].initialize(&expander_left, A, SIX,  INPUT);
    12be:	26 e0       	ldi	r18, 0x06	; 6
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	b7 01       	movw	r22, r14
    12c4:	ce 01       	movw	r24, r28
    12c6:	c1 96       	adiw	r24, 0x31	; 49
    12c8:	c6 df       	rcall	.-116    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[4].initialize(&expander_left, B, ZERO, INPUT);
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	b7 01       	movw	r22, r14
    12d0:	ce 01       	movw	r24, r28
    12d2:	c6 96       	adiw	r24, 0x36	; 54
    12d4:	c0 df       	rcall	.-128    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[5].initialize(&expander_left, B, TWO,  INPUT);
    12d6:	22 e0       	ldi	r18, 0x02	; 2
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	b7 01       	movw	r22, r14
    12dc:	ce 01       	movw	r24, r28
    12de:	cb 96       	adiw	r24, 0x3b	; 59
    12e0:	ba df       	rcall	.-140    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[6].initialize(&expander_left, B, FOUR, INPUT);
    12e2:	24 e0       	ldi	r18, 0x04	; 4
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	b7 01       	movw	r22, r14
    12e8:	ce 01       	movw	r24, r28
    12ea:	80 5c       	subi	r24, 0xC0	; 192
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	b3 df       	rcall	.-154    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[7].initialize(&expander_left, B, SIX,  INPUT);
    12f0:	26 e0       	ldi	r18, 0x06	; 6
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	b7 01       	movw	r22, r14
    12f6:	ce 01       	movw	r24, r28
    12f8:	8b 5b       	subi	r24, 0xBB	; 187
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	ac df       	rcall	.-168    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    12fe:	7e 01       	movw	r14, r28
	push_buttons[8].initialize(&expander_right, A, ZERO, INPUT);
    1300:	82 e1       	ldi	r24, 0x12	; 18
    1302:	e8 0e       	add	r14, r24
    1304:	f1 1c       	adc	r15, r1
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	b7 01       	movw	r22, r14
    130c:	ce 01       	movw	r24, r28
    130e:	86 5b       	subi	r24, 0xB6	; 182
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	a1 df       	rcall	.-190    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[9].initialize(&expander_right, A, TWO,  INPUT);
    1314:	22 e0       	ldi	r18, 0x02	; 2
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	b7 01       	movw	r22, r14
    131a:	ce 01       	movw	r24, r28
    131c:	81 5b       	subi	r24, 0xB1	; 177
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	9a df       	rcall	.-204    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[10].initialize(&expander_right, A, FOUR, INPUT);
    1322:	24 e0       	ldi	r18, 0x04	; 4
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	b7 01       	movw	r22, r14
    1328:	ce 01       	movw	r24, r28
    132a:	8c 5a       	subi	r24, 0xAC	; 172
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	93 df       	rcall	.-218    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[11].initialize(&expander_right, A, SIX,  INPUT);
    1330:	26 e0       	ldi	r18, 0x06	; 6
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	b7 01       	movw	r22, r14
    1336:	ce 01       	movw	r24, r28
    1338:	87 5a       	subi	r24, 0xA7	; 167
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	8c df       	rcall	.-232    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[12].initialize(&expander_right, B, ZERO, INPUT);
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	b7 01       	movw	r22, r14
    1344:	ce 01       	movw	r24, r28
    1346:	82 5a       	subi	r24, 0xA2	; 162
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	85 df       	rcall	.-246    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[13].initialize(&expander_right, B, TWO,  INPUT);
    134c:	22 e0       	ldi	r18, 0x02	; 2
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	b7 01       	movw	r22, r14
    1352:	ce 01       	movw	r24, r28
    1354:	8d 59       	subi	r24, 0x9D	; 157
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	7e df       	rcall	.-260    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[14].initialize(&expander_right, B, FOUR, INPUT);
    135a:	24 e0       	ldi	r18, 0x04	; 4
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	b7 01       	movw	r22, r14
    1360:	ce 01       	movw	r24, r28
    1362:	88 59       	subi	r24, 0x98	; 152
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	77 df       	rcall	.-274    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1368:	26 e0       	ldi	r18, 0x06	; 6
	push_buttons[15].initialize(&expander_right, B, SIX,  INPUT);
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	b7 01       	movw	r22, r14
    136e:	ce 01       	movw	r24, r28
    1370:	83 59       	subi	r24, 0x93	; 147
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	70 df       	rcall	.-288    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
}
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	08 95       	ret

00001382 <_ZN12InputHandler25initialize_arcade_buttonsEv>:
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29

void InputHandler::initialize_arcade_buttons ()
{
    1386:	ec 01       	movw	r28, r24
	arcade_buttons[0].initialize(K, TWO, INPUT_PULLUP);   // emergency stop
    1388:	22 e0       	ldi	r18, 0x02	; 2
    138a:	42 e0       	ldi	r20, 0x02	; 2
    138c:	69 e0       	ldi	r22, 0x09	; 9
    138e:	8e 58       	subi	r24, 0x8E	; 142
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	ea dd       	rcall	.-1068   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[1].initialize(B, SIX, INPUT_PULLUP);   // n/a
    1394:	22 e0       	ldi	r18, 0x02	; 2
    1396:	46 e0       	ldi	r20, 0x06	; 6
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	ce 01       	movw	r24, r28
    139c:	8b 58       	subi	r24, 0x8B	; 139
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	e3 dd       	rcall	.-1082   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[2].initialize(B, FOUR, INPUT_PULLUP);  // n/a
    13a2:	22 e0       	ldi	r18, 0x02	; 2
    13a4:	44 e0       	ldi	r20, 0x04	; 4
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	ce 01       	movw	r24, r28
    13aa:	88 58       	subi	r24, 0x88	; 136
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	dc dd       	rcall	.-1096   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[3].initialize(B, ZERO, INPUT_PULLUP);  // arm up
    13b0:	22 e0       	ldi	r18, 0x02	; 2
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	ce 01       	movw	r24, r28
    13b8:	85 58       	subi	r24, 0x85	; 133
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	d5 dd       	rcall	.-1110   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[4].initialize(E, FOUR, INPUT_PULLUP);  // lower bucket
    13be:	22 e0       	ldi	r18, 0x02	; 2
    13c0:	44 e0       	ldi	r20, 0x04	; 4
    13c2:	64 e0       	ldi	r22, 0x04	; 4
    13c4:	ce 01       	movw	r24, r28
    13c6:	82 58       	subi	r24, 0x82	; 130
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	ce dd       	rcall	.-1124   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[5].initialize(B, FIVE, INPUT_PULLUP);  // raise bucket
    13cc:	22 e0       	ldi	r18, 0x02	; 2
    13ce:	45 e0       	ldi	r20, 0x05	; 5
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	ce 01       	movw	r24, r28
    13d4:	8f 57       	subi	r24, 0x7F	; 127
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	c7 dd       	rcall	.-1138   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[6].initialize(E, SIX, INPUT_PULLUP);   // arm down
    13da:	22 e0       	ldi	r18, 0x02	; 2
    13dc:	46 e0       	ldi	r20, 0x06	; 6
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	ce 01       	movw	r24, r28
    13e2:	8c 57       	subi	r24, 0x7C	; 124
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	c0 dd       	rcall	.-1152   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[7].initialize(E, SEVEN, INPUT_PULLUP); // plow up
    13e8:	22 e0       	ldi	r18, 0x02	; 2
    13ea:	47 e0       	ldi	r20, 0x07	; 7
    13ec:	64 e0       	ldi	r22, 0x04	; 4
    13ee:	ce 01       	movw	r24, r28
    13f0:	89 57       	subi	r24, 0x79	; 121
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	b9 dd       	rcall	.-1166   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[8].initialize(E, FIVE, INPUT_PULLUP);  // plow down
    13f6:	22 e0       	ldi	r18, 0x02	; 2
    13f8:	45 e0       	ldi	r20, 0x05	; 5
    13fa:	64 e0       	ldi	r22, 0x04	; 4
    13fc:	ce 01       	movw	r24, r28
    13fe:	86 57       	subi	r24, 0x76	; 118
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	b2 dd       	rcall	.-1180   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1404:	df 91       	pop	r29
}
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <_ZN12InputHandler20initialize_joysticksEv>:
    140a:	cf 93       	push	r28

void InputHandler::initialize_joysticks ()
{
    140c:	df 93       	push	r29
    140e:	ec 01       	movw	r28, r24
	joystick_left_y.initialize(CHANNEL_ZERO);
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	82 57       	subi	r24, 0x72	; 114
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_left_x.initialize(CHANNEL_ONE);
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	ce 01       	movw	r24, r28
    141e:	83 57       	subi	r24, 0x73	; 115
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_right_x.initialize(CHANNEL_SIX);
    1426:	66 e0       	ldi	r22, 0x06	; 6
    1428:	ce 01       	movw	r24, r28
    142a:	81 57       	subi	r24, 0x71	; 113
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_right_y.initialize(CHANNEL_SEVEN);
    1432:	67 e0       	ldi	r22, 0x07	; 7
    1434:	ce 01       	movw	r24, r28
    1436:	80 57       	subi	r24, 0x70	; 112
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <_ZN12InputHandler25initialize_potentiometersEv>:

void InputHandler::initialize_potentiometers ()
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ec 01       	movw	r28, r24
	potentiometer_left.initialize(CHANNEL_TWO);
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	8f 56       	subi	r24, 0x6F	; 111
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	potentiometer_right.initialize(CHANNEL_FIVE);
    1454:	65 e0       	ldi	r22, 0x05	; 5
    1456:	ce 01       	movw	r24, r28
    1458:	8e 56       	subi	r24, 0x6E	; 110
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <_ZN12InputHandler10initializeEP6Memory>:

Clocks RESET_TIMER(250);

Clocks PollInputs(100);
void InputHandler::initialize (Memory * memory)
{
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
    1470:	8b 01       	movw	r16, r22
	PollInputs.setInterval(100);
    1472:	44 e6       	ldi	r20, 0x64	; 100
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	8e ef       	ldi	r24, 0xFE	; 254
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN6Clocks11setIntervalEl>
	this->memory = memory;
    1482:	19 83       	std	Y+1, r17	; 0x01
    1484:	08 83       	st	Y, r16
	initialize_expanders();
    1486:	ce 01       	movw	r24, r28
    1488:	f0 de       	rcall	.-544    	; 0x126a <_ZN12InputHandler20initialize_expandersEv>
	initialize_push_buttons();
    148a:	ce 01       	movw	r24, r28
    148c:	fb de       	rcall	.-522    	; 0x1284 <_ZN12InputHandler23initialize_push_buttonsEv>
	initialize_arcade_buttons();
    148e:	ce 01       	movw	r24, r28
    1490:	78 df       	rcall	.-272    	; 0x1382 <_ZN12InputHandler25initialize_arcade_buttonsEv>
	initialize_joysticks();
    1492:	ce 01       	movw	r24, r28
    1494:	ba df       	rcall	.-140    	; 0x140a <_ZN12InputHandler20initialize_joysticksEv>
	initialize_potentiometers();
    1496:	ce 01       	movw	r24, r28
    1498:	d5 df       	rcall	.-86     	; 0x1444 <_ZN12InputHandler25initialize_potentiometersEv>
    149a:	df 91       	pop	r29
}
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <_ZN12InputHandler19poll_arcade_buttonsEv>:
    14a4:	0f 93       	push	r16
	potentiometer_left.initialize(CHANNEL_TWO);
	potentiometer_right.initialize(CHANNEL_FIVE);
}

void InputHandler::poll_arcade_buttons ()
{
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	8c 01       	movw	r16, r24
    14ac:	0e 58       	subi	r16, 0x8E	; 142
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	c0 e3       	ldi	r28, 0x30	; 48
	for (uint8_t i = 0; i < NUM_ARCADE_BUTTONS; ++i)
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
    14b2:	c8 01       	movw	r24, r16
    14b4:	02 de       	rcall	.-1020   	; 0x10ba <_ZN10DigitalPin6is_lowEv>
    14b6:	68 2f       	mov	r22, r24
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	8c 2f       	mov	r24, r28
    14bc:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
    14c0:	0d 5f       	subi	r16, 0xFD	; 253
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	cf 5f       	subi	r28, 0xFF	; 255
	potentiometer_right.initialize(CHANNEL_FIVE);
}

void InputHandler::poll_arcade_buttons ()
{
	for (uint8_t i = 0; i < NUM_ARCADE_BUTTONS; ++i)
    14c6:	c9 33       	cpi	r28, 0x39	; 57
    14c8:	a1 f7       	brne	.-24     	; 0x14b2 <_ZN12InputHandler19poll_arcade_buttonsEv+0xe>
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
}
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <_ZN12InputHandler17poll_push_buttonsEv>:

void InputHandler::poll_push_buttons ()
{
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	8c 01       	movw	r16, r24
    14da:	0e 5d       	subi	r16, 0xDE	; 222
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	c0 e4       	ldi	r28, 0x40	; 64
	for (uint8_t i = 0; i < NUM_PUSH_BUTTONS; ++i)
	{

		if (!push_buttons[i].read()) {
    14e0:	c8 01       	movw	r24, r16
    14e2:	3a de       	rcall	.-908    	; 0x1158 <_ZN11ExpanderPin4readEv>
    14e4:	81 11       	cpse	r24, r1
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <_ZN12InputHandler17poll_push_buttonsEv+0x20>
			memory->write(PUSH_BUTTON_0_FLAG + i, 1);
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	8c 2f       	mov	r24, r28
    14ee:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
    14f2:	0b 5f       	subi	r16, 0xFB	; 251
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	cf 5f       	subi	r28, 0xFF	; 255
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
}

void InputHandler::poll_push_buttons ()
{
	for (uint8_t i = 0; i < NUM_PUSH_BUTTONS; ++i)
    14f8:	c0 35       	cpi	r28, 0x50	; 80
    14fa:	91 f7       	brne	.-28     	; 0x14e0 <_ZN12InputHandler17poll_push_buttonsEv+0xe>
//    else {
//      if(RESET_TIMER.isDone_NoReset())
//        memory->write(PUSH_BUTTON_0_FLAG + i, 0);
//    }
	}
}
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <_ZN12InputHandler18poll_analog_inputsEv>:

void InputHandler::poll_analog_inputs ()
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	ec 01       	movw	r28, r24
	memory->write(JOYSTICK_LEFT_X,  joystick_left_x.read());
    150a:	83 57       	subi	r24, 0x73	; 115
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    1512:	bc 01       	movw	r22, r24
    1514:	80 e2       	ldi	r24, 0x20	; 32
    1516:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_LEFT_Y,  joystick_left_y.read());
    151a:	ce 01       	movw	r24, r28
    151c:	82 57       	subi	r24, 0x72	; 114
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    1524:	bc 01       	movw	r22, r24
    1526:	81 e2       	ldi	r24, 0x21	; 33
    1528:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_RIGHT_X, joystick_right_x.read());
    152c:	ce 01       	movw	r24, r28
    152e:	81 57       	subi	r24, 0x71	; 113
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    1536:	bc 01       	movw	r22, r24
    1538:	82 e2       	ldi	r24, 0x22	; 34
    153a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_RIGHT_Y, joystick_right_y.read());
    153e:	ce 01       	movw	r24, r28
    1540:	80 57       	subi	r24, 0x70	; 112
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    1548:	bc 01       	movw	r22, r24
    154a:	83 e2       	ldi	r24, 0x23	; 35
    154c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
	memory->write(SLIDER_LEFT,      potentiometer_left.read());
    1550:	ce 01       	movw	r24, r28
    1552:	8f 56       	subi	r24, 0x6F	; 111
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    155a:	bc 01       	movw	r22, r24
    155c:	84 e2       	ldi	r24, 0x24	; 36
    155e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
	memory->write(SLIDER_RIGHT,     potentiometer_right.read());
    1562:	ce 01       	movw	r24, r28
    1564:	8e 56       	subi	r24, 0x6E	; 110
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    156c:	bc 01       	movw	r22, r24
    156e:	85 e2       	ldi	r24, 0x25	; 37
    1570:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <_ZN12InputHandler4pollEv>:
	initialize_joysticks();
	initialize_potentiometers();
}

void InputHandler::poll ()
{
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ec 01       	movw	r28, r24
	if(PollInputs.isDone()) {
    1580:	8e ef       	ldi	r24, 0xFE	; 254
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN6Clocks6isDoneEv>
    1588:	88 23       	and	r24, r24
    158a:	31 f0       	breq	.+12     	; 0x1598 <_ZN12InputHandler4pollEv+0x1e>
		poll_arcade_buttons();
    158c:	ce 01       	movw	r24, r28
    158e:	8a df       	rcall	.-236    	; 0x14a4 <_ZN12InputHandler19poll_arcade_buttonsEv>
		poll_push_buttons();
    1590:	ce 01       	movw	r24, r28
    1592:	9f df       	rcall	.-194    	; 0x14d2 <_ZN12InputHandler17poll_push_buttonsEv>
		poll_analog_inputs();
    1594:	ce 01       	movw	r24, r28
    1596:	b6 df       	rcall	.-148    	; 0x1504 <_ZN12InputHandler18poll_analog_inputsEv>
    1598:	df 91       	pop	r29
	}
}
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <_GLOBAL__sub_I_RESET_TIMER>:
    159e:	4a ef       	ldi	r20, 0xFA	; 250
#include "../memory/memory_variables.hpp"
#include "../timer/Clock.hpp"
static const int NUM_ARCADE_BUTTONS = 9;
static const int NUM_PUSH_BUTTONS = 16;

Clocks RESET_TIMER(250);
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	8a e0       	ldi	r24, 0x0A	; 10
    15a8:	93 e0       	ldi	r25, 0x03	; 3
    15aa:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN6ClocksC1El>

Clocks PollInputs(100);
    15ae:	44 e6       	ldi	r20, 0x64	; 100
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	8e ef       	ldi	r24, 0xFE	; 254
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_ZN6ClocksC1El>
    15be:	08 95       	ret

000015c0 <_ZN13OutputHandler20initialize_expandersEv>:
		push_button_leds[inner[j]].write(0);
	_delay_ms(pause);
	for (int j = 0; j < 12; ++j)
		push_button_leds[outer[j]].write(0);
	_delay_ms(pause);
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	ec 01       	movw	r28, r24
    15c6:	60 e2       	ldi	r22, 0x20	; 32
    15c8:	88 5f       	subi	r24, 0xF8	; 248
    15ca:	9e 4f       	sbci	r25, 0xFE	; 254
    15cc:	7a dd       	rcall	.-1292   	; 0x10c2 <_ZN8Expander11set_addressEh>
    15ce:	67 e2       	ldi	r22, 0x27	; 39
    15d0:	ce 01       	movw	r24, r28
    15d2:	88 5e       	subi	r24, 0xE8	; 232
    15d4:	9e 4f       	sbci	r25, 0xFE	; 254
    15d6:	75 dd       	rcall	.-1302   	; 0x10c2 <_ZN8Expander11set_addressEh>
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	08 95       	ret

000015de <_ZN13OutputHandler27initialize_push_button_ledsEv>:
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	ec 01       	movw	r28, r24
    15ea:	7c 01       	movw	r14, r24
    15ec:	88 ef       	ldi	r24, 0xF8	; 248
    15ee:	e8 1a       	sub	r14, r24
    15f0:	8e ef       	ldi	r24, 0xFE	; 254
    15f2:	f8 0a       	sbc	r15, r24
    15f4:	01 e0       	ldi	r16, 0x01	; 1
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	b7 01       	movw	r22, r14
    15fc:	ce 01       	movw	r24, r28
    15fe:	88 5d       	subi	r24, 0xD8	; 216
    1600:	9e 4f       	sbci	r25, 0xFE	; 254
    1602:	29 de       	rcall	.-942    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1604:	23 e0       	ldi	r18, 0x03	; 3
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	b7 01       	movw	r22, r14
    160a:	ce 01       	movw	r24, r28
    160c:	83 5d       	subi	r24, 0xD3	; 211
    160e:	9e 4f       	sbci	r25, 0xFE	; 254
    1610:	22 de       	rcall	.-956    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1612:	25 e0       	ldi	r18, 0x05	; 5
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	b7 01       	movw	r22, r14
    1618:	ce 01       	movw	r24, r28
    161a:	8e 5c       	subi	r24, 0xCE	; 206
    161c:	9e 4f       	sbci	r25, 0xFE	; 254
    161e:	1b de       	rcall	.-970    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1620:	27 e0       	ldi	r18, 0x07	; 7
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	b7 01       	movw	r22, r14
    1626:	ce 01       	movw	r24, r28
    1628:	89 5c       	subi	r24, 0xC9	; 201
    162a:	9e 4f       	sbci	r25, 0xFE	; 254
    162c:	14 de       	rcall	.-984    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    162e:	21 e0       	ldi	r18, 0x01	; 1
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	b7 01       	movw	r22, r14
    1634:	ce 01       	movw	r24, r28
    1636:	84 5c       	subi	r24, 0xC4	; 196
    1638:	9e 4f       	sbci	r25, 0xFE	; 254
    163a:	0d de       	rcall	.-998    	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    163c:	23 e0       	ldi	r18, 0x03	; 3
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	b7 01       	movw	r22, r14
    1642:	ce 01       	movw	r24, r28
    1644:	8f 5b       	subi	r24, 0xBF	; 191
    1646:	9e 4f       	sbci	r25, 0xFE	; 254
    1648:	06 de       	rcall	.-1012   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    164a:	25 e0       	ldi	r18, 0x05	; 5
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	b7 01       	movw	r22, r14
    1650:	ce 01       	movw	r24, r28
    1652:	8a 5b       	subi	r24, 0xBA	; 186
    1654:	9e 4f       	sbci	r25, 0xFE	; 254
    1656:	ff dd       	rcall	.-1026   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1658:	27 e0       	ldi	r18, 0x07	; 7
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	b7 01       	movw	r22, r14
    165e:	ce 01       	movw	r24, r28
    1660:	85 5b       	subi	r24, 0xB5	; 181
    1662:	9e 4f       	sbci	r25, 0xFE	; 254
    1664:	f8 dd       	rcall	.-1040   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1666:	7e 01       	movw	r14, r28
    1668:	88 ee       	ldi	r24, 0xE8	; 232
    166a:	e8 1a       	sub	r14, r24
    166c:	8e ef       	ldi	r24, 0xFE	; 254
    166e:	f8 0a       	sbc	r15, r24
    1670:	21 e0       	ldi	r18, 0x01	; 1
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	b7 01       	movw	r22, r14
    1676:	ce 01       	movw	r24, r28
    1678:	80 5b       	subi	r24, 0xB0	; 176
    167a:	9e 4f       	sbci	r25, 0xFE	; 254
    167c:	ec dd       	rcall	.-1064   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    167e:	23 e0       	ldi	r18, 0x03	; 3
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	b7 01       	movw	r22, r14
    1684:	ce 01       	movw	r24, r28
    1686:	8b 5a       	subi	r24, 0xAB	; 171
    1688:	9e 4f       	sbci	r25, 0xFE	; 254
    168a:	e5 dd       	rcall	.-1078   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    168c:	25 e0       	ldi	r18, 0x05	; 5
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	b7 01       	movw	r22, r14
    1692:	ce 01       	movw	r24, r28
    1694:	86 5a       	subi	r24, 0xA6	; 166
    1696:	9e 4f       	sbci	r25, 0xFE	; 254
    1698:	de dd       	rcall	.-1092   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    169a:	27 e0       	ldi	r18, 0x07	; 7
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	b7 01       	movw	r22, r14
    16a0:	ce 01       	movw	r24, r28
    16a2:	81 5a       	subi	r24, 0xA1	; 161
    16a4:	9e 4f       	sbci	r25, 0xFE	; 254
    16a6:	d7 dd       	rcall	.-1106   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	b7 01       	movw	r22, r14
    16ae:	ce 01       	movw	r24, r28
    16b0:	8c 59       	subi	r24, 0x9C	; 156
    16b2:	9e 4f       	sbci	r25, 0xFE	; 254
    16b4:	d0 dd       	rcall	.-1120   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16b6:	23 e0       	ldi	r18, 0x03	; 3
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	b7 01       	movw	r22, r14
    16bc:	ce 01       	movw	r24, r28
    16be:	87 59       	subi	r24, 0x97	; 151
    16c0:	9e 4f       	sbci	r25, 0xFE	; 254
    16c2:	c9 dd       	rcall	.-1134   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16c4:	25 e0       	ldi	r18, 0x05	; 5
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	b7 01       	movw	r22, r14
    16ca:	ce 01       	movw	r24, r28
    16cc:	82 59       	subi	r24, 0x92	; 146
    16ce:	9e 4f       	sbci	r25, 0xFE	; 254
    16d0:	c2 dd       	rcall	.-1148   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16d2:	27 e0       	ldi	r18, 0x07	; 7
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	b7 01       	movw	r22, r14
    16d8:	ce 01       	movw	r24, r28
    16da:	8d 58       	subi	r24, 0x8D	; 141
    16dc:	9e 4f       	sbci	r25, 0xFE	; 254
    16de:	bb dd       	rcall	.-1162   	; 0x1256 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	0f 91       	pop	r16
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	08 95       	ret

000016ec <_ZN13OutputHandler21initialize_panel_ledsEv>:
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	8c 01       	movw	r16, r24
    16f6:	ec 01       	movw	r28, r24
    16f8:	c8 58       	subi	r28, 0x88	; 136
    16fa:	de 4f       	sbci	r29, 0xFE	; 254
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	ce 01       	movw	r24, r28
    1704:	31 dc       	rcall	.-1950   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1706:	21 e0       	ldi	r18, 0x01	; 1
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	c8 01       	movw	r24, r16
    170e:	85 58       	subi	r24, 0x85	; 133
    1710:	9e 4f       	sbci	r25, 0xFE	; 254
    1712:	2a dc       	rcall	.-1964   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1714:	21 e0       	ldi	r18, 0x01	; 1
    1716:	42 e0       	ldi	r20, 0x02	; 2
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	c8 01       	movw	r24, r16
    171c:	82 58       	subi	r24, 0x82	; 130
    171e:	9e 4f       	sbci	r25, 0xFE	; 254
    1720:	23 dc       	rcall	.-1978   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	43 e0       	ldi	r20, 0x03	; 3
    1726:	62 e0       	ldi	r22, 0x02	; 2
    1728:	c8 01       	movw	r24, r16
    172a:	8f 57       	subi	r24, 0x7F	; 127
    172c:	9e 4f       	sbci	r25, 0xFE	; 254
    172e:	1c dc       	rcall	.-1992   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1730:	21 e0       	ldi	r18, 0x01	; 1
    1732:	44 e0       	ldi	r20, 0x04	; 4
    1734:	62 e0       	ldi	r22, 0x02	; 2
    1736:	c8 01       	movw	r24, r16
    1738:	8c 57       	subi	r24, 0x7C	; 124
    173a:	9e 4f       	sbci	r25, 0xFE	; 254
    173c:	15 dc       	rcall	.-2006   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    173e:	21 e0       	ldi	r18, 0x01	; 1
    1740:	45 e0       	ldi	r20, 0x05	; 5
    1742:	62 e0       	ldi	r22, 0x02	; 2
    1744:	c8 01       	movw	r24, r16
    1746:	89 57       	subi	r24, 0x79	; 121
    1748:	9e 4f       	sbci	r25, 0xFE	; 254
    174a:	0e dc       	rcall	.-2020   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    174c:	21 e0       	ldi	r18, 0x01	; 1
    174e:	46 e0       	ldi	r20, 0x06	; 6
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	c8 01       	movw	r24, r16
    1754:	86 57       	subi	r24, 0x76	; 118
    1756:	9e 4f       	sbci	r25, 0xFE	; 254
    1758:	07 dc       	rcall	.-2034   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    175a:	21 e0       	ldi	r18, 0x01	; 1
    175c:	47 e0       	ldi	r20, 0x07	; 7
    175e:	62 e0       	ldi	r22, 0x02	; 2
    1760:	c8 01       	movw	r24, r16
    1762:	83 57       	subi	r24, 0x73	; 115
    1764:	9e 4f       	sbci	r25, 0xFE	; 254
    1766:	00 dc       	rcall	.-2048   	; 0xf68 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1768:	00 57       	subi	r16, 0x70	; 112
    176a:	1e 4f       	sbci	r17, 0xFE	; 254
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	ce 01       	movw	r24, r28
    1770:	47 dc       	rcall	.-1906   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1772:	23 96       	adiw	r28, 0x03	; 3
    1774:	c0 17       	cp	r28, r16
    1776:	d1 07       	cpc	r29, r17
    1778:	c9 f7       	brne	.-14     	; 0x176c <_ZN13OutputHandler21initialize_panel_ledsEv+0x80>
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <_ZN13OutputHandler24refresh_push_button_ledsEv>:
    1784:	cf 92       	push	r12
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	88 5d       	subi	r24, 0xD8	; 216
    1796:	9e 4f       	sbci	r25, 0xFE	; 254
    1798:	7c 01       	movw	r14, r24
    179a:	10 e4       	ldi	r17, 0x40	; 64
    179c:	c0 e0       	ldi	r28, 0x00	; 0
    179e:	d0 e0       	ldi	r29, 0x00	; 0
    17a0:	cc 24       	eor	r12, r12
    17a2:	c3 94       	inc	r12
    17a4:	d1 2c       	mov	r13, r1
    17a6:	01 e0       	ldi	r16, 0x01	; 1
    17a8:	81 2f       	mov	r24, r17
    17aa:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
    17ae:	89 2b       	or	r24, r25
    17b0:	11 f1       	breq	.+68     	; 0x17f6 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x72>
    17b2:	88 e0       	ldi	r24, 0x08	; 8
    17b4:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
    17b8:	96 01       	movw	r18, r12
    17ba:	0c 2e       	mov	r0, r28
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x3e>
    17be:	22 0f       	add	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <_ZN13OutputHandler24refresh_push_button_ledsEv+0x3a>
    17c6:	82 23       	and	r24, r18
    17c8:	93 23       	and	r25, r19
    17ca:	89 2b       	or	r24, r25
    17cc:	21 f0       	breq	.+8      	; 0x17d6 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x52>
    17ce:	60 2f       	mov	r22, r16
    17d0:	c7 01       	movw	r24, r14
    17d2:	d9 dc       	rcall	.-1614   	; 0x1186 <_ZN11ExpanderPin5writeEb>
    17d4:	18 c0       	rjmp	.+48     	; 0x1806 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x82>
    17d6:	87 e1       	ldi	r24, 0x17	; 23
    17d8:	93 e0       	ldi	r25, 0x03	; 3
    17da:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN6Clocks6isDoneEv>
    17de:	88 23       	and	r24, r24
    17e0:	91 f0       	breq	.+36     	; 0x1806 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x82>
    17e2:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <blinkState>
    17e6:	c7 01       	movw	r24, r14
    17e8:	ce dc       	rcall	.-1636   	; 0x1186 <_ZN11ExpanderPin5writeEb>
    17ea:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <blinkState>
    17ee:	80 27       	eor	r24, r16
    17f0:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <blinkState>
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x82>
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	81 2f       	mov	r24, r17
    17fc:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN6Memory5writeEhj>
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	c7 01       	movw	r24, r14
    1804:	c0 dc       	rcall	.-1664   	; 0x1186 <_ZN11ExpanderPin5writeEb>
    1806:	21 96       	adiw	r28, 0x01	; 1
    1808:	1f 5f       	subi	r17, 0xFF	; 255
    180a:	85 e0       	ldi	r24, 0x05	; 5
    180c:	e8 0e       	add	r14, r24
    180e:	f1 1c       	adc	r15, r1
    1810:	c0 31       	cpi	r28, 0x10	; 16
    1812:	d1 05       	cpc	r29, r1
    1814:	49 f6       	brne	.-110    	; 0x17a8 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x24>
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	08 95       	ret

00001828 <_ZN13OutputHandler18refresh_panel_ledsEv>:
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	ec 01       	movw	r28, r24
    182e:	84 e0       	ldi	r24, 0x04	; 4
    1830:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
    1834:	89 2b       	or	r24, r25
    1836:	59 f0       	breq	.+22     	; 0x184e <_ZN13OutputHandler18refresh_panel_ledsEv+0x26>
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	ce 01       	movw	r24, r28
    183c:	88 58       	subi	r24, 0x88	; 136
    183e:	9e 4f       	sbci	r25, 0xFE	; 254
    1840:	df db       	rcall	.-2114   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	ce 01       	movw	r24, r28
    1846:	8c 57       	subi	r24, 0x7C	; 124
    1848:	9e 4f       	sbci	r25, 0xFE	; 254
    184a:	da db       	rcall	.-2124   	; 0x1000 <_ZN10DigitalPin5writeEb>
    184c:	0a c0       	rjmp	.+20     	; 0x1862 <_ZN13OutputHandler18refresh_panel_ledsEv+0x3a>
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	ce 01       	movw	r24, r28
    1852:	88 58       	subi	r24, 0x88	; 136
    1854:	9e 4f       	sbci	r25, 0xFE	; 254
    1856:	d4 db       	rcall	.-2136   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	ce 01       	movw	r24, r28
    185c:	8c 57       	subi	r24, 0x7C	; 124
    185e:	9e 4f       	sbci	r25, 0xFE	; 254
    1860:	cf db       	rcall	.-2146   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1862:	87 e0       	ldi	r24, 0x07	; 7
    1864:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
    1868:	89 2b       	or	r24, r25
    186a:	59 f0       	breq	.+22     	; 0x1882 <_ZN13OutputHandler18refresh_panel_ledsEv+0x5a>
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	ce 01       	movw	r24, r28
    1870:	8f 57       	subi	r24, 0x7F	; 127
    1872:	9e 4f       	sbci	r25, 0xFE	; 254
    1874:	c5 db       	rcall	.-2166   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	ce 01       	movw	r24, r28
    187a:	83 57       	subi	r24, 0x73	; 115
    187c:	9e 4f       	sbci	r25, 0xFE	; 254
    187e:	c0 db       	rcall	.-2176   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <_ZN13OutputHandler18refresh_panel_ledsEv+0x6e>
    1882:	61 e0       	ldi	r22, 0x01	; 1
    1884:	ce 01       	movw	r24, r28
    1886:	8f 57       	subi	r24, 0x7F	; 127
    1888:	9e 4f       	sbci	r25, 0xFE	; 254
    188a:	ba db       	rcall	.-2188   	; 0x1000 <_ZN10DigitalPin5writeEb>
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	ce 01       	movw	r24, r28
    1890:	83 57       	subi	r24, 0x73	; 115
    1892:	9e 4f       	sbci	r25, 0xFE	; 254
    1894:	b5 db       	rcall	.-2198   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1896:	88 e0       	ldi	r24, 0x08	; 8
    1898:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
    189c:	89 2b       	or	r24, r25
    189e:	59 f0       	breq	.+22     	; 0x18b6 <_ZN13OutputHandler18refresh_panel_ledsEv+0x8e>
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	ce 01       	movw	r24, r28
    18a4:	82 58       	subi	r24, 0x82	; 130
    18a6:	9e 4f       	sbci	r25, 0xFE	; 254
    18a8:	ab db       	rcall	.-2218   	; 0x1000 <_ZN10DigitalPin5writeEb>
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	ce 01       	movw	r24, r28
    18ae:	86 57       	subi	r24, 0x76	; 118
    18b0:	9e 4f       	sbci	r25, 0xFE	; 254
    18b2:	a6 db       	rcall	.-2228   	; 0x1000 <_ZN10DigitalPin5writeEb>
    18b4:	0a c0       	rjmp	.+20     	; 0x18ca <_ZN13OutputHandler18refresh_panel_ledsEv+0xa2>
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	ce 01       	movw	r24, r28
    18ba:	82 58       	subi	r24, 0x82	; 130
    18bc:	9e 4f       	sbci	r25, 0xFE	; 254
    18be:	a0 db       	rcall	.-2240   	; 0x1000 <_ZN10DigitalPin5writeEb>
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	ce 01       	movw	r24, r28
    18c4:	86 57       	subi	r24, 0x76	; 118
    18c6:	9e 4f       	sbci	r25, 0xFE	; 254
    18c8:	9b db       	rcall	.-2250   	; 0x1000 <_ZN10DigitalPin5writeEb>
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <_ZN13OutputHandler7refreshEv>:
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	ec 01       	movw	r28, r24
    18d6:	56 df       	rcall	.-340    	; 0x1784 <_ZN13OutputHandler24refresh_push_button_ledsEv>
    18d8:	ce 01       	movw	r24, r28
    18da:	a6 df       	rcall	.-180    	; 0x1828 <_ZN13OutputHandler18refresh_panel_ledsEv>
    18dc:	ce 01       	movw	r24, r28
    18de:	02 96       	adiw	r24, 0x02	; 2
    18e0:	0e 94 ed 14 	call	0x29da	; 0x29da <_ZNK11TouchScreen7refreshEv>
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
    18ea:	4a e0       	ldi	r20, 0x0A	; 10
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	bc 01       	movw	r22, r24
    18f0:	8a e7       	ldi	r24, 0x7A	; 122
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	ad d7       	rcall	.+3930   	; 0x2850 <_ZN17Adafruit_7segment5printEji>
    18f6:	8a e7       	ldi	r24, 0x7A	; 122
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	8c d5       	rcall	.+2840   	; 0x2414 <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
    18fc:	80 e5       	ldi	r24, 0x50	; 80
    18fe:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN6Memory4readEh>
    1902:	4a e0       	ldi	r20, 0x0A	; 10
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	bc 01       	movw	r22, r24
    1908:	89 e3       	ldi	r24, 0x39	; 57
    190a:	93 e0       	ldi	r25, 0x03	; 3
    190c:	a1 d7       	rcall	.+3906   	; 0x2850 <_ZN17Adafruit_7segment5printEji>
    190e:	89 e3       	ldi	r24, 0x39	; 57
    1910:	93 e0       	ldi	r25, 0x03	; 3
    1912:	80 d5       	rcall	.+2816   	; 0x2414 <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	08 95       	ret

0000191a <_ZN13OutputHandler6spiralEv>:
    191a:	af 92       	push	r10
    191c:	bf 92       	push	r11
    191e:	cf 92       	push	r12
    1920:	df 92       	push	r13
    1922:	ef 92       	push	r14
    1924:	ff 92       	push	r15
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	a0 97       	sbiw	r28, 0x20	; 32
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	6c 01       	movw	r12, r24
    1940:	20 e2       	ldi	r18, 0x20	; 32
    1942:	e6 e0       	ldi	r30, 0x06	; 6
    1944:	f2 e0       	ldi	r31, 0x02	; 2
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	dc 01       	movw	r26, r24
    194c:	01 90       	ld	r0, Z+
    194e:	0d 92       	st	X+, r0
    1950:	2a 95       	dec	r18
    1952:	e1 f7       	brne	.-8      	; 0x194c <_ZN13OutputHandler6spiralEv+0x32>
    1954:	8e 01       	movw	r16, r28
    1956:	0f 5d       	subi	r16, 0xDF	; 223
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	7c 01       	movw	r14, r24
    195c:	58 01       	movw	r10, r16
    195e:	f5 01       	movw	r30, r10
    1960:	92 91       	ld	r25, -Z
    1962:	82 91       	ld	r24, -Z
    1964:	5f 01       	movw	r10, r30
    1966:	9c 01       	movw	r18, r24
    1968:	22 0f       	add	r18, r18
    196a:	33 1f       	adc	r19, r19
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	82 0f       	add	r24, r18
    1972:	93 1f       	adc	r25, r19
    1974:	88 5d       	subi	r24, 0xD8	; 216
    1976:	9e 4f       	sbci	r25, 0xFE	; 254
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	8c 0d       	add	r24, r12
    197c:	9d 1d       	adc	r25, r13
    197e:	03 dc       	rcall	.-2042   	; 0x1186 <_ZN11ExpanderPin5writeEb>
    1980:	ff ef       	ldi	r31, 0xFF	; 255
    1982:	20 e7       	ldi	r18, 0x70	; 112
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	f1 50       	subi	r31, 0x01	; 1
    1988:	20 40       	sbci	r18, 0x00	; 0
    198a:	80 40       	sbci	r24, 0x00	; 0
    198c:	e1 f7       	brne	.-8      	; 0x1986 <_ZN13OutputHandler6spiralEv+0x6c>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <_ZN13OutputHandler6spiralEv+0x76>
    1990:	00 00       	nop
    1992:	ea 14       	cp	r14, r10
    1994:	fb 04       	cpc	r15, r11
    1996:	19 f7       	brne	.-58     	; 0x195e <_ZN13OutputHandler6spiralEv+0x44>
    1998:	f8 01       	movw	r30, r16
    199a:	92 91       	ld	r25, -Z
    199c:	82 91       	ld	r24, -Z
    199e:	8f 01       	movw	r16, r30
    19a0:	9c 01       	movw	r18, r24
    19a2:	22 0f       	add	r18, r18
    19a4:	33 1f       	adc	r19, r19
    19a6:	22 0f       	add	r18, r18
    19a8:	33 1f       	adc	r19, r19
    19aa:	82 0f       	add	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	88 5d       	subi	r24, 0xD8	; 216
    19b0:	9e 4f       	sbci	r25, 0xFE	; 254
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	8c 0d       	add	r24, r12
    19b6:	9d 1d       	adc	r25, r13
    19b8:	e6 db       	rcall	.-2100   	; 0x1186 <_ZN11ExpanderPin5writeEb>
    19ba:	ff ef       	ldi	r31, 0xFF	; 255
    19bc:	20 e7       	ldi	r18, 0x70	; 112
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	f1 50       	subi	r31, 0x01	; 1
    19c2:	20 40       	sbci	r18, 0x00	; 0
    19c4:	80 40       	sbci	r24, 0x00	; 0
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <_ZN13OutputHandler6spiralEv+0xa6>
    19c8:	00 c0       	rjmp	.+0      	; 0x19ca <_ZN13OutputHandler6spiralEv+0xb0>
    19ca:	00 00       	nop
    19cc:	0e 15       	cp	r16, r14
    19ce:	1f 05       	cpc	r17, r15
    19d0:	19 f7       	brne	.-58     	; 0x1998 <_ZN13OutputHandler6spiralEv+0x7e>
    19d2:	a0 96       	adiw	r28, 0x20	; 32
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	cf 90       	pop	r12
    19ee:	bf 90       	pop	r11
    19f0:	af 90       	pop	r10
    19f2:	08 95       	ret

000019f4 <_ZN13OutputHandler7startupEv>:
    19f4:	6f 92       	push	r6
    19f6:	7f 92       	push	r7
    19f8:	8f 92       	push	r8
    19fa:	9f 92       	push	r9
    19fc:	af 92       	push	r10
    19fe:	bf 92       	push	r11
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	7c 01       	movw	r14, r24
    1a12:	61 2c       	mov	r6, r1
    1a14:	71 2c       	mov	r7, r1
    1a16:	0f 2e       	mov	r0, r31
    1a18:	f3 e0       	ldi	r31, 0x03	; 3
    1a1a:	af 2e       	mov	r10, r31
    1a1c:	b1 2c       	mov	r11, r1
    1a1e:	f0 2d       	mov	r31, r0
    1a20:	81 2c       	mov	r8, r1
    1a22:	91 2c       	mov	r9, r1
    1a24:	63 01       	movw	r12, r6
    1a26:	21 e0       	ldi	r18, 0x01	; 1
    1a28:	c2 22       	and	r12, r18
    1a2a:	dd 24       	eor	r13, r13
    1a2c:	c1 14       	cp	r12, r1
    1a2e:	d1 04       	cpc	r13, r1
    1a30:	21 f0       	breq	.+8      	; 0x1a3a <_ZN13OutputHandler7startupEv+0x46>
    1a32:	e5 01       	movw	r28, r10
    1a34:	c8 19       	sub	r28, r8
    1a36:	d9 09       	sbc	r29, r9
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <_ZN13OutputHandler7startupEv+0x48>
    1a3a:	e4 01       	movw	r28, r8
    1a3c:	8e 01       	movw	r16, r28
    1a3e:	00 0f       	add	r16, r16
    1a40:	11 1f       	adc	r17, r17
    1a42:	0c 0f       	add	r16, r28
    1a44:	1d 1f       	adc	r17, r29
    1a46:	08 58       	subi	r16, 0x88	; 136
    1a48:	1e 4f       	sbci	r17, 0xFE	; 254
    1a4a:	0e 0d       	add	r16, r14
    1a4c:	1f 1d       	adc	r17, r15
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	c8 01       	movw	r24, r16
    1a52:	d6 da       	rcall	.-2644   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1a54:	24 96       	adiw	r28, 0x04	; 4
    1a56:	ce 01       	movw	r24, r28
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	c8 0f       	add	r28, r24
    1a5e:	d9 1f       	adc	r29, r25
    1a60:	c8 58       	subi	r28, 0x88	; 136
    1a62:	de 4f       	sbci	r29, 0xFE	; 254
    1a64:	ce 0d       	add	r28, r14
    1a66:	df 1d       	adc	r29, r15
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	c9 da       	rcall	.-2670   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	90 e7       	ldi	r25, 0x70	; 112
    1a72:	22 e0       	ldi	r18, 0x02	; 2
    1a74:	81 50       	subi	r24, 0x01	; 1
    1a76:	90 40       	sbci	r25, 0x00	; 0
    1a78:	20 40       	sbci	r18, 0x00	; 0
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <_ZN13OutputHandler7startupEv+0x80>
    1a7c:	00 c0       	rjmp	.+0      	; 0x1a7e <_ZN13OutputHandler7startupEv+0x8a>
    1a7e:	00 00       	nop
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	c8 01       	movw	r24, r16
    1a84:	bd da       	rcall	.-2694   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	ce 01       	movw	r24, r28
    1a8a:	ba da       	rcall	.-2700   	; 0x1000 <_ZN10DigitalPin5writeEb>
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	88 1a       	sub	r8, r24
    1a90:	98 0a       	sbc	r9, r24
    1a92:	94 e0       	ldi	r25, 0x04	; 4
    1a94:	89 16       	cp	r8, r25
    1a96:	91 04       	cpc	r9, r1
    1a98:	49 f6       	brne	.-110    	; 0x1a2c <_ZN13OutputHandler7startupEv+0x38>
    1a9a:	2f ef       	ldi	r18, 0xFF	; 255
    1a9c:	62 1a       	sub	r6, r18
    1a9e:	72 0a       	sbc	r7, r18
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	68 16       	cp	r6, r24
    1aa4:	71 04       	cpc	r7, r1
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <_ZN13OutputHandler7startupEv+0xb6>
    1aa8:	bb cf       	rjmp	.-138    	; 0x1a20 <_ZN13OutputHandler7startupEv+0x2c>
    1aaa:	c7 01       	movw	r24, r14
    1aac:	36 df       	rcall	.-404    	; 0x191a <_ZN13OutputHandler6spiralEv>
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	9f 90       	pop	r9
    1ac4:	8f 90       	pop	r8
    1ac6:	7f 90       	pop	r7
    1ac8:	6f 90       	pop	r6
    1aca:	08 95       	ret

00001acc <_GLOBAL__sub_I_LsevenSeg>:
    1acc:	8f 92       	push	r8
    1ace:	af 92       	push	r10
    1ad0:	cf 92       	push	r12
    1ad2:	ef 92       	push	r14
    1ad4:	0f 93       	push	r16
#include "../i2c/LiquidCrystal_I2C.hpp"
#include <stdio.h>

#define F_CPU 16000000UL
#include <util/delay.h>
Adafruit_7segment LsevenSeg(0x70);
    1ad6:	60 e7       	ldi	r22, 0x70	; 112
    1ad8:	8a e7       	ldi	r24, 0x7A	; 122
    1ada:	93 e0       	ldi	r25, 0x03	; 3
    1adc:	b3 d4       	rcall	.+2406   	; 0x2444 <_ZN17Adafruit_7segmentC1Eh>
Adafruit_7segment RsevenSeg(0x71);
    1ade:	61 e7       	ldi	r22, 0x71	; 113
    1ae0:	89 e3       	ldi	r24, 0x39	; 57
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	af d4       	rcall	.+2398   	; 0x2444 <_ZN17Adafruit_7segmentC1Eh>
LiquidCrystal_I2C lcd(0x3F, 2, 1, 0, 4, 5, 6, 7);
    1ae6:	0f 2e       	mov	r0, r31
    1ae8:	f7 e0       	ldi	r31, 0x07	; 7
    1aea:	8f 2e       	mov	r8, r31
    1aec:	f0 2d       	mov	r31, r0
    1aee:	0f 2e       	mov	r0, r31
    1af0:	f6 e0       	ldi	r31, 0x06	; 6
    1af2:	af 2e       	mov	r10, r31
    1af4:	f0 2d       	mov	r31, r0
    1af6:	0f 2e       	mov	r0, r31
    1af8:	f5 e0       	ldi	r31, 0x05	; 5
    1afa:	cf 2e       	mov	r12, r31
    1afc:	f0 2d       	mov	r31, r0
    1afe:	68 94       	set
    1b00:	ee 24       	eor	r14, r14
    1b02:	e2 f8       	bld	r14, 2
    1b04:	00 e0       	ldi	r16, 0x00	; 0
    1b06:	21 e0       	ldi	r18, 0x01	; 1
    1b08:	42 e0       	ldi	r20, 0x02	; 2
    1b0a:	6f e3       	ldi	r22, 0x3F	; 63
    1b0c:	83 e2       	ldi	r24, 0x23	; 35
    1b0e:	93 e0       	ldi	r25, 0x03	; 3
    1b10:	6e d3       	rcall	.+1756   	; 0x21ee <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
	panel_leds[6].initialize(C, SIX, OUTPUT);
	panel_leds[7].initialize(C, SEVEN, OUTPUT);
	for (int i = 0; i < 8; ++i)
		panel_leds[i].write(0);
}
Clocks blinkTimer(500);
    1b12:	44 ef       	ldi	r20, 0xF4	; 244
    1b14:	51 e0       	ldi	r21, 0x01	; 1
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	87 e1       	ldi	r24, 0x17	; 23
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	bc d7       	rcall	.+3960   	; 0x2a98 <_ZN6ClocksC1El>
		push_button_leds[inner[j]].write(0);
	_delay_ms(pause);
	for (int j = 0; j < 12; ++j)
		push_button_leds[outer[j]].write(0);
	_delay_ms(pause);
    1b20:	0f 91       	pop	r16
    1b22:	ef 90       	pop	r14
    1b24:	cf 90       	pop	r12
    1b26:	af 90       	pop	r10
    1b28:	8f 90       	pop	r8
    1b2a:	08 95       	ret

00001b2c <_ZN13OutputHandler10initializeEP6Memory>:
Adafruit_7segment LsevenSeg(0x70);
Adafruit_7segment RsevenSeg(0x71);
LiquidCrystal_I2C lcd(0x3F, 2, 1, 0, 4, 5, 6, 7);

void OutputHandler::initialize (Memory * memory)
{
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	ec 01       	movw	r28, r24
    1b36:	8b 01       	movw	r16, r22
	this->memory = memory;
    1b38:	79 83       	std	Y+1, r23	; 0x01
    1b3a:	68 83       	st	Y, r22
	initialize_expanders();
    1b3c:	41 dd       	rcall	.-1406   	; 0x15c0 <_ZN13OutputHandler20initialize_expandersEv>
	initialize_push_button_leds();
    1b3e:	ce 01       	movw	r24, r28
    1b40:	4e dd       	rcall	.-1380   	; 0x15de <_ZN13OutputHandler27initialize_push_button_ledsEv>
	initialize_panel_leds();
    1b42:	ce 01       	movw	r24, r28
    1b44:	d3 dd       	rcall	.-1114   	; 0x16ec <_ZN13OutputHandler21initialize_panel_ledsEv>
    1b46:	43 e0       	ldi	r20, 0x03	; 3

	screen.initialize(memory, UART_3);
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	b8 01       	movw	r22, r16
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	02 96       	adiw	r24, 0x02	; 2
    1b50:	05 d7       	rcall	.+3594   	; 0x295c <_ZN11TouchScreen10initializeEP6Memoryj>
    1b52:	20 e0       	ldi	r18, 0x00	; 0

	lcd.begin (20, 4); // 20 x 4 LCD module
    1b54:	44 e0       	ldi	r20, 0x04	; 4
    1b56:	64 e1       	ldi	r22, 0x14	; 20
    1b58:	83 e2       	ldi	r24, 0x23	; 35
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	15 d4       	rcall	.+2090   	; 0x2388 <_ZN17LiquidCrystal_I2C5beginEhhh>
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
	lcd.setBacklightPin(3, POSITIVE); // BL, BL_POL
    1b60:	63 e0       	ldi	r22, 0x03	; 3
    1b62:	83 e2       	ldi	r24, 0x23	; 35
    1b64:	93 e0       	ldi	r25, 0x03	; 3
    1b66:	19 d3       	rcall	.+1586   	; 0x219a <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol>
    1b68:	61 e0       	ldi	r22, 0x01	; 1
	lcd.setBacklight(1);
    1b6a:	83 e2       	ldi	r24, 0x23	; 35
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	29 d3       	rcall	.+1618   	; 0x21c2 <_ZN17LiquidCrystal_I2C12setBacklightEh>
    1b70:	66 e4       	ldi	r22, 0x46	; 70
	lcd.print("NASA Robotics");
    1b72:	72 e0       	ldi	r23, 0x02	; 2
    1b74:	83 e2       	ldi	r24, 0x23	; 35
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	da d2       	rcall	.+1460   	; 0x212e <_ZN3LCD5printEPKc>
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0, 1);
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	83 e2       	ldi	r24, 0x23	; 35
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	fe d1       	rcall	.+1020   	; 0x1f80 <_ZN3LCD9setCursorEhh>
    1b84:	64 e5       	ldi	r22, 0x54	; 84
	lcd.print("Control Box: V2.3");
    1b86:	72 e0       	ldi	r23, 0x02	; 2
    1b88:	83 e2       	ldi	r24, 0x23	; 35
    1b8a:	93 e0       	ldi	r25, 0x03	; 3
    1b8c:	d0 d2       	rcall	.+1440   	; 0x212e <_ZN3LCD5printEPKc>
    1b8e:	60 e7       	ldi	r22, 0x70	; 112
	LsevenSeg.begin(0x70);
    1b90:	8a e7       	ldi	r24, 0x7A	; 122
    1b92:	93 e0       	ldi	r25, 0x03	; 3
    1b94:	29 d4       	rcall	.+2130   	; 0x23e8 <_ZN20Adafruit_LEDBackpack5beginEh>
    1b96:	61 e7       	ldi	r22, 0x71	; 113
    1b98:	89 e3       	ldi	r24, 0x39	; 57
	RsevenSeg.begin(0x71);
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	25 d4       	rcall	.+2122   	; 0x23e8 <_ZN20Adafruit_LEDBackpack5beginEh>
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
}
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <_Z10copy_rangePhS_h>:
    1ba8:	44 23       	and	r20, r20
    1baa:	51 f0       	breq	.+20     	; 0x1bc0 <_Z10copy_rangePhS_h+0x18>
    1bac:	a8 2f       	mov	r26, r24
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
	state = DONE;
    1bae:	b9 2f       	mov	r27, r25
    1bb0:	fb 01       	movw	r30, r22
    1bb2:	64 0f       	add	r22, r20
    1bb4:	71 1d       	adc	r23, r1
    1bb6:	8d 91       	ld	r24, X+
    1bb8:	81 93       	st	Z+, r24
    1bba:	e6 17       	cp	r30, r22
    1bbc:	f7 07       	cpc	r31, r23
    1bbe:	d9 f7       	brne	.-10     	; 0x1bb6 <_Z10copy_rangePhS_h+0xe>
    1bc0:	08 95       	ret

00001bc2 <_ZN3I2C11set_addressEh>:
    1bc2:	66 0f       	add	r22, r22
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	61 83       	std	Z+1, r22	; 0x01
    1bc8:	08 95       	ret

00001bca <_ZN3I2C12send_addressENS_9DirectionE>:
    1bca:	fc 01       	movw	r30, r24
    1bcc:	61 11       	cpse	r22, r1
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <_ZN3I2C12send_addressENS_9DirectionE+0xe>
    1bd0:	81 81       	ldd	r24, Z+1	; 0x01
    1bd2:	81 60       	ori	r24, 0x01	; 1
    1bd4:	81 83       	std	Z+1, r24	; 0x01
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <_ZN3I2C12send_addressENS_9DirectionE+0x14>
    1bd8:	81 81       	ldd	r24, Z+1	; 0x01
    1bda:	8e 7f       	andi	r24, 0xFE	; 254
    1bdc:	81 83       	std	Z+1, r24	; 0x01
    1bde:	81 81       	ldd	r24, Z+1	; 0x01
    1be0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1be4:	84 e8       	ldi	r24, 0x84	; 132
    1be6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	80 83       	st	Z, r24
    1bee:	08 95       	ret

00001bf0 <_ZN3I2C14read_data_byteEv>:
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	84 85       	ldd	r24, Z+12	; 0x0c
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	25 85       	ldd	r18, Z+13	; 0x0d
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	21 50       	subi	r18, 0x01	; 1
    1bfc:	31 09       	sbc	r19, r1
    1bfe:	82 17       	cp	r24, r18
    1c00:	93 07       	cpc	r25, r19
    1c02:	31 f4       	brne	.+12     	; 0x1c10 <_ZN3I2C14read_data_byteEv+0x20>
    1c04:	ac eb       	ldi	r26, 0xBC	; 188
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	9c 91       	ld	r25, X
    1c0a:	80 e4       	ldi	r24, 0x40	; 64
    1c0c:	89 27       	eor	r24, r25
    1c0e:	8c 93       	st	X, r24
    1c10:	84 e8       	ldi	r24, 0x84	; 132
    1c12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c16:	86 e0       	ldi	r24, 0x06	; 6
    1c18:	80 83       	st	Z, r24
    1c1a:	08 95       	ret

00001c1c <_ZN3I2C4failEv>:
}

void I2C::fail ()
{
    1c1c:	fc 01       	movw	r30, r24
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1c1e:	84 e9       	ldi	r24, 0x94	; 148
    1c20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	index = 0;
    1c24:	14 86       	std	Z+12, r1	; 0x0c
	state = START;
    1c26:	10 82       	st	Z, r1
	++fail_count;
    1c28:	86 85       	ldd	r24, Z+14	; 0x0e
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	86 87       	std	Z+14, r24	; 0x0e
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c2e:	85 e3       	ldi	r24, 0x35	; 53
    1c30:	8a 95       	dec	r24
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <_ZN3I2C4failEv+0x14>
    1c34:	00 00       	nop
    1c36:	08 95       	ret

00001c38 <_ZN3I2C12verify_startEv>:
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
	state = VERIFY_START;
}

void I2C::verify_start ()
{
    1c38:	fc 01       	movw	r30, r24
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1c3a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_START;
}

void I2C::verify_start ()
{
	if (!interrupt_flag_set())
    1c3e:	99 23       	and	r25, r25
    1c40:	54 f4       	brge	.+20     	; 0x1c56 <_ZN3I2C12verify_startEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1c42:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_start ()
{
	if (!interrupt_flag_set())
		return;
	if (check_status(TW_START))
    1c46:	88 7f       	andi	r24, 0xF8	; 248
    1c48:	88 30       	cpi	r24, 0x08	; 8
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <_ZN3I2C12verify_startEv+0x1a>
		state = SEND_ADDRESS;
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	80 83       	st	Z, r24
    1c50:	08 95       	ret
    1c52:	cf 01       	movw	r24, r30
	else
		fail();
    1c54:	e3 cf       	rjmp	.-58     	; 0x1c1c <_ZN3I2C4failEv>
    1c56:	08 95       	ret

00001c58 <_ZN3I2C25verify_write_address_sentEv>:
	TWCR = (1 << TWINT) | (1 << TWEN);
	state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
    1c58:	fc 01       	movw	r30, r24
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1c5a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
	if (interrupt_flag_set())
    1c5e:	99 23       	and	r25, r25
    1c60:	54 f4       	brge	.+20     	; 0x1c76 <_ZN3I2C25verify_write_address_sentEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1c62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_write_address_sent ()
{
	if (interrupt_flag_set())
	{
		if (check_status(TW_MT_SLA_ACK))
    1c66:	88 7f       	andi	r24, 0xF8	; 248
    1c68:	88 31       	cpi	r24, 0x18	; 24
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <_ZN3I2C25verify_write_address_sentEv+0x1a>
			state = SEND_BYTE;
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	80 83       	st	Z, r24
    1c70:	08 95       	ret
    1c72:	cf 01       	movw	r24, r30
		else
			fail();
    1c74:	d3 cf       	rjmp	.-90     	; 0x1c1c <_ZN3I2C4failEv>
    1c76:	08 95       	ret

00001c78 <_ZN3I2C24verify_read_address_sentEv>:
	}
}

void I2C::verify_read_address_sent ()
{
    1c78:	fc 01       	movw	r30, r24
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1c7a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}
}

void I2C::verify_read_address_sent ()
{
	if (interrupt_flag_set())
    1c7e:	99 23       	and	r25, r25
    1c80:	54 f4       	brge	.+20     	; 0x1c96 <_ZN3I2C24verify_read_address_sentEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1c82:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_read_address_sent ()
{
	if (interrupt_flag_set())
	{
		if (check_status(TW_MR_SLA_ACK))
    1c86:	88 7f       	andi	r24, 0xF8	; 248
    1c88:	80 34       	cpi	r24, 0x40	; 64
    1c8a:	19 f4       	brne	.+6      	; 0x1c92 <_ZN3I2C24verify_read_address_sentEv+0x1a>
			state = READ_BYTE;
    1c8c:	85 e0       	ldi	r24, 0x05	; 5
    1c8e:	80 83       	st	Z, r24
    1c90:	08 95       	ret
    1c92:	cf 01       	movw	r24, r30
		else
			fail();
    1c94:	c3 cf       	rjmp	.-122    	; 0x1c1c <_ZN3I2C4failEv>
    1c96:	08 95       	ret

00001c98 <_ZN3I2C16verify_data_sentEv>:
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1c98:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_DATA;
}

void I2C::verify_data_sent ()
{
	if (!interrupt_flag_set())
    1c9c:	22 23       	and	r18, r18
    1c9e:	a4 f4       	brge	.+40     	; 0x1cc8 <_ZN3I2C16verify_data_sentEv+0x30>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1ca0:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_data_sent ()
{
	if (!interrupt_flag_set())
		return;
	if (check_status(TW_MT_DATA_ACK))
    1ca4:	28 7f       	andi	r18, 0xF8	; 248
    1ca6:	28 32       	cpi	r18, 0x28	; 40
    1ca8:	71 f4       	brne	.+28     	; 0x1cc6 <_ZN3I2C16verify_data_sentEv+0x2e>
	{
		if (++index < size)
    1caa:	fc 01       	movw	r30, r24
    1cac:	24 85       	ldd	r18, Z+12	; 0x0c
    1cae:	2f 5f       	subi	r18, 0xFF	; 255
    1cb0:	24 87       	std	Z+12, r18	; 0x0c
    1cb2:	35 85       	ldd	r19, Z+13	; 0x0d
    1cb4:	23 17       	cp	r18, r19
    1cb6:	18 f4       	brcc	.+6      	; 0x1cbe <_ZN3I2C16verify_data_sentEv+0x26>
			state = SEND_BYTE;
    1cb8:	24 e0       	ldi	r18, 0x04	; 4
    1cba:	20 83       	st	Z, r18
    1cbc:	08 95       	ret
		else
			state = STOP;
    1cbe:	27 e0       	ldi	r18, 0x07	; 7
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	20 83       	st	Z, r18
    1cc4:	08 95       	ret
	}
	else
		fail();
    1cc6:	aa cf       	rjmp	.-172    	; 0x1c1c <_ZN3I2C4failEv>
    1cc8:	08 95       	ret

00001cca <_ZN3I2C5writeEPhh>:
{
	this->address = _address << 1;
}

int I2C::write (uint8_t * data, uint8_t size)
{
    1cca:	9f 92       	push	r9
    1ccc:	af 92       	push	r10
    1cce:	bf 92       	push	r11
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	7b 01       	movw	r14, r22
    1ce4:	14 2f       	mov	r17, r20

	copy_range(data, buffer, size);
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	6e 5f       	subi	r22, 0xFE	; 254
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	c7 01       	movw	r24, r14
    1cee:	5c df       	rcall	.-328    	; 0x1ba8 <_Z10copy_rangePhS_h>

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
	TWBR = (uint8_t)TWBR_VALUE;
    1cf0:	88 e4       	ldi	r24, 0x48	; 72
    1cf2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	this->size = size;
    1cf6:	1d 87       	std	Y+13, r17	; 0x0d
	index = 0;
    1cf8:	1c 86       	std	Y+12, r1	; 0x0c
	fail_count = 0;
    1cfa:	1e 86       	std	Y+14, r1	; 0x0e
	state = START;
    1cfc:	18 82       	st	Y, r1
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1cfe:	e0 e0       	ldi	r30, 0x00	; 0
	}
}

void I2C::send_data_byte (uint8_t data)
{
	TWDR = data;
    1d00:	0f 2e       	mov	r0, r31
    1d02:	fb eb       	ldi	r31, 0xBB	; 187
    1d04:	cf 2e       	mov	r12, r31
    1d06:	d1 2c       	mov	r13, r1
    1d08:	f0 2d       	mov	r31, r0
	TWCR = (1 << TWINT) | (1 << TWEN);
    1d0a:	0c eb       	ldi	r16, 0xBC	; 188
    1d0c:	10 e0       	ldi	r17, 0x00	; 0
    1d0e:	0f 2e       	mov	r0, r31
    1d10:	f4 e8       	ldi	r31, 0x84	; 132
    1d12:	9f 2e       	mov	r9, r31
    1d14:	f0 2d       	mov	r31, r0
	state = VERIFY_DATA;
    1d16:	0f 2e       	mov	r0, r31
    1d18:	f6 e0       	ldi	r31, 0x06	; 6
    1d1a:	af 2e       	mov	r10, r31
    1d1c:	f0 2d       	mov	r31, r0
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1d1e:	0f 2e       	mov	r0, r31
    1d20:	f4 ee       	ldi	r31, 0xE4	; 228
    1d22:	bf 2e       	mov	r11, r31
    1d24:	f0 2d       	mov	r31, r0
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <_ZN3I2C5writeEPhh+0x64>
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1d28:	e8 81       	ld	r30, Y
    1d2a:	e8 30       	cpi	r30, 0x08	; 8
    1d2c:	99 f1       	breq	.+102    	; 0x1d94 <_ZN3I2C5writeEPhh+0xca>
	{
		if (fail_count >= MAX_FAIL_COUNT)
    1d2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d30:	85 30       	cpi	r24, 0x05	; 5
    1d32:	98 f5       	brcc	.+102    	; 0x1d9a <_ZN3I2C5writeEPhh+0xd0>
			return I2C_FAILURE;
		switch (state)
    1d34:	8e 2f       	mov	r24, r30
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	88 30       	cpi	r24, 0x08	; 8
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	40 f5       	brcc	.+80     	; 0x1d8e <_ZN3I2C5writeEPhh+0xc4>
    1d3e:	fc 01       	movw	r30, r24
    1d40:	ed 56       	subi	r30, 0x6D	; 109
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__tablejump2__>
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1d48:	f8 01       	movw	r30, r16
    1d4a:	b0 82       	st	Z, r11
	state = VERIFY_START;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	88 83       	st	Y, r24
    1d50:	2a c0       	rjmp	.+84     	; 0x1da6 <_ZN3I2C5writeEPhh+0xdc>
		switch (state)
		{
		case START:
			start();
when VERIFY_START:
			verify_start();
    1d52:	ce 01       	movw	r24, r28
    1d54:	71 df       	rcall	.-286    	; 0x1c38 <_ZN3I2C12verify_startEv>
when SEND_ADDRESS:
    1d56:	e8 cf       	rjmp	.-48     	; 0x1d28 <_ZN3I2C5writeEPhh+0x5e>
			send_address(WRITE);
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	36 df       	rcall	.-404    	; 0x1bca <_ZN3I2C12send_addressENS_9DirectionE>
when VERIFY_ADDRESS:
    1d5e:	e4 cf       	rjmp	.-56     	; 0x1d28 <_ZN3I2C5writeEPhh+0x5e>
			verify_write_address_sent();
    1d60:	ce 01       	movw	r24, r28
    1d62:	7a df       	rcall	.-268    	; 0x1c58 <_ZN3I2C25verify_write_address_sentEv>
    1d64:	e1 cf       	rjmp	.-62     	; 0x1d28 <_ZN3I2C5writeEPhh+0x5e>
when SEND_BYTE:
    1d66:	8c 85       	ldd	r24, Y+12	; 0x0c
			send_data_byte(data[index]);
    1d68:	f7 01       	movw	r30, r14
    1d6a:	e8 0f       	add	r30, r24
    1d6c:	f1 1d       	adc	r31, r1
    1d6e:	80 81       	ld	r24, Z
    1d70:	f6 01       	movw	r30, r12
	}
}

void I2C::send_data_byte (uint8_t data)
{
	TWDR = data;
    1d72:	80 83       	st	Z, r24
    1d74:	f8 01       	movw	r30, r16
	TWCR = (1 << TWINT) | (1 << TWEN);
    1d76:	90 82       	st	Z, r9
	state = VERIFY_DATA;
    1d78:	a8 82       	st	Y, r10
    1d7a:	15 c0       	rjmp	.+42     	; 0x1da6 <_ZN3I2C5writeEPhh+0xdc>
when VERIFY_ADDRESS:
			verify_write_address_sent();
when SEND_BYTE:
			send_data_byte(data[index]);
when VERIFY_DATA:
			verify_data_sent();
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	8c df       	rcall	.-232    	; 0x1c98 <_ZN3I2C16verify_data_sentEv>
    1d80:	d3 cf       	rjmp	.-90     	; 0x1d28 <_ZN3I2C5writeEPhh+0x5e>
when STOP:
    1d82:	84 e9       	ldi	r24, 0x94	; 148
		fail();
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1d84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d88:	88 e0       	ldi	r24, 0x08	; 8
	state = DONE;
    1d8a:	88 83       	st	Y, r24
    1d8c:	09 c0       	rjmp	.+18     	; 0x1da0 <_ZN3I2C5writeEPhh+0xd6>
    1d8e:	88 e0       	ldi	r24, 0x08	; 8
when VERIFY_DATA:
			verify_data_sent();
when STOP:
			stop();
otherwise:
			state = DONE;
    1d90:	88 83       	st	Y, r24
    1d92:	06 c0       	rjmp	.+12     	; 0x1da0 <_ZN3I2C5writeEPhh+0xd6>
    1d94:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return I2C_SUCCESS;
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	08 c0       	rjmp	.+16     	; 0x1daa <_ZN3I2C5writeEPhh+0xe0>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
	{
		if (fail_count >= MAX_FAIL_COUNT)
			return I2C_FAILURE;
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <_ZN3I2C5writeEPhh+0xe0>
    1da0:	81 e0       	ldi	r24, 0x01	; 1
			stop();
otherwise:
			state = DONE;
		}
	}
	return I2C_SUCCESS;
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <_ZN3I2C5writeEPhh+0xe0>
    1da6:	e8 81       	ld	r30, Y
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1da8:	c2 cf       	rjmp	.-124    	; 0x1d2e <_ZN3I2C5writeEPhh+0x64>
    1daa:	df 91       	pop	r29
otherwise:
			state = DONE;
		}
	}
	return I2C_SUCCESS;
}
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	bf 90       	pop	r11
    1dbc:	af 90       	pop	r10
    1dbe:	9f 90       	pop	r9
    1dc0:	08 95       	ret

00001dc2 <_ZN3I2C16verify_data_readEv>:
    1dc2:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		fail();
}

void I2C::verify_data_read ()
{
	if (!interrupt_flag_set())
    1dc6:	22 23       	and	r18, r18
    1dc8:	fc f4       	brge	.+62     	; 0x1e08 <_ZN3I2C16verify_data_readEv+0x46>
		return;
	bool last_byte = !(TWCR & (1 << TWEA));
    1dca:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1dce:	26 ff       	sbrs	r18, 6
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <_ZN3I2C16verify_data_readEv+0x16>
    1dd2:	40 e5       	ldi	r20, 0x50	; 80
	State next_state = last_byte ? STOP : READ_BYTE;
    1dd4:	65 e0       	ldi	r22, 0x05	; 5
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <_ZN3I2C16verify_data_readEv+0x1a>
void I2C::verify_data_read ()
{
	if (!interrupt_flag_set())
		return;
	bool last_byte = !(TWCR & (1 << TWEA));
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1dd8:	48 e5       	ldi	r20, 0x58	; 88
	State next_state = last_byte ? STOP : READ_BYTE;
    1dda:	67 e0       	ldi	r22, 0x07	; 7
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1ddc:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	if (!interrupt_flag_set())
		return;
	bool last_byte = !(TWCR & (1 << TWEA));
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
	State next_state = last_byte ? STOP : READ_BYTE;
	if (check_status(status))
    1de0:	28 7f       	andi	r18, 0xF8	; 248
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	24 17       	cp	r18, r20
    1de8:	35 07       	cpc	r19, r21
    1dea:	69 f4       	brne	.+26     	; 0x1e06 <_ZN3I2C16verify_data_readEv+0x44>
	{
		buffer[index++] = TWDR;
    1dec:	fc 01       	movw	r30, r24
    1dee:	24 85       	ldd	r18, Z+12	; 0x0c
    1df0:	31 e0       	ldi	r19, 0x01	; 1
    1df2:	32 0f       	add	r19, r18
    1df4:	34 87       	std	Z+12, r19	; 0x0c
    1df6:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1dfa:	e2 0f       	add	r30, r18
    1dfc:	f1 1d       	adc	r31, r1
    1dfe:	32 83       	std	Z+2, r19	; 0x02
		state = next_state;
    1e00:	fc 01       	movw	r30, r24
    1e02:	60 83       	st	Z, r22
    1e04:	08 95       	ret
	}
	else
		fail();
    1e06:	0a cf       	rjmp	.-492    	; 0x1c1c <_ZN3I2C4failEv>
    1e08:	08 95       	ret

00001e0a <_ZN3I2C4readEPhh>:
	}
	return I2C_SUCCESS;
}

int I2C::read (uint8_t * data, uint8_t size)
{
    1e0a:	bf 92       	push	r11
    1e0c:	cf 92       	push	r12
    1e0e:	df 92       	push	r13
    1e10:	ef 92       	push	r14
    1e12:	ff 92       	push	r15
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	7b 01       	movw	r14, r22
    1e20:	c4 2e       	mov	r12, r20

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
	TWBR = (uint8_t)TWBR_VALUE;
    1e22:	88 e4       	ldi	r24, 0x48	; 72
    1e24:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	this->size = size;
    1e28:	4d 87       	std	Y+13, r20	; 0x0d
	index = 0;
    1e2a:	1c 86       	std	Y+12, r1	; 0x0c
	fail_count = 0;
    1e2c:	1e 86       	std	Y+14, r1	; 0x0e
	state = START;
    1e2e:	18 82       	st	Y, r1
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    1e30:	e0 e0       	ldi	r30, 0x00	; 0
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e32:	0c eb       	ldi	r16, 0xBC	; 188
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	0f 2e       	mov	r0, r31
    1e38:	f4 ee       	ldi	r31, 0xE4	; 228
    1e3a:	bf 2e       	mov	r11, r31
    1e3c:	f0 2d       	mov	r31, r0
	state = VERIFY_START;
    1e3e:	dd 24       	eor	r13, r13
    1e40:	d3 94       	inc	r13
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <_ZN3I2C4readEPhh+0x40>
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    1e44:	e8 81       	ld	r30, Y
    1e46:	e8 30       	cpi	r30, 0x08	; 8
    1e48:	51 f1       	breq	.+84     	; 0x1e9e <_ZN3I2C4readEPhh+0x94>
	{
		if (fail_count >= MAX_FAIL_COUNT)
    1e4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e4c:	85 30       	cpi	r24, 0x05	; 5
    1e4e:	78 f5       	brcc	.+94     	; 0x1eae <_ZN3I2C4readEPhh+0xa4>
			return I2C_FAILURE;
		switch (state)
    1e50:	8e 2f       	mov	r24, r30
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	88 30       	cpi	r24, 0x08	; 8
    1e56:	91 05       	cpc	r25, r1
    1e58:	00 f5       	brcc	.+64     	; 0x1e9a <_ZN3I2C4readEPhh+0x90>
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	e5 56       	subi	r30, 0x65	; 101
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__tablejump2__>
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e64:	f8 01       	movw	r30, r16
    1e66:	b0 82       	st	Z, r11
	state = VERIFY_START;
    1e68:	d8 82       	st	Y, r13
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    1e6a:	ed 2d       	mov	r30, r13
    1e6c:	ee cf       	rjmp	.-36     	; 0x1e4a <_ZN3I2C4readEPhh+0x40>
		switch (state)
		{
		case START:
			start();
when VERIFY_START:
			verify_start();
    1e6e:	ce 01       	movw	r24, r28
    1e70:	e3 de       	rcall	.-570    	; 0x1c38 <_ZN3I2C12verify_startEv>
when SEND_ADDRESS:
    1e72:	e8 cf       	rjmp	.-48     	; 0x1e44 <_ZN3I2C4readEPhh+0x3a>
			send_address(READ);
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	ce 01       	movw	r24, r28
    1e78:	a8 de       	rcall	.-688    	; 0x1bca <_ZN3I2C12send_addressENS_9DirectionE>
when VERIFY_ADDRESS:
			verify_read_address_sent();
    1e7a:	e4 cf       	rjmp	.-56     	; 0x1e44 <_ZN3I2C4readEPhh+0x3a>
    1e7c:	ce 01       	movw	r24, r28
when READ_BYTE:
    1e7e:	fc de       	rcall	.-520    	; 0x1c78 <_ZN3I2C24verify_read_address_sentEv>
			read_data_byte();
    1e80:	e1 cf       	rjmp	.-62     	; 0x1e44 <_ZN3I2C4readEPhh+0x3a>
    1e82:	ce 01       	movw	r24, r28
when VERIFY_DATA:
    1e84:	b5 de       	rcall	.-662    	; 0x1bf0 <_ZN3I2C14read_data_byteEv>
			verify_data_read();
    1e86:	de cf       	rjmp	.-68     	; 0x1e44 <_ZN3I2C4readEPhh+0x3a>
    1e88:	ce 01       	movw	r24, r28
    1e8a:	9b df       	rcall	.-202    	; 0x1dc2 <_ZN3I2C16verify_data_readEv>
when STOP:
    1e8c:	db cf       	rjmp	.-74     	; 0x1e44 <_ZN3I2C4readEPhh+0x3a>
		fail();
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1e8e:	84 e9       	ldi	r24, 0x94	; 148
    1e90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = DONE;
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	88 83       	st	Y, r24
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <_ZN3I2C4readEPhh+0x94>
when VERIFY_DATA:
			verify_data_read();
when STOP:
			stop();
otherwise:
			state = DONE;
    1e9a:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
	copy_range(buffer, data, size);
    1e9c:	88 83       	st	Y, r24
    1e9e:	4c 2d       	mov	r20, r12
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	02 96       	adiw	r24, 0x02	; 2
    1ea6:	80 de       	rcall	.-768    	; 0x1ba8 <_Z10copy_rangePhS_h>
	return I2C_SUCCESS;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <_ZN3I2C4readEPhh+0xa8>
{
	reset(size);
	while (state != DONE)
	{
		if (fail_count >= MAX_FAIL_COUNT)
			return I2C_FAILURE;
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
			state = DONE;
		}
	}
	copy_range(buffer, data, size);
	return I2C_SUCCESS;
}
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	bf 90       	pop	r11
    1ec4:	08 95       	ret

00001ec6 <_ZN5I2CIOC1Ev>:
	Wire.read (&receivedVal,1 );
	retVal = ( _dirMask &  receivedVal);

//	}
	return ( retVal );
}
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	12 82       	std	Z+2, r1	; 0x02
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	81 83       	std	Z+1, r24	; 0x01
    1ece:	10 82       	st	Z, r1
    1ed0:	13 82       	std	Z+3, r1	; 0x03
    1ed2:	08 95       	ret

00001ed4 <_ZN5I2CIO5beginEh>:
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	ec 01       	movw	r28, r24
    1eda:	6a 83       	std	Y+2, r22	; 0x02
    1edc:	8b eb       	ldi	r24, 0xBB	; 187
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	70 de       	rcall	.-800    	; 0x1bc2 <_ZN3I2C11set_addressEh>
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	be 01       	movw	r22, r28
    1ee6:	8b eb       	ldi	r24, 0xBB	; 187
    1ee8:	93 e0       	ldi	r25, 0x03	; 3
    1eea:	8f df       	rcall	.-226    	; 0x1e0a <_ZN3I2C4readEPhh>
    1eec:	88 83       	st	Y, r24
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <_ZN5I2CIO8portModeEh>:
    1ef8:	61 11       	cpse	r22, r1
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <_ZN5I2CIO8portModeEh+0xc>
    1efc:	2f ef       	ldi	r18, 0xFF	; 255
    1efe:	fc 01       	movw	r30, r24
    1f00:	21 83       	std	Z+1, r18	; 0x01
    1f02:	08 95       	ret
    1f04:	fc 01       	movw	r30, r24
    1f06:	11 82       	std	Z+1, r1	; 0x01
    1f08:	08 95       	ret

00001f0a <_ZN5I2CIO5writeEh>:
	// outputs updating the output shadow of the device

	//
	// 15-FEB-2018 - fix, all I/Os initialized as input must be written as HIGH
	//    _shadow = ( value & ~(_dirMask) );
	_shadow = ( value | _dirMask );
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	21 81       	ldd	r18, Z+1	; 0x01
    1f0e:	62 2b       	or	r22, r18
    1f10:	60 83       	st	Z, r22


	Wire.write ( &_shadow,1 );
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	bc 01       	movw	r22, r24
    1f16:	8b eb       	ldi	r24, 0xBB	; 187
    1f18:	93 e0       	ldi	r25, 0x03	; 3
    1f1a:	d7 de       	rcall	.-594    	; 0x1cca <_ZN3I2C5writeEPhh>

//	}
	return ( (status == 0) );
}
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	08 95       	ret

00001f22 <_ZN3LCD15setBacklightPinEh14t_backlightPol>:
	for (uint8_t i = 0; i < 8; i++)
	{
		write(pgm_read_byte_near(charmap++));
		_delay_us(40);
	}
}
    1f22:	08 95       	ret

00001f24 <_ZN3LCD12setBacklightEh>:
    1f24:	08 95       	ret

00001f26 <_ZN3LCD4sendEhh>:
    1f26:	08 95       	ret

00001f28 <_ZN3LCD5writeEh>:
    1f28:	dc 01       	movw	r26, r24
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	00 84       	ldd	r0, Z+8	; 0x08
    1f30:	f1 85       	ldd	r31, Z+9	; 0x09
    1f32:	e0 2d       	mov	r30, r0
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	09 95       	icall
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	08 95       	ret

00001f3e <_ZN3LCDC1Ev>:
    1f3e:	28 e7       	ldi	r18, 0x78	; 120
    1f40:	32 e0       	ldi	r19, 0x02	; 2
    1f42:	fc 01       	movw	r30, r24
    1f44:	31 83       	std	Z+1, r19	; 0x01
    1f46:	20 83       	st	Z, r18
    1f48:	08 95       	ret

00001f4a <_ZN3LCD9backlightEv>:
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	ed 91       	ld	r30, X+
    1f4e:	fc 91       	ld	r31, X
    1f50:	04 80       	ldd	r0, Z+4	; 0x04
    1f52:	f5 81       	ldd	r31, Z+5	; 0x05
    1f54:	e0 2d       	mov	r30, r0
    1f56:	6f ef       	ldi	r22, 0xFF	; 255
    1f58:	09 95       	icall
    1f5a:	08 95       	ret

00001f5c <_ZN3LCD7commandEh>:
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	ed 91       	ld	r30, X+
    1f60:	fc 91       	ld	r31, X
    1f62:	00 84       	ldd	r0, Z+8	; 0x08
    1f64:	f1 85       	ldd	r31, Z+9	; 0x09
    1f66:	e0 2d       	mov	r30, r0
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	09 95       	icall
    1f6c:	08 95       	ret

00001f6e <_ZN3LCD5clearEv>:
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	f5 df       	rcall	.-22     	; 0x1f5c <_ZN3LCD7commandEh>
    1f72:	8f e3       	ldi	r24, 0x3F	; 63
    1f74:	9f e1       	ldi	r25, 0x1F	; 31
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <_ZN3LCD5clearEv+0x8>
    1f7a:	00 c0       	rjmp	.+0      	; 0x1f7c <_ZN3LCD5clearEv+0xe>
    1f7c:	00 00       	nop
    1f7e:	08 95       	ret

00001f80 <_ZN3LCD9setCursorEhh>:
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	28 97       	sbiw	r28, 0x08	; 8
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	fc 01       	movw	r30, r24
    1f96:	19 82       	std	Y+1, r1	; 0x01
    1f98:	80 e4       	ldi	r24, 0x40	; 64
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    1f9c:	94 e1       	ldi	r25, 0x14	; 20
    1f9e:	9b 83       	std	Y+3, r25	; 0x03
    1fa0:	94 e5       	ldi	r25, 0x54	; 84
    1fa2:	9c 83       	std	Y+4, r25	; 0x04
    1fa4:	1d 82       	std	Y+5, r1	; 0x05
    1fa6:	8e 83       	std	Y+6, r24	; 0x06
    1fa8:	80 e1       	ldi	r24, 0x10	; 16
    1faa:	8f 83       	std	Y+7, r24	; 0x07
    1fac:	80 e5       	ldi	r24, 0x50	; 80
    1fae:	88 87       	std	Y+8, r24	; 0x08
    1fb0:	85 81       	ldd	r24, Z+5	; 0x05
    1fb2:	48 17       	cp	r20, r24
    1fb4:	10 f0       	brcs	.+4      	; 0x1fba <_ZN3LCD9setCursorEhh+0x3a>
    1fb6:	4f ef       	ldi	r20, 0xFF	; 255
    1fb8:	48 0f       	add	r20, r24
    1fba:	96 81       	ldd	r25, Z+6	; 0x06
    1fbc:	90 31       	cpi	r25, 0x10	; 16
    1fbe:	61 f4       	brne	.+24     	; 0x1fd8 <_ZN3LCD9setCursorEhh+0x58>
    1fc0:	84 30       	cpi	r24, 0x04	; 4
    1fc2:	51 f4       	brne	.+20     	; 0x1fd8 <_ZN3LCD9setCursorEhh+0x58>
    1fc4:	de 01       	movw	r26, r28
    1fc6:	a4 0f       	add	r26, r20
    1fc8:	b1 1d       	adc	r27, r1
    1fca:	15 96       	adiw	r26, 0x05	; 5
    1fcc:	8c 91       	ld	r24, X
    1fce:	68 0f       	add	r22, r24
    1fd0:	60 68       	ori	r22, 0x80	; 128
    1fd2:	cf 01       	movw	r24, r30
    1fd4:	c3 df       	rcall	.-122    	; 0x1f5c <_ZN3LCD7commandEh>
    1fd6:	09 c0       	rjmp	.+18     	; 0x1fea <_ZN3LCD9setCursorEhh+0x6a>
    1fd8:	de 01       	movw	r26, r28
    1fda:	a4 0f       	add	r26, r20
    1fdc:	b1 1d       	adc	r27, r1
    1fde:	11 96       	adiw	r26, 0x01	; 1
    1fe0:	9c 91       	ld	r25, X
    1fe2:	69 0f       	add	r22, r25
    1fe4:	60 68       	ori	r22, 0x80	; 128
    1fe6:	cf 01       	movw	r24, r30
    1fe8:	b9 df       	rcall	.-142    	; 0x1f5c <_ZN3LCD7commandEh>
    1fea:	28 96       	adiw	r28, 0x08	; 8
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <_ZN3LCD7displayEv>:
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	63 81       	ldd	r22, Z+3	; 0x03
    2000:	26 2f       	mov	r18, r22
    2002:	24 60       	ori	r18, 0x04	; 4
    2004:	23 83       	std	Z+3, r18	; 0x03
    2006:	6c 60       	ori	r22, 0x0C	; 12
    2008:	a9 cf       	rjmp	.-174    	; 0x1f5c <_ZN3LCD7commandEh>
    200a:	08 95       	ret

0000200c <_ZN3LCD5beginEhhh>:
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	ec 01       	movw	r28, r24
    2012:	42 30       	cpi	r20, 0x02	; 2
    2014:	18 f0       	brcs	.+6      	; 0x201c <_ZN3LCD5beginEhhh+0x10>
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	88 60       	ori	r24, 0x08	; 8
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	4d 83       	std	Y+5, r20	; 0x05
    201e:	6e 83       	std	Y+6, r22	; 0x06
    2020:	22 23       	and	r18, r18
    2022:	29 f0       	breq	.+10     	; 0x202e <_ZN3LCD5beginEhhh+0x22>
    2024:	41 30       	cpi	r20, 0x01	; 1
    2026:	19 f4       	brne	.+6      	; 0x202e <_ZN3LCD5beginEhhh+0x22>
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	84 60       	ori	r24, 0x04	; 4
    202c:	8a 83       	std	Y+2, r24	; 0x02
    202e:	2f ef       	ldi	r18, 0xFF	; 255
    2030:	81 ee       	ldi	r24, 0xE1	; 225
    2032:	94 e0       	ldi	r25, 0x04	; 4
    2034:	21 50       	subi	r18, 0x01	; 1
    2036:	80 40       	sbci	r24, 0x00	; 0
    2038:	90 40       	sbci	r25, 0x00	; 0
    203a:	e1 f7       	brne	.-8      	; 0x2034 <_ZN3LCD5beginEhhh+0x28>
    203c:	00 c0       	rjmp	.+0      	; 0x203e <_ZN3LCD5beginEhhh+0x32>
    203e:	00 00       	nop
    2040:	6a 81       	ldd	r22, Y+2	; 0x02
    2042:	64 fd       	sbrc	r22, 4
    2044:	3d c0       	rjmp	.+122    	; 0x20c0 <_ZN3LCD5beginEhhh+0xb4>
    2046:	e8 81       	ld	r30, Y
    2048:	f9 81       	ldd	r31, Y+1	; 0x01
    204a:	00 84       	ldd	r0, Z+8	; 0x08
    204c:	f1 85       	ldd	r31, Z+9	; 0x09
    204e:	e0 2d       	mov	r30, r0
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	63 e0       	ldi	r22, 0x03	; 3
    2054:	ce 01       	movw	r24, r28
    2056:	09 95       	icall
    2058:	8f e4       	ldi	r24, 0x4F	; 79
    205a:	96 e4       	ldi	r25, 0x46	; 70
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <_ZN3LCD5beginEhhh+0x50>
    2060:	00 c0       	rjmp	.+0      	; 0x2062 <_ZN3LCD5beginEhhh+0x56>
    2062:	00 00       	nop
    2064:	e8 81       	ld	r30, Y
    2066:	f9 81       	ldd	r31, Y+1	; 0x01
    2068:	00 84       	ldd	r0, Z+8	; 0x08
    206a:	f1 85       	ldd	r31, Z+9	; 0x09
    206c:	e0 2d       	mov	r30, r0
    206e:	42 e0       	ldi	r20, 0x02	; 2
    2070:	63 e0       	ldi	r22, 0x03	; 3
    2072:	ce 01       	movw	r24, r28
    2074:	09 95       	icall
    2076:	87 e5       	ldi	r24, 0x57	; 87
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <_ZN3LCD5beginEhhh+0x6e>
    207e:	00 c0       	rjmp	.+0      	; 0x2080 <_ZN3LCD5beginEhhh+0x74>
    2080:	00 00       	nop
    2082:	e8 81       	ld	r30, Y
    2084:	f9 81       	ldd	r31, Y+1	; 0x01
    2086:	00 84       	ldd	r0, Z+8	; 0x08
    2088:	f1 85       	ldd	r31, Z+9	; 0x09
    208a:	e0 2d       	mov	r30, r0
    208c:	42 e0       	ldi	r20, 0x02	; 2
    208e:	63 e0       	ldi	r22, 0x03	; 3
    2090:	ce 01       	movw	r24, r28
    2092:	09 95       	icall
    2094:	87 e5       	ldi	r24, 0x57	; 87
    2096:	92 e0       	ldi	r25, 0x02	; 2
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <_ZN3LCD5beginEhhh+0x8c>
    209c:	00 c0       	rjmp	.+0      	; 0x209e <_ZN3LCD5beginEhhh+0x92>
    209e:	00 00       	nop
    20a0:	e8 81       	ld	r30, Y
    20a2:	f9 81       	ldd	r31, Y+1	; 0x01
    20a4:	00 84       	ldd	r0, Z+8	; 0x08
    20a6:	f1 85       	ldd	r31, Z+9	; 0x09
    20a8:	e0 2d       	mov	r30, r0
    20aa:	42 e0       	ldi	r20, 0x02	; 2
    20ac:	62 e0       	ldi	r22, 0x02	; 2
    20ae:	ce 01       	movw	r24, r28
    20b0:	09 95       	icall
    20b2:	87 e5       	ldi	r24, 0x57	; 87
    20b4:	92 e0       	ldi	r25, 0x02	; 2
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <_ZN3LCD5beginEhhh+0xaa>
    20ba:	00 c0       	rjmp	.+0      	; 0x20bc <_ZN3LCD5beginEhhh+0xb0>
    20bc:	00 00       	nop
    20be:	1d c0       	rjmp	.+58     	; 0x20fa <_ZN3LCD5beginEhhh+0xee>
    20c0:	60 62       	ori	r22, 0x20	; 32
    20c2:	ce 01       	movw	r24, r28
    20c4:	4b df       	rcall	.-362    	; 0x1f5c <_ZN3LCD7commandEh>
    20c6:	8f e4       	ldi	r24, 0x4F	; 79
    20c8:	96 e4       	ldi	r25, 0x46	; 70
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <_ZN3LCD5beginEhhh+0xbe>
    20ce:	00 c0       	rjmp	.+0      	; 0x20d0 <_ZN3LCD5beginEhhh+0xc4>
    20d0:	00 00       	nop
    20d2:	6a 81       	ldd	r22, Y+2	; 0x02
    20d4:	60 62       	ori	r22, 0x20	; 32
    20d6:	ce 01       	movw	r24, r28
    20d8:	41 df       	rcall	.-382    	; 0x1f5c <_ZN3LCD7commandEh>
    20da:	87 e5       	ldi	r24, 0x57	; 87
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <_ZN3LCD5beginEhhh+0xd2>
    20e2:	00 c0       	rjmp	.+0      	; 0x20e4 <_ZN3LCD5beginEhhh+0xd8>
    20e4:	00 00       	nop
    20e6:	6a 81       	ldd	r22, Y+2	; 0x02
    20e8:	60 62       	ori	r22, 0x20	; 32
    20ea:	ce 01       	movw	r24, r28
    20ec:	37 df       	rcall	.-402    	; 0x1f5c <_ZN3LCD7commandEh>
    20ee:	87 e5       	ldi	r24, 0x57	; 87
    20f0:	92 e0       	ldi	r25, 0x02	; 2
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <_ZN3LCD5beginEhhh+0xe6>
    20f6:	00 c0       	rjmp	.+0      	; 0x20f8 <_ZN3LCD5beginEhhh+0xec>
    20f8:	00 00       	nop
    20fa:	6a 81       	ldd	r22, Y+2	; 0x02
    20fc:	60 62       	ori	r22, 0x20	; 32
    20fe:	ce 01       	movw	r24, r28
    2100:	2d df       	rcall	.-422    	; 0x1f5c <_ZN3LCD7commandEh>
    2102:	8f ee       	ldi	r24, 0xEF	; 239
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <_ZN3LCD5beginEhhh+0xfa>
    210a:	00 c0       	rjmp	.+0      	; 0x210c <_ZN3LCD5beginEhhh+0x100>
    210c:	00 00       	nop
    210e:	84 e0       	ldi	r24, 0x04	; 4
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	ce 01       	movw	r24, r28
    2114:	73 df       	rcall	.-282    	; 0x1ffc <_ZN3LCD7displayEv>
    2116:	ce 01       	movw	r24, r28
    2118:	2a df       	rcall	.-428    	; 0x1f6e <_ZN3LCD5clearEv>
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	8c 83       	std	Y+4, r24	; 0x04
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	ce 01       	movw	r24, r28
    2122:	1c df       	rcall	.-456    	; 0x1f5c <_ZN3LCD7commandEh>
    2124:	ce 01       	movw	r24, r28
    2126:	11 df       	rcall	.-478    	; 0x1f4a <_ZN3LCD9backlightEv>
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	08 95       	ret

0000212e <_ZN3LCD5printEPKc>:
	return 1;             // assume OK
}


void LCD::print(const char *str)
{
    212e:	cf 92       	push	r12
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	8c 01       	movw	r16, r24
	while(*str != 0x00)
    2140:	db 01       	movw	r26, r22
    2142:	9c 91       	ld	r25, X
    2144:	99 23       	and	r25, r25
    2146:	01 f1       	breq	.+64     	; 0x2188 <_ZN3LCD5printEPKc+0x5a>
    2148:	eb 01       	movw	r28, r22
	{
		printf("PrintVal: %d\n",str);
    214a:	0f 2e       	mov	r0, r31
    214c:	f6 e6       	ldi	r31, 0x66	; 102
    214e:	ef 2e       	mov	r14, r31
    2150:	f2 e0       	ldi	r31, 0x02	; 2
    2152:	ff 2e       	mov	r15, r31
    2154:	f0 2d       	mov	r31, r0
    2156:	6e 01       	movw	r12, r28
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	ff 92       	push	r15
    215e:	ef 92       	push	r14
    2160:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <printf>
    2164:	21 96       	adiw	r28, 0x01	; 1
		write(*(str++));
    2166:	d8 01       	movw	r26, r16
    2168:	ed 91       	ld	r30, X+
    216a:	fc 91       	ld	r31, X
    216c:	06 80       	ldd	r0, Z+6	; 0x06
    216e:	f7 81       	ldd	r31, Z+7	; 0x07
    2170:	e0 2d       	mov	r30, r0
    2172:	d6 01       	movw	r26, r12
    2174:	6c 91       	ld	r22, X
    2176:	c8 01       	movw	r24, r16
    2178:	09 95       	icall
}


void LCD::print(const char *str)
{
	while(*str != 0x00)
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	88 81       	ld	r24, Y
    2184:	81 11       	cpse	r24, r1
    2186:	e7 cf       	rjmp	.-50     	; 0x2156 <_ZN3LCD5printEPKc+0x28>
		printf("PrintVal: %d\n",str);
		write(*(str++));

	}

    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	08 95       	ret

0000219a <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol>:
	// Initialise pin mapping
	_data_pins[0] = ( 1 << d4 );
	_data_pins[1] = ( 1 << d5 );
	_data_pins[2] = ( 1 << d6 );
	_data_pins[3] = ( 1 << d7 );
}
    219a:	21 e0       	ldi	r18, 0x01	; 1
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol+0x6>
    219e:	22 0f       	add	r18, r18
    21a0:	6a 95       	dec	r22
    21a2:	ea f7       	brpl	.-6      	; 0x219e <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol+0x4>
    21a4:	dc 01       	movw	r26, r24
    21a6:	19 96       	adiw	r26, 0x09	; 9
    21a8:	2c 93       	st	X, r18
    21aa:	19 97       	sbiw	r26, 0x09	; 9
    21ac:	17 96       	adiw	r26, 0x07	; 7
    21ae:	4c 93       	st	X, r20
    21b0:	17 97       	sbiw	r26, 0x07	; 7
    21b2:	ed 91       	ld	r30, X+
    21b4:	fc 91       	ld	r31, X
    21b6:	04 80       	ldd	r0, Z+4	; 0x04
    21b8:	f5 81       	ldd	r31, Z+5	; 0x05
    21ba:	e0 2d       	mov	r30, r0
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	09 95       	icall
    21c0:	08 95       	ret

000021c2 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    21c2:	fc 01       	movw	r30, r24
    21c4:	81 85       	ldd	r24, Z+9	; 0x09
    21c6:	88 23       	and	r24, r24
    21c8:	89 f0       	breq	.+34     	; 0x21ec <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    21ca:	97 81       	ldd	r25, Z+7	; 0x07
    21cc:	91 11       	cpse	r25, r1
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    21d0:	61 11       	cpse	r22, r1
    21d2:	05 c0       	rjmp	.+10     	; 0x21de <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    21d4:	06 c0       	rjmp	.+12     	; 0x21e2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    21d6:	91 30       	cpi	r25, 0x01	; 1
    21d8:	21 f4       	brne	.+8      	; 0x21e2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    21da:	61 11       	cpse	r22, r1
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    21de:	82 87       	std	Z+10, r24	; 0x0a
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    21e2:	12 86       	std	Z+10, r1	; 0x0a
    21e4:	62 85       	ldd	r22, Z+10	; 0x0a
    21e6:	cf 01       	movw	r24, r30
    21e8:	0b 96       	adiw	r24, 0x0b	; 11
    21ea:	8f ce       	rjmp	.-738    	; 0x1f0a <_ZN5I2CIO5writeEh>
    21ec:	08 95       	ret

000021ee <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    21ee:	6f 92       	push	r6
    21f0:	7f 92       	push	r7
    21f2:	8f 92       	push	r8
    21f4:	af 92       	push	r10
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	3c 01       	movw	r6, r24
    220c:	d6 2e       	mov	r13, r22
    220e:	f4 2e       	mov	r15, r20
    2210:	12 2f       	mov	r17, r18
    2212:	95 de       	rcall	.-726    	; 0x1f3e <_ZN3LCDC1Ev>
    2214:	86 e8       	ldi	r24, 0x86	; 134
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	f3 01       	movw	r30, r6
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	c3 01       	movw	r24, r6
    2220:	0b 96       	adiw	r24, 0x0b	; 11
    2222:	51 de       	rcall	.-862    	; 0x1ec6 <_ZN5I2CIOC1Ev>
    2224:	f3 01       	movw	r30, r6
    2226:	d0 86       	std	Z+8, r13	; 0x08
    2228:	11 86       	std	Z+9, r1	; 0x09
    222a:	12 86       	std	Z+10, r1	; 0x0a
    222c:	17 82       	std	Z+7, r1	; 0x07
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	98 2f       	mov	r25, r24
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <__stack+0x37>
    2234:	99 0f       	add	r25, r25
    2236:	fa 94       	dec	r15
    2238:	ea f7       	brpl	.-6      	; 0x2234 <__stack+0x35>
    223a:	97 87       	std	Z+15, r25	; 0x0f
    223c:	98 2f       	mov	r25, r24
    223e:	01 c0       	rjmp	.+2      	; 0x2242 <__stack+0x43>
    2240:	99 0f       	add	r25, r25
    2242:	1a 95       	dec	r17
    2244:	ea f7       	brpl	.-6      	; 0x2240 <__stack+0x41>
    2246:	90 8b       	std	Z+16, r25	; 0x10
    2248:	98 2f       	mov	r25, r24
    224a:	01 c0       	rjmp	.+2      	; 0x224e <__stack+0x4f>
    224c:	99 0f       	add	r25, r25
    224e:	0a 95       	dec	r16
    2250:	ea f7       	brpl	.-6      	; 0x224c <__stack+0x4d>
    2252:	91 8b       	std	Z+17, r25	; 0x11
    2254:	98 2f       	mov	r25, r24
    2256:	01 c0       	rjmp	.+2      	; 0x225a <__stack+0x5b>
    2258:	99 0f       	add	r25, r25
    225a:	ea 94       	dec	r14
    225c:	ea f7       	brpl	.-6      	; 0x2258 <__stack+0x59>
    225e:	92 8b       	std	Z+18, r25	; 0x12
    2260:	98 2f       	mov	r25, r24
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <__stack+0x67>
    2264:	99 0f       	add	r25, r25
    2266:	ca 94       	dec	r12
    2268:	ea f7       	brpl	.-6      	; 0x2264 <__stack+0x65>
    226a:	93 8b       	std	Z+19, r25	; 0x13
    226c:	98 2f       	mov	r25, r24
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <__stack+0x73>
    2270:	99 0f       	add	r25, r25
    2272:	aa 94       	dec	r10
    2274:	ea f7       	brpl	.-6      	; 0x2270 <__stack+0x71>
    2276:	94 8b       	std	Z+20, r25	; 0x14
    2278:	01 c0       	rjmp	.+2      	; 0x227c <__stack+0x7d>
    227a:	88 0f       	add	r24, r24
    227c:	8a 94       	dec	r8
    227e:	ea f7       	brpl	.-6      	; 0x227a <__stack+0x7b>
    2280:	85 8b       	std	Z+21, r24	; 0x15
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	af 90       	pop	r10
    2294:	8f 90       	pop	r8
    2296:	7f 90       	pop	r7
    2298:	6f 90       	pop	r6
    229a:	08 95       	ret

0000229c <_ZN17LiquidCrystal_I2C4initEv>:
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	ec 01       	movw	r28, r24
    22a6:	8c 01       	movw	r16, r24
    22a8:	05 5f       	subi	r16, 0xF5	; 245
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	68 85       	ldd	r22, Y+8	; 0x08
    22ae:	c8 01       	movw	r24, r16
    22b0:	11 de       	rcall	.-990    	; 0x1ed4 <_ZN5I2CIO5beginEh>
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	51 f4       	brne	.+20     	; 0x22ca <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	c8 01       	movw	r24, r16
    22ba:	1e de       	rcall	.-964    	; 0x1ef8 <_ZN5I2CIO8portModeEh>
    22bc:	1a 82       	std	Y+2, r1	; 0x02
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	c8 01       	movw	r24, r16
    22c2:	23 de       	rcall	.-954    	; 0x1f0a <_ZN5I2CIO5writeEh>
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <_ZN17LiquidCrystal_I2C4initEv+0x32>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	8c 01       	movw	r16, r24
    22e4:	c6 2f       	mov	r28, r22
	_i2cio.write (data | _En);   // En HIGH
    22e6:	7c 01       	movw	r14, r24
    22e8:	8b e0       	ldi	r24, 0x0B	; 11
    22ea:	e8 0e       	add	r14, r24
    22ec:	f1 1c       	adc	r15, r1
    22ee:	f8 01       	movw	r30, r16
    22f0:	67 85       	ldd	r22, Z+15	; 0x0f
    22f2:	6c 2b       	or	r22, r28
    22f4:	c7 01       	movw	r24, r14
    22f6:	09 de       	rcall	.-1006   	; 0x1f0a <_ZN5I2CIO5writeEh>
	_i2cio.write (data & ~_En);  // En LOW
    22f8:	f8 01       	movw	r30, r16
    22fa:	67 85       	ldd	r22, Z+15	; 0x0f
    22fc:	60 95       	com	r22
    22fe:	6c 23       	and	r22, r28
    2300:	c7 01       	movw	r24, r14
    2302:	03 de       	rcall	.-1018   	; 0x1f0a <_ZN5I2CIO5writeEh>
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	08 95       	ret

00002310 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode )
{
    2310:	dc 01       	movw	r26, r24
    2312:	fc 01       	movw	r30, r24
    2314:	04 96       	adiw	r24, 0x04	; 4
	uint8_t pinMapValue = 0;
    2316:	20 e0       	ldi	r18, 0x00	; 0

	// Map the value to LCD pin mapping
	// --------------------------------
	for ( uint8_t i = 0; i < 4; i++ )
	{
		if ( ( value & 0x1 ) == 1 )
    2318:	60 ff       	sbrs	r22, 0
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x10>
		{
			pinMapValue |= _data_pins[i];
    231c:	32 89       	ldd	r19, Z+18	; 0x12
    231e:	23 2b       	or	r18, r19
		}
		value = ( value >> 1 );
    2320:	66 95       	lsr	r22
    2322:	31 96       	adiw	r30, 0x01	; 1
{
	uint8_t pinMapValue = 0;

	// Map the value to LCD pin mapping
	// --------------------------------
	for ( uint8_t i = 0; i < 4; i++ )
    2324:	e8 17       	cp	r30, r24
    2326:	f9 07       	cpc	r31, r25
    2328:	b9 f7       	brne	.-18     	; 0x2318 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x8>
		value = ( value >> 1 );
	}

	// Is it a command or data
	// -----------------------
	if ( mode == LCD_DATA )
    232a:	41 30       	cpi	r20, 0x01	; 1
    232c:	19 f4       	brne	.+6      	; 0x2334 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x24>
	{
		mode = _Rs;
    232e:	51 96       	adiw	r26, 0x11	; 17
    2330:	4c 91       	ld	r20, X
    2332:	51 97       	sbiw	r26, 0x11	; 17
    2334:	1a 96       	adiw	r26, 0x0a	; 10
    2336:	9c 91       	ld	r25, X
    2338:	1a 97       	sbiw	r26, 0x0a	; 10
    233a:	62 2f       	mov	r22, r18
    233c:	69 2b       	or	r22, r25
	}

	pinMapValue |= mode | _backlightStsMask;
	pulseEnable ( pinMapValue );
    233e:	64 2b       	or	r22, r20
    2340:	cd 01       	movw	r24, r26
    2342:	ca cf       	rjmp	.-108    	; 0x22d8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    2344:	08 95       	ret

00002346 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode)
{
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	8c 01       	movw	r16, r24
    2350:	c6 2f       	mov	r28, r22
    2352:	d4 2f       	mov	r29, r20
	// No need to use the delay routines since the time taken to write takes
	// longer that what is needed both for toggling and enable pin an to execute
	// the command.

	if ( mode == FOUR_BITS )
    2354:	42 30       	cpi	r20, 0x02	; 2
    2356:	21 f4       	brne	.+8      	; 0x2360 <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
	{
		write4bits( (value & 0x0F), COMMAND );
    2358:	6f 70       	andi	r22, 0x0F	; 15
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	d9 df       	rcall	.-78     	; 0x2310 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    235e:	0f c0       	rjmp	.+30     	; 0x237e <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
	}
	else
	{
		write4bits( (value >> 4), mode );
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	75 95       	asr	r23
    2364:	67 95       	ror	r22
    2366:	75 95       	asr	r23
    2368:	67 95       	ror	r22
    236a:	75 95       	asr	r23
    236c:	67 95       	ror	r22
    236e:	75 95       	asr	r23
    2370:	67 95       	ror	r22
    2372:	ce df       	rcall	.-100    	; 0x2310 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
		write4bits( (value & 0x0F), mode);
    2374:	6c 2f       	mov	r22, r28
    2376:	6f 70       	andi	r22, 0x0F	; 15
    2378:	4d 2f       	mov	r20, r29
    237a:	c8 01       	movw	r24, r16
    237c:	c9 df       	rcall	.-110    	; 0x2310 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
	}
}
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	08 95       	ret

00002388 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	ec 01       	movw	r28, r24
    2394:	16 2f       	mov	r17, r22
    2396:	04 2f       	mov	r16, r20
    2398:	f2 2e       	mov	r15, r18

	init();     // Initialise the I2C expander interface
    239a:	80 df       	rcall	.-256    	; 0x229c <_ZN17LiquidCrystal_I2C4initEv>
	LCD::begin ( cols, lines, dotsize );
    239c:	2f 2d       	mov	r18, r15
    239e:	40 2f       	mov	r20, r16
    23a0:	61 2f       	mov	r22, r17
    23a2:	ce 01       	movw	r24, r28
    23a4:	33 de       	rcall	.-922    	; 0x200c <_ZN3LCD5beginEhhh>
}
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	08 95       	ret

000023b2 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>:

void  Adafruit_7segment::println(unsigned char b, int base)
{
	print(b, base);
	println();
}
    23b2:	60 31       	cpi	r22, 0x10	; 16
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <_ZN20Adafruit_LEDBackpack13setBrightnessEh+0x6>
    23b6:	6f e0       	ldi	r22, 0x0F	; 15
    23b8:	60 6e       	ori	r22, 0xE0	; 224
    23ba:	fc 01       	movw	r30, r24
    23bc:	60 a3       	std	Z+32, r22	; 0x20
    23be:	bc 01       	movw	r22, r24
    23c0:	60 5e       	subi	r22, 0xE0	; 224
    23c2:	7f 4f       	sbci	r23, 0xFF	; 255
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	41 96       	adiw	r24, 0x11	; 17
    23c8:	80 cc       	rjmp	.-1792   	; 0x1cca <_ZN3I2C5writeEPhh>
    23ca:	08 95       	ret

000023cc <_ZN20Adafruit_LEDBackpack9blinkRateEh>:
    23cc:	64 30       	cpi	r22, 0x04	; 4
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <_ZN20Adafruit_LEDBackpack9blinkRateEh+0x6>
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	66 0f       	add	r22, r22
    23d4:	61 68       	ori	r22, 0x81	; 129
    23d6:	fc 01       	movw	r30, r24
    23d8:	60 a3       	std	Z+32, r22	; 0x20
    23da:	bc 01       	movw	r22, r24
    23dc:	60 5e       	subi	r22, 0xE0	; 224
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	41 96       	adiw	r24, 0x11	; 17
    23e4:	72 cc       	rjmp	.-1820   	; 0x1cca <_ZN3I2C5writeEPhh>
    23e6:	08 95       	ret

000023e8 <_ZN20Adafruit_LEDBackpack5beginEh>:
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	ec 01       	movw	r28, r24
    23ee:	68 8b       	std	Y+16, r22	; 0x10
    23f0:	81 e2       	ldi	r24, 0x21	; 33
    23f2:	88 a3       	std	Y+32, r24	; 0x20
    23f4:	be 01       	movw	r22, r28
    23f6:	60 5e       	subi	r22, 0xE0	; 224
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	ce 01       	movw	r24, r28
    23fe:	41 96       	adiw	r24, 0x11	; 17
    2400:	64 dc       	rcall	.-1848   	; 0x1cca <_ZN3I2C5writeEPhh>
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	ce 01       	movw	r24, r28
    2406:	e2 df       	rcall	.-60     	; 0x23cc <_ZN20Adafruit_LEDBackpack9blinkRateEh>
    2408:	62 e0       	ldi	r22, 0x02	; 2
    240a:	ce 01       	movw	r24, r28
    240c:	d2 df       	rcall	.-92     	; 0x23b2 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <_ZN20Adafruit_LEDBackpack12writeDisplayEv>:
    2414:	dc 01       	movw	r26, r24
    2416:	90 96       	adiw	r26, 0x20	; 32
    2418:	1c 92       	st	X, r1
    241a:	90 97       	sbiw	r26, 0x20	; 32
    241c:	fc 01       	movw	r30, r24
    241e:	ac 01       	movw	r20, r24
    2420:	40 5f       	subi	r20, 0xF0	; 240
    2422:	5f 4f       	sbci	r21, 0xFF	; 255
    2424:	20 81       	ld	r18, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	32 96       	adiw	r30, 0x02	; 2
    242a:	27 8f       	std	Z+31, r18	; 0x1f
    242c:	90 a3       	std	Z+32, r25	; 0x20
    242e:	e4 17       	cp	r30, r20
    2430:	f5 07       	cpc	r31, r21
    2432:	c1 f7       	brne	.-16     	; 0x2424 <_ZN20Adafruit_LEDBackpack12writeDisplayEv+0x10>
    2434:	bd 01       	movw	r22, r26
    2436:	60 5e       	subi	r22, 0xE0	; 224
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	41 e1       	ldi	r20, 0x11	; 17
    243c:	cd 01       	movw	r24, r26
    243e:	41 96       	adiw	r24, 0x11	; 17
    2440:	44 cc       	rjmp	.-1912   	; 0x1cca <_ZN3I2C5writeEPhh>
    2442:	08 95       	ret

00002444 <_ZN17Adafruit_7segmentC1Eh>:
    2444:	fc 01       	movw	r30, r24
    2446:	e0 5c       	subi	r30, 0xC0	; 192
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	10 82       	st	Z, r1
    244c:	41 96       	adiw	r24, 0x11	; 17
    244e:	b9 cb       	rjmp	.-2190   	; 0x1bc2 <_ZN3I2C11set_addressEh>
    2450:	08 95       	ret

00002452 <_ZN17Adafruit_7segment13writeDigitNumEhhb>:
    2452:	65 30       	cpi	r22, 0x05	; 5
    2454:	98 f4       	brcc	.+38     	; 0x247c <_ZN17Adafruit_7segment13writeDigitNumEhhb+0x2a>
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	66 0f       	add	r22, r22
    245a:	77 1f       	adc	r23, r23
    245c:	fc 01       	movw	r30, r24
    245e:	e6 0f       	add	r30, r22
    2460:	f7 1f       	adc	r31, r23
    2462:	a4 2f       	mov	r26, r20
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	a0 57       	subi	r26, 0x70	; 112
    2468:	bd 4f       	sbci	r27, 0xFD	; 253
    246a:	80 e8       	ldi	r24, 0x80	; 128
    246c:	28 9f       	mul	r18, r24
    246e:	90 01       	movw	r18, r0
    2470:	11 24       	eor	r1, r1
    2472:	8c 91       	ld	r24, X
    2474:	28 2b       	or	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	31 83       	std	Z+1, r19	; 0x01
    247a:	20 83       	st	Z, r18
    247c:	08 95       	ret

0000247e <_ZN17Adafruit_7segment5writeEh>:
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	ec 01       	movw	r28, r24
    2484:	6a 30       	cpi	r22, 0x0A	; 10
    2486:	31 f4       	brne	.+12     	; 0x2494 <_ZN17Adafruit_7segment5writeEh+0x16>
    2488:	fc 01       	movw	r30, r24
    248a:	e0 5c       	subi	r30, 0xC0	; 192
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	10 82       	st	Z, r1
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	16 c0       	rjmp	.+44     	; 0x24c0 <_ZN17Adafruit_7segment5writeEh+0x42>
    2494:	6d 30       	cpi	r22, 0x0D	; 13
    2496:	39 f4       	brne	.+14     	; 0x24a6 <_ZN17Adafruit_7segment5writeEh+0x28>
    2498:	fc 01       	movw	r30, r24
    249a:	e0 5c       	subi	r30, 0xC0	; 192
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	10 82       	st	Z, r1
    24a0:	21 e0       	ldi	r18, 0x01	; 1
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	15 c0       	rjmp	.+42     	; 0x24d0 <_ZN17Adafruit_7segment5writeEh+0x52>
    24a6:	40 ed       	ldi	r20, 0xD0	; 208
    24a8:	46 0f       	add	r20, r22
    24aa:	4a 30       	cpi	r20, 0x0A	; 10
    24ac:	40 f4       	brcc	.+16     	; 0x24be <_ZN17Adafruit_7segment5writeEh+0x40>
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	fc 01       	movw	r30, r24
    24b2:	e0 5c       	subi	r30, 0xC0	; 192
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	cc df       	rcall	.-104    	; 0x2452 <_ZN17Adafruit_7segment13writeDigitNumEhhb>
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <_ZN17Adafruit_7segment5writeEh+0x42>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	fe 01       	movw	r30, r28
    24c2:	e0 5c       	subi	r30, 0xC0	; 192
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	90 81       	ld	r25, Z
    24c8:	21 e0       	ldi	r18, 0x01	; 1
    24ca:	29 0f       	add	r18, r25
    24cc:	22 30       	cpi	r18, 0x02	; 2
    24ce:	21 f0       	breq	.+8      	; 0x24d8 <_ZN17Adafruit_7segment5writeEh+0x5a>
    24d0:	c0 5c       	subi	r28, 0xC0	; 192
    24d2:	df 4f       	sbci	r29, 0xFF	; 255
    24d4:	28 83       	st	Y, r18
    24d6:	04 c0       	rjmp	.+8      	; 0x24e0 <_ZN17Adafruit_7segment5writeEh+0x62>
    24d8:	c0 5c       	subi	r28, 0xC0	; 192
    24da:	df 4f       	sbci	r29, 0xFF	; 255
    24dc:	9e 5f       	subi	r25, 0xFE	; 254
    24de:	98 83       	st	Y, r25
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	08 95       	ret

000024e8 <_ZN17Adafruit_7segment10printErrorEv>:
    24e8:	fc 01       	movw	r30, r24
    24ea:	80 e4       	ldi	r24, 0x40	; 64
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	80 83       	st	Z, r24
    24f2:	93 83       	std	Z+3, r25	; 0x03
    24f4:	82 83       	std	Z+2, r24	; 0x02
    24f6:	15 82       	std	Z+5, r1	; 0x05
    24f8:	14 82       	std	Z+4, r1	; 0x04
    24fa:	97 83       	std	Z+7, r25	; 0x07
    24fc:	86 83       	std	Z+6, r24	; 0x06
    24fe:	91 87       	std	Z+9, r25	; 0x09
    2500:	80 87       	std	Z+8, r24	; 0x08
    2502:	08 95       	ret

00002504 <_ZN17Adafruit_7segment10printFloatEdhh>:
    2504:	2f 92       	push	r2
    2506:	3f 92       	push	r3
    2508:	4f 92       	push	r4
    250a:	5f 92       	push	r5
    250c:	6f 92       	push	r6
    250e:	7f 92       	push	r7
    2510:	8f 92       	push	r8
    2512:	9f 92       	push	r9
    2514:	af 92       	push	r10
    2516:	bf 92       	push	r11
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	2b 97       	sbiw	r28, 0x0b	; 11
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	1c 01       	movw	r2, r24
    253a:	4d 83       	std	Y+5, r20	; 0x05
    253c:	5e 83       	std	Y+6, r21	; 0x06
    253e:	6f 83       	std	Y+7, r22	; 0x07
    2540:	78 87       	std	Y+8, r23	; 0x08
    2542:	2b 87       	std	Y+11, r18	; 0x0b
    2544:	09 87       	std	Y+9, r16	; 0x09
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	a9 01       	movw	r20, r18
    254c:	6d 81       	ldd	r22, Y+5	; 0x05
    254e:	7e 81       	ldd	r23, Y+6	; 0x06
    2550:	8f 81       	ldd	r24, Y+7	; 0x07
    2552:	98 85       	ldd	r25, Y+8	; 0x08
    2554:	c5 d6       	rcall	.+3466   	; 0x32e0 <__cmpsf2>
    2556:	88 23       	and	r24, r24
    2558:	0c f0       	brlt	.+2      	; 0x255c <_ZN17Adafruit_7segment10printFloatEdhh+0x58>
    255a:	2f c1       	rjmp	.+606    	; 0x27ba <_ZN17Adafruit_7segment10printFloatEdhh+0x2b6>
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	af 81       	ldd	r26, Y+7	; 0x07
    2562:	b8 85       	ldd	r27, Y+8	; 0x08
    2564:	b0 58       	subi	r27, 0x80	; 128
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	af 83       	std	Y+7, r26	; 0x07
    256c:	b8 87       	std	Y+8, r27	; 0x08
    256e:	91 e0       	ldi	r25, 0x01	; 1
    2570:	9a 87       	std	Y+10, r25	; 0x0a
    2572:	a3 e0       	ldi	r26, 0x03	; 3
    2574:	a9 83       	std	Y+1, r26	; 0x01
    2576:	24 c1       	rjmp	.+584    	; 0x27c0 <_ZN17Adafruit_7segment10printFloatEdhh+0x2bc>
    2578:	c3 01       	movw	r24, r6
    257a:	b2 01       	movw	r22, r4
    257c:	50 d7       	rcall	.+3744   	; 0x341e <__floatsisf>
    257e:	9b 01       	movw	r18, r22
    2580:	ac 01       	movw	r20, r24
    2582:	c7 01       	movw	r24, r14
    2584:	b6 01       	movw	r22, r12
    2586:	fb d7       	rcall	.+4086   	; 0x357e <__mulsf3>
    2588:	6b 01       	movw	r12, r22
    258a:	7c 01       	movw	r14, r24
    258c:	0f 5f       	subi	r16, 0xFF	; 255
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	0a 15       	cp	r16, r10
    2592:	1b 05       	cpc	r17, r11
    2594:	89 f7       	brne	.-30     	; 0x2578 <_ZN17Adafruit_7segment10printFloatEdhh+0x74>
    2596:	2d 81       	ldd	r18, Y+5	; 0x05
    2598:	3e 81       	ldd	r19, Y+6	; 0x06
    259a:	4f 81       	ldd	r20, Y+7	; 0x07
    259c:	58 85       	ldd	r21, Y+8	; 0x08
    259e:	c7 01       	movw	r24, r14
    25a0:	b6 01       	movw	r22, r12
    25a2:	ed d7       	rcall	.+4058   	; 0x357e <__mulsf3>
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	35 d6       	rcall	.+3178   	; 0x3218 <__addsf3>
    25ae:	09 d7       	rcall	.+3602   	; 0x33c2 <__fixunssfsi>
    25b0:	2b 01       	movw	r4, r22
    25b2:	3c 01       	movw	r6, r24
    25b4:	99 81       	ldd	r25, Y+1	; 0x01
    25b6:	e9 2f       	mov	r30, r25
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	1e 16       	cp	r1, r30
    25bc:	1f 06       	cpc	r1, r31
    25be:	a4 f0       	brlt	.+40     	; 0x25e8 <_ZN17Adafruit_7segment10printFloatEdhh+0xe4>
    25c0:	81 2c       	mov	r8, r1
    25c2:	91 2c       	mov	r9, r1
    25c4:	54 01       	movw	r10, r8
    25c6:	83 94       	inc	r8
    25c8:	48 14       	cp	r4, r8
    25ca:	59 04       	cpc	r5, r9
    25cc:	6a 04       	cpc	r6, r10
    25ce:	7b 04       	cpc	r7, r11
    25d0:	08 f4       	brcc	.+2      	; 0x25d4 <_ZN17Adafruit_7segment10printFloatEdhh+0xd0>
    25d2:	4a c0       	rjmp	.+148    	; 0x2668 <_ZN17Adafruit_7segment10printFloatEdhh+0x164>
    25d4:	99 85       	ldd	r25, Y+9	; 0x09
    25d6:	89 2f       	mov	r24, r25
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	ab 83       	std	Y+3, r26	; 0x03
    25e4:	bc 83       	std	Y+4, r27	; 0x04
    25e6:	1f c0       	rjmp	.+62     	; 0x2626 <_ZN17Adafruit_7segment10printFloatEdhh+0x122>
    25e8:	00 e0       	ldi	r16, 0x00	; 0
    25ea:	10 e0       	ldi	r17, 0x00	; 0
    25ec:	81 2c       	mov	r8, r1
    25ee:	91 2c       	mov	r9, r1
    25f0:	54 01       	movw	r10, r8
    25f2:	83 94       	inc	r8
    25f4:	99 85       	ldd	r25, Y+9	; 0x09
    25f6:	89 2f       	mov	r24, r25
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e0       	ldi	r26, 0x00	; 0
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	ab 83       	std	Y+3, r26	; 0x03
    2604:	bc 83       	std	Y+4, r27	; 0x04
    2606:	a5 01       	movw	r20, r10
    2608:	94 01       	movw	r18, r8
    260a:	69 81       	ldd	r22, Y+1	; 0x01
    260c:	7a 81       	ldd	r23, Y+2	; 0x02
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	0e 94 22 1b 	call	0x3644	; 0x3644 <__mulsi3>
    2616:	4b 01       	movw	r8, r22
    2618:	5c 01       	movw	r10, r24
    261a:	0f 5f       	subi	r16, 0xFF	; 255
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	0e 17       	cp	r16, r30
    2620:	1f 07       	cpc	r17, r31
    2622:	8c f3       	brlt	.-30     	; 0x2606 <_ZN17Adafruit_7segment10printFloatEdhh+0x102>
    2624:	d1 cf       	rjmp	.-94     	; 0x25c8 <_ZN17Adafruit_7segment10printFloatEdhh+0xc4>
    2626:	8b 85       	ldd	r24, Y+11	; 0x0b
    2628:	81 50       	subi	r24, 0x01	; 1
    262a:	8b 87       	std	Y+11, r24	; 0x0b
    262c:	69 81       	ldd	r22, Y+1	; 0x01
    262e:	7a 81       	ldd	r23, Y+2	; 0x02
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	f4 d6       	rcall	.+3560   	; 0x341e <__floatsisf>
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	c7 01       	movw	r24, r14
    263c:	b6 01       	movw	r22, r12
    263e:	54 d6       	rcall	.+3240   	; 0x32e8 <__divsf3>
    2640:	6b 01       	movw	r12, r22
    2642:	7c 01       	movw	r14, r24
    2644:	2d 81       	ldd	r18, Y+5	; 0x05
    2646:	3e 81       	ldd	r19, Y+6	; 0x06
    2648:	4f 81       	ldd	r20, Y+7	; 0x07
    264a:	58 85       	ldd	r21, Y+8	; 0x08
    264c:	98 d7       	rcall	.+3888   	; 0x357e <__mulsf3>
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	e0 d5       	rcall	.+3008   	; 0x3218 <__addsf3>
    2658:	b4 d6       	rcall	.+3432   	; 0x33c2 <__fixunssfsi>
    265a:	2b 01       	movw	r4, r22
    265c:	3c 01       	movw	r6, r24
    265e:	68 15       	cp	r22, r8
    2660:	79 05       	cpc	r23, r9
    2662:	8a 05       	cpc	r24, r10
    2664:	9b 05       	cpc	r25, r11
    2666:	f8 f6       	brcc	.-66     	; 0x2626 <_ZN17Adafruit_7segment10printFloatEdhh+0x122>
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	5f e3       	ldi	r21, 0x3F	; 63
    2670:	c7 01       	movw	r24, r14
    2672:	b6 01       	movw	r22, r12
    2674:	35 d6       	rcall	.+3178   	; 0x32e0 <__cmpsf2>
    2676:	88 23       	and	r24, r24
    2678:	1c f4       	brge	.+6      	; 0x2680 <_ZN17Adafruit_7segment10printFloatEdhh+0x17c>
    267a:	c1 01       	movw	r24, r2
    267c:	35 df       	rcall	.-406    	; 0x24e8 <_ZN17Adafruit_7segment10printErrorEv>
    267e:	b6 c0       	rjmp	.+364    	; 0x27ec <_ZN17Adafruit_7segment10printFloatEdhh+0x2e8>
    2680:	41 14       	cp	r4, r1
    2682:	51 04       	cpc	r5, r1
    2684:	61 04       	cpc	r6, r1
    2686:	71 04       	cpc	r7, r1
    2688:	29 f4       	brne	.+10     	; 0x2694 <_ZN17Adafruit_7segment10printFloatEdhh+0x190>
    268a:	46 c0       	rjmp	.+140    	; 0x2718 <_ZN17Adafruit_7segment10printFloatEdhh+0x214>
    268c:	ab 85       	ldd	r26, Y+11	; 0x0b
    268e:	a1 17       	cp	r26, r17
    2690:	60 f4       	brcc	.+24     	; 0x26aa <_ZN17Adafruit_7segment10printFloatEdhh+0x1a6>
    2692:	4d c0       	rjmp	.+154    	; 0x272e <_ZN17Adafruit_7segment10printFloatEdhh+0x22a>
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	84 e0       	ldi	r24, 0x04	; 4
    2698:	99 24       	eor	r9, r9
    269a:	93 94       	inc	r9
    269c:	a1 2c       	mov	r10, r1
    269e:	99 85       	ldd	r25, Y+9	; 0x09
    26a0:	c9 2e       	mov	r12, r25
    26a2:	d1 2c       	mov	r13, r1
    26a4:	e1 2c       	mov	r14, r1
    26a6:	f1 2c       	mov	r15, r1
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	bb 85       	ldd	r27, Y+11	; 0x0b
    26ac:	bb 23       	and	r27, r27
    26ae:	29 f0       	breq	.+10     	; 0x26ba <_ZN17Adafruit_7segment10printFloatEdhh+0x1b6>
    26b0:	09 2d       	mov	r16, r9
    26b2:	b1 17       	cp	r27, r17
    26b4:	19 f0       	breq	.+6      	; 0x26bc <_ZN17Adafruit_7segment10printFloatEdhh+0x1b8>
    26b6:	0a 2d       	mov	r16, r10
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <_ZN17Adafruit_7segment10printFloatEdhh+0x1b8>
    26ba:	0a 2d       	mov	r16, r10
    26bc:	b9 80       	ldd	r11, Y+1	; 0x01
    26be:	8b 2d       	mov	r24, r11
    26c0:	81 50       	subi	r24, 0x01	; 1
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	88 2e       	mov	r8, r24
    26c6:	c3 01       	movw	r24, r6
    26c8:	b2 01       	movw	r22, r4
    26ca:	a7 01       	movw	r20, r14
    26cc:	96 01       	movw	r18, r12
    26ce:	c9 d7       	rcall	.+3986   	; 0x3662 <__udivmodsi4>
    26d0:	46 2f       	mov	r20, r22
    26d2:	20 2f       	mov	r18, r16
    26d4:	6b 2d       	mov	r22, r11
    26d6:	c1 01       	movw	r24, r2
    26d8:	bc de       	rcall	.-648    	; 0x2452 <_ZN17Adafruit_7segment13writeDigitNumEhhb>
    26da:	99 81       	ldd	r25, Y+1	; 0x01
    26dc:	92 30       	cpi	r25, 0x02	; 2
    26de:	71 f4       	brne	.+28     	; 0x26fc <_ZN17Adafruit_7segment10printFloatEdhh+0x1f8>
    26e0:	ba 94       	dec	r11
    26e2:	ba 94       	dec	r11
    26e4:	b9 82       	std	Y+1, r11	; 0x01
    26e6:	a4 e0       	ldi	r26, 0x04	; 4
    26e8:	a8 15       	cp	r26, r8
    26ea:	40 f0       	brcs	.+16     	; 0x26fc <_ZN17Adafruit_7segment10printFloatEdhh+0x1f8>
    26ec:	e8 2d       	mov	r30, r8
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	ee 0f       	add	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	e2 0d       	add	r30, r2
    26f6:	f3 1d       	adc	r31, r3
    26f8:	11 82       	std	Z+1, r1	; 0x01
    26fa:	10 82       	st	Z, r1
    26fc:	c3 01       	movw	r24, r6
    26fe:	b2 01       	movw	r22, r4
    2700:	a7 01       	movw	r20, r14
    2702:	96 01       	movw	r18, r12
    2704:	ae d7       	rcall	.+3932   	; 0x3662 <__udivmodsi4>
    2706:	29 01       	movw	r4, r18
    2708:	3a 01       	movw	r6, r20
    270a:	1f 5f       	subi	r17, 0xFF	; 255
    270c:	23 2b       	or	r18, r19
    270e:	24 2b       	or	r18, r20
    2710:	25 2b       	or	r18, r21
    2712:	09 f4       	brne	.+2      	; 0x2716 <_ZN17Adafruit_7segment10printFloatEdhh+0x212>
    2714:	bb cf       	rjmp	.-138    	; 0x268c <_ZN17Adafruit_7segment10printFloatEdhh+0x188>
    2716:	c9 cf       	rjmp	.-110    	; 0x26aa <_ZN17Adafruit_7segment10printFloatEdhh+0x1a6>
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	64 e0       	ldi	r22, 0x04	; 4
    271e:	c1 01       	movw	r24, r2
    2720:	98 de       	rcall	.-720    	; 0x2452 <_ZN17Adafruit_7segment13writeDigitNumEhhb>
    2722:	ba 85       	ldd	r27, Y+10	; 0x0a
    2724:	b1 11       	cpse	r27, r1
    2726:	0e c0       	rjmp	.+28     	; 0x2744 <_ZN17Adafruit_7segment10printFloatEdhh+0x240>
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	1b c0       	rjmp	.+54     	; 0x2764 <_ZN17Adafruit_7segment10printFloatEdhh+0x260>
    272e:	b9 81       	ldd	r27, Y+1	; 0x01
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	99 23       	and	r25, r25
    2734:	99 f0       	breq	.+38     	; 0x275c <_ZN17Adafruit_7segment10printFloatEdhh+0x258>
    2736:	eb 2f       	mov	r30, r27
    2738:	ab 2f       	mov	r26, r27
    273a:	a1 50       	subi	r26, 0x01	; 1
    273c:	a9 83       	std	Y+1, r26	; 0x01
    273e:	b5 30       	cpi	r27, 0x05	; 5
    2740:	68 f4       	brcc	.+26     	; 0x275c <_ZN17Adafruit_7segment10printFloatEdhh+0x258>
    2742:	03 c0       	rjmp	.+6      	; 0x274a <_ZN17Adafruit_7segment10printFloatEdhh+0x246>
    2744:	b2 e0       	ldi	r27, 0x02	; 2
    2746:	b9 83       	std	Y+1, r27	; 0x01
    2748:	e3 e0       	ldi	r30, 0x03	; 3
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	e2 0d       	add	r30, r2
    2752:	f3 1d       	adc	r31, r3
    2754:	80 e4       	ldi	r24, 0x40	; 64
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	88 23       	and	r24, r24
    2760:	0c f4       	brge	.+2      	; 0x2764 <_ZN17Adafruit_7segment10printFloatEdhh+0x260>
    2762:	44 c0       	rjmp	.+136    	; 0x27ec <_ZN17Adafruit_7segment10printFloatEdhh+0x2e8>
    2764:	06 c0       	rjmp	.+12     	; 0x2772 <_ZN17Adafruit_7segment10printFloatEdhh+0x26e>
    2766:	a9 81       	ldd	r26, Y+1	; 0x01
    2768:	a1 50       	subi	r26, 0x01	; 1
    276a:	a9 83       	std	Y+1, r26	; 0x01
    276c:	aa 23       	and	r26, r26
    276e:	0c f4       	brge	.+2      	; 0x2772 <_ZN17Adafruit_7segment10printFloatEdhh+0x26e>
    2770:	3d c0       	rjmp	.+122    	; 0x27ec <_ZN17Adafruit_7segment10printFloatEdhh+0x2e8>
    2772:	b9 81       	ldd	r27, Y+1	; 0x01
    2774:	b5 30       	cpi	r27, 0x05	; 5
    2776:	b8 f7       	brcc	.-18     	; 0x2766 <_ZN17Adafruit_7segment10printFloatEdhh+0x262>
    2778:	eb 2f       	mov	r30, r27
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	e2 0d       	add	r30, r2
    2782:	f3 1d       	adc	r31, r3
    2784:	11 82       	std	Z+1, r1	; 0x01
    2786:	10 82       	st	Z, r1
    2788:	ee cf       	rjmp	.-36     	; 0x2766 <_ZN17Adafruit_7segment10printFloatEdhh+0x262>
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	6d 81       	ldd	r22, Y+5	; 0x05
    2794:	7e 81       	ldd	r23, Y+6	; 0x06
    2796:	8f 81       	ldd	r24, Y+7	; 0x07
    2798:	98 85       	ldd	r25, Y+8	; 0x08
    279a:	3e d5       	rcall	.+2684   	; 0x3218 <__addsf3>
    279c:	12 d6       	rcall	.+3108   	; 0x33c2 <__fixunssfsi>
    279e:	2b 01       	movw	r4, r22
    27a0:	3c 01       	movw	r6, r24
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	e8 2f       	mov	r30, r24
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	0f 2e       	mov	r0, r31
    27aa:	c1 2c       	mov	r12, r1
    27ac:	d1 2c       	mov	r13, r1
    27ae:	f0 e8       	ldi	r31, 0x80	; 128
    27b0:	ef 2e       	mov	r14, r31
    27b2:	ff e3       	ldi	r31, 0x3F	; 63
    27b4:	ff 2e       	mov	r15, r31
    27b6:	f0 2d       	mov	r31, r0
    27b8:	17 cf       	rjmp	.-466    	; 0x25e8 <_ZN17Adafruit_7segment10printFloatEdhh+0xe4>
    27ba:	1a 86       	std	Y+10, r1	; 0x0a
    27bc:	94 e0       	ldi	r25, 0x04	; 4
    27be:	99 83       	std	Y+1, r25	; 0x01
    27c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    27c2:	aa 2e       	mov	r10, r26
    27c4:	b1 2c       	mov	r11, r1
    27c6:	1a 14       	cp	r1, r10
    27c8:	1b 04       	cpc	r1, r11
    27ca:	fc f6       	brge	.-66     	; 0x278a <_ZN17Adafruit_7segment10printFloatEdhh+0x286>
    27cc:	00 e0       	ldi	r16, 0x00	; 0
    27ce:	10 e0       	ldi	r17, 0x00	; 0
    27d0:	0f 2e       	mov	r0, r31
    27d2:	c1 2c       	mov	r12, r1
    27d4:	d1 2c       	mov	r13, r1
    27d6:	f0 e8       	ldi	r31, 0x80	; 128
    27d8:	ef 2e       	mov	r14, r31
    27da:	ff e3       	ldi	r31, 0x3F	; 63
    27dc:	ff 2e       	mov	r15, r31
    27de:	f0 2d       	mov	r31, r0
    27e0:	b9 85       	ldd	r27, Y+9	; 0x09
    27e2:	4b 2e       	mov	r4, r27
    27e4:	51 2c       	mov	r5, r1
    27e6:	61 2c       	mov	r6, r1
    27e8:	71 2c       	mov	r7, r1
    27ea:	c6 ce       	rjmp	.-628    	; 0x2578 <_ZN17Adafruit_7segment10printFloatEdhh+0x74>
    27ec:	2b 96       	adiw	r28, 0x0b	; 11
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	ff 90       	pop	r15
    2802:	ef 90       	pop	r14
    2804:	df 90       	pop	r13
    2806:	cf 90       	pop	r12
    2808:	bf 90       	pop	r11
    280a:	af 90       	pop	r10
    280c:	9f 90       	pop	r9
    280e:	8f 90       	pop	r8
    2810:	7f 90       	pop	r7
    2812:	6f 90       	pop	r6
    2814:	5f 90       	pop	r5
    2816:	4f 90       	pop	r4
    2818:	3f 90       	pop	r3
    281a:	2f 90       	pop	r2
    281c:	08 95       	ret

0000281e <_ZN17Adafruit_7segment11printNumberElh>:
    281e:	0f 93       	push	r16
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
    2824:	ec 01       	movw	r28, r24
    2826:	02 2f       	mov	r16, r18
    2828:	cb 01       	movw	r24, r22
    282a:	ba 01       	movw	r22, r20
    282c:	f8 d5       	rcall	.+3056   	; 0x341e <__floatsisf>
    282e:	ab 01       	movw	r20, r22
    2830:	bc 01       	movw	r22, r24
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	ce 01       	movw	r24, r28
    2836:	66 de       	rcall	.-820    	; 0x2504 <_ZN17Adafruit_7segment10printFloatEdhh>
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	0f 91       	pop	r16
    283e:	08 95       	ret

00002840 <_ZN17Adafruit_7segment5printEmi>:
    2840:	21 15       	cp	r18, r1
    2842:	31 05       	cpc	r19, r1
    2844:	19 f4       	brne	.+6      	; 0x284c <_ZN17Adafruit_7segment5printEmi+0xc>
    2846:	64 2f       	mov	r22, r20
    2848:	1a ce       	rjmp	.-972    	; 0x247e <_ZN17Adafruit_7segment5writeEh>
    284a:	08 95       	ret
    284c:	e8 cf       	rjmp	.-48     	; 0x281e <_ZN17Adafruit_7segment11printNumberElh>
    284e:	08 95       	ret

00002850 <_ZN17Adafruit_7segment5printEji>:
{
	print((long) n, base);
}

void Adafruit_7segment::print(unsigned int n, int base)
{
    2850:	9a 01       	movw	r18, r20
	print((unsigned long) n, base);
    2852:	ab 01       	movw	r20, r22
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	f3 cf       	rjmp	.-26     	; 0x2840 <_ZN17Adafruit_7segment5printEmi>
    285a:	08 95       	ret

0000285c <main>:

#define F_CPU 16000000UL
#include <util/delay.h>

int main ()
{
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	ce 5f       	subi	r28, 0xFE	; 254
    2866:	d2 40       	sbci	r29, 0x02	; 2
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2872:	2f ef       	ldi	r18, 0xFF	; 255
    2874:	83 ed       	ldi	r24, 0xD3	; 211
    2876:	90 e3       	ldi	r25, 0x30	; 48
    2878:	21 50       	subi	r18, 0x01	; 1
    287a:	80 40       	sbci	r24, 0x00	; 0
    287c:	90 40       	sbci	r25, 0x00	; 0
    287e:	e1 f7       	brne	.-8      	; 0x2878 <main+0x1c>
    2880:	00 c0       	rjmp	.+0      	; 0x2882 <main+0x26>
    2882:	00 00       	nop
#include "../memory/memory.hpp"
#include "../uart/uart_module.hpp"
#include "request.hpp"
#include "../timer/Clock.hpp"

class Communications
    2884:	ce 01       	movw	r24, r28
    2886:	04 96       	adiw	r24, 0x04	; 4
    2888:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN12MessageQueueC1Ev>
    288c:	ce 01       	movw	r24, r28
    288e:	83 56       	subi	r24, 0x63	; 99
    2890:	9f 4f       	sbci	r25, 0xFF	; 255
    2892:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN18FastTransferParserC1Ev>
    2896:	ce 01       	movw	r24, r28
    2898:	80 53       	subi	r24, 0x30	; 48
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	e3 d0       	rcall	.+454    	; 0x2a64 <_ZN6ClocksC1Ev>
  _delay_ms(1000);
  ControlBoxEngine box;
  box.initialize();
    289e:	ce 01       	movw	r24, r28
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	0e 94 26 07 	call	0xe4c	; 0xe4c <_ZN16ControlBoxEngine10initializeEv>
  box.loop();
    28a6:	ce 01       	movw	r24, r28
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN16ControlBoxEngine4loopEv>
  return 0;
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	c2 50       	subi	r28, 0x02	; 2
    28b4:	dd 4f       	sbci	r29, 0xFD	; 253
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	08 95       	ret

000028c6 <_ZN6Memory10initializeEv>:
void Memory::link (uint8_t i, uint8_t j)
{
  Variable * ptr = &variables[i];
  while (ptr->next)
    ptr = ptr->next;
  ptr->next = &variables[j];
    28c6:	ea ec       	ldi	r30, 0xCA	; 202
    28c8:	f3 e0       	ldi	r31, 0x03	; 3
    28ca:	8a ec       	ldi	r24, 0xCA	; 202
    28cc:	96 e0       	ldi	r25, 0x06	; 6
    28ce:	11 82       	std	Z+1, r1	; 0x01
    28d0:	10 82       	st	Z, r1
    28d2:	13 82       	std	Z+3, r1	; 0x03
    28d4:	12 82       	std	Z+2, r1	; 0x02
    28d6:	15 82       	std	Z+5, r1	; 0x05
    28d8:	14 82       	std	Z+4, r1	; 0x04
    28da:	36 96       	adiw	r30, 0x06	; 6
    28dc:	e8 17       	cp	r30, r24
    28de:	f9 07       	cpc	r31, r25
    28e0:	b1 f7       	brne	.-20     	; 0x28ce <_ZN6Memory10initializeEv+0x8>
    28e2:	08 95       	ret

000028e4 <_ZN6Memory5writeEhj>:
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	fc 01       	movw	r30, r24
    28e8:	ee 0f       	add	r30, r30
    28ea:	ff 1f       	adc	r31, r31
    28ec:	e8 0f       	add	r30, r24
    28ee:	f9 1f       	adc	r31, r25
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	e6 53       	subi	r30, 0x36	; 54
    28f6:	fc 4f       	sbci	r31, 0xFC	; 252
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <_ZN6Memory5writeEhj+0x18>
    28fa:	fc 01       	movw	r30, r24
    28fc:	84 81       	ldd	r24, Z+4	; 0x04
    28fe:	95 81       	ldd	r25, Z+5	; 0x05
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	d9 f7       	brne	.-10     	; 0x28fa <_ZN6Memory5writeEhj+0x16>
    2904:	30 97       	sbiw	r30, 0x00	; 0
    2906:	39 f0       	breq	.+14     	; 0x2916 <_ZN6Memory5writeEhj+0x32>
    2908:	71 83       	std	Z+1, r23	; 0x01
    290a:	60 83       	st	Z, r22
    290c:	02 80       	ldd	r0, Z+2	; 0x02
    290e:	f3 81       	ldd	r31, Z+3	; 0x03
    2910:	e0 2d       	mov	r30, r0
    2912:	30 97       	sbiw	r30, 0x00	; 0
    2914:	c9 f7       	brne	.-14     	; 0x2908 <_ZN6Memory5writeEhj+0x24>
    2916:	08 95       	ret

00002918 <_ZN6Memory4readEh>:
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	fc 01       	movw	r30, r24
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	e8 0f       	add	r30, r24
    2922:	f9 1f       	adc	r31, r25
    2924:	ee 0f       	add	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	e6 53       	subi	r30, 0x36	; 54
    292a:	fc 4f       	sbci	r31, 0xFC	; 252
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	08 95       	ret

00002932 <_ZN6Memory13valid_addressEh>:
}

bool Memory::valid_address (uint8_t address)
{
  return address < Memory::SIZE;
    2932:	80 95       	com	r24
}
    2934:	88 1f       	adc	r24, r24
    2936:	88 27       	eor	r24, r24
    2938:	88 1f       	adc	r24, r24
    293a:	08 95       	ret

0000293c <_ZN11TouchScreen14assign_objectsEv>:
			printf("Fail:!!\r\n");
//      good_screen_coms = false;
		return success;
	}
	return false;
}
    293c:	fc 01       	movw	r30, r24
    293e:	36 96       	adiw	r30, 0x06	; 6
    2940:	9c 01       	movw	r18, r24
    2942:	2a 5f       	subi	r18, 0xFA	; 250
    2944:	3e 4f       	sbci	r19, 0xFE	; 254
    2946:	11 92       	st	Z+, r1
    2948:	11 92       	st	Z+, r1
    294a:	e2 17       	cp	r30, r18
    294c:	f3 07       	cpc	r31, r19
    294e:	d9 f7       	brne	.-10     	; 0x2946 <_ZN11TouchScreen14assign_objectsEv+0xa>
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f e0       	ldi	r19, 0x0F	; 15
    2954:	fc 01       	movw	r30, r24
    2956:	31 87       	std	Z+9, r19	; 0x09
    2958:	20 87       	std	Z+8, r18	; 0x08
    295a:	08 95       	ret

0000295c <_ZN11TouchScreen10initializeEP6Memoryj>:
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	ea 01       	movw	r28, r20
    2962:	fc 01       	movw	r30, r24
    2964:	11 82       	std	Z+1, r1	; 0x01
    2966:	10 82       	st	Z, r1
    2968:	73 83       	std	Z+3, r23	; 0x03
    296a:	62 83       	std	Z+2, r22	; 0x02
    296c:	55 83       	std	Z+5, r21	; 0x05
    296e:	44 83       	std	Z+4, r20	; 0x04
    2970:	e5 df       	rcall	.-54     	; 0x293c <_ZN11TouchScreen14assign_objectsEv>
    2972:	c1 30       	cpi	r28, 0x01	; 1
    2974:	d1 05       	cpc	r29, r1
    2976:	49 f0       	breq	.+18     	; 0x298a <_ZN11TouchScreen10initializeEP6Memoryj+0x2e>
    2978:	20 f0       	brcs	.+8      	; 0x2982 <_ZN11TouchScreen10initializeEP6Memoryj+0x26>
    297a:	c2 30       	cpi	r28, 0x02	; 2
    297c:	d1 05       	cpc	r29, r1
    297e:	49 f0       	breq	.+18     	; 0x2992 <_ZN11TouchScreen10initializeEP6Memoryj+0x36>
    2980:	0c c0       	rjmp	.+24     	; 0x299a <_ZN11TouchScreen10initializeEP6Memoryj+0x3e>
    2982:	87 e6       	ldi	r24, 0x67	; 103
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	81 d2       	rcall	.+1282   	; 0x2e8a <_Z16uart0_initializej>
    2988:	0b c0       	rjmp	.+22     	; 0x29a0 <_ZN11TouchScreen10initializeEP6Memoryj+0x44>
    298a:	87 e6       	ldi	r24, 0x67	; 103
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	ef d2       	rcall	.+1502   	; 0x2f6e <_Z16uart1_initializej>
    2990:	07 c0       	rjmp	.+14     	; 0x29a0 <_ZN11TouchScreen10initializeEP6Memoryj+0x44>
    2992:	87 e6       	ldi	r24, 0x67	; 103
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	90 d3       	rcall	.+1824   	; 0x30b8 <_Z16uart2_initializej>
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <_ZN11TouchScreen10initializeEP6Memoryj+0x44>
    299a:	87 e6       	ldi	r24, 0x67	; 103
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	27 d4       	rcall	.+2126   	; 0x31ee <_Z16uart3_initializej>
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	80 ea       	ldi	r24, 0xA0	; 160
    29a6:	92 e0       	ldi	r25, 0x02	; 2
    29a8:	9f 93       	push	r25
    29aa:	8f 93       	push	r24
    29ac:	0a d7       	rcall	.+3604   	; 0x37c2 <printf>
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <_ZNK11TouchScreen13update_objectEj>:
    29bc:	9b 01       	movw	r18, r22
    29be:	2d 5f       	subi	r18, 0xFD	; 253
    29c0:	3f 4f       	sbci	r19, 0xFF	; 255
    29c2:	22 0f       	add	r18, r18
    29c4:	33 1f       	adc	r19, r19
    29c6:	82 0f       	add	r24, r18
    29c8:	93 1f       	adc	r25, r19
    29ca:	fc 01       	movw	r30, r24
    29cc:	80 81       	ld	r24, Z
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	89 2b       	or	r24, r25
    29d2:	11 f0       	breq	.+4      	; 0x29d8 <_ZNK11TouchScreen13update_objectEj+0x1c>
    29d4:	cb 01       	movw	r24, r22
    29d6:	a0 cf       	rjmp	.-192    	; 0x2918 <_ZN6Memory4readEh>
    29d8:	08 95       	ret

000029da <_ZNK11TouchScreen7refreshEv>:
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	8c 01       	movw	r16, r24
    29e4:	8c ec       	ldi	r24, 0xCC	; 204
    29e6:	96 e0       	ldi	r25, 0x06	; 6
    29e8:	8a d0       	rcall	.+276    	; 0x2afe <_ZN6Clocks6isDoneEv>
    29ea:	88 23       	and	r24, r24
    29ec:	e9 f0       	breq	.+58     	; 0x2a28 <_ZNK11TouchScreen7refreshEv+0x4e>
    29ee:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_ZZNK11TouchScreen7refreshEvE5count>
    29f2:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    29f6:	8a 30       	cpi	r24, 0x0A	; 10
    29f8:	91 05       	cpc	r25, r1
    29fa:	2c f0       	brlt	.+10     	; 0x2a06 <_ZNK11TouchScreen7refreshEv+0x2c>
    29fc:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    2a00:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <_ZZNK11TouchScreen7refreshEvE5count>
    2a04:	11 c0       	rjmp	.+34     	; 0x2a28 <_ZNK11TouchScreen7refreshEv+0x4e>
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    2a0c:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <_ZZNK11TouchScreen7refreshEvE5count>
    2a10:	c0 e0       	ldi	r28, 0x00	; 0
    2a12:	d0 e0       	ldi	r29, 0x00	; 0
    2a14:	be 01       	movw	r22, r28
    2a16:	c8 01       	movw	r24, r16
    2a18:	d1 df       	rcall	.-94     	; 0x29bc <_ZNK11TouchScreen13update_objectEj>
    2a1a:	21 96       	adiw	r28, 0x01	; 1
    2a1c:	c0 38       	cpi	r28, 0x80	; 128
    2a1e:	d1 05       	cpc	r29, r1
    2a20:	c9 f7       	brne	.-14     	; 0x2a14 <_ZNK11TouchScreen7refreshEv+0x3a>
    2a22:	8c ec       	ldi	r24, 0xCC	; 204
    2a24:	96 e0       	ldi	r25, 0x06	; 6
    2a26:	0d d0       	rcall	.+26     	; 0x2a42 <_ZN6Clocks5resetEv>
    2a28:	df 91       	pop	r29
    2a2a:	cf 91       	pop	r28
    2a2c:	1f 91       	pop	r17
    2a2e:	0f 91       	pop	r16
    2a30:	08 95       	ret

00002a32 <_GLOBAL__sub_I__ZN11TouchScreen10initializeEP6Memoryj>:
	//objects[JOYSTICK_RIGHT_Y] = Gauge4;
//  objects[SLIDER_RIGHT] = Gauge5;
}

/*----------------------------- Updating Screen ------------------------------*/
Clocks screenRefreshTimer(500);
    2a32:	44 ef       	ldi	r20, 0xF4	; 244
    2a34:	51 e0       	ldi	r21, 0x01	; 1
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	8c ec       	ldi	r24, 0xCC	; 204
    2a3c:	96 e0       	ldi	r25, 0x06	; 6
    2a3e:	2c c0       	rjmp	.+88     	; 0x2a98 <_ZN6ClocksC1El>
    2a40:	08 95       	ret

00002a42 <_ZN6Clocks5resetEv>:
{
	update();

	return abs(currentTime-startTime) / length;

}
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	ec 01       	movw	r28, r24
    2a48:	88 ed       	ldi	r24, 0xD8	; 216
    2a4a:	96 e0       	ldi	r25, 0x06	; 6
    2a4c:	61 d1       	rcall	.+706    	; 0x2d10 <_ZN12SimpleTimer16millisEv>
    2a4e:	6c 83       	std	Y+4, r22	; 0x04
    2a50:	7d 83       	std	Y+5, r23	; 0x05
    2a52:	8e 83       	std	Y+6, r24	; 0x06
    2a54:	9f 83       	std	Y+7, r25	; 0x07
    2a56:	68 83       	st	Y, r22
    2a58:	79 83       	std	Y+1, r23	; 0x01
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
    2a5c:	9b 83       	std	Y+3, r25	; 0x03
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	08 95       	ret

00002a64 <_ZN6ClocksC1Ev>:
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	ec 01       	movw	r28, r24
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	88 ed       	ldi	r24, 0xD8	; 216
    2a74:	96 e0       	ldi	r25, 0x06	; 6
    2a76:	62 d1       	rcall	.+708    	; 0x2d3c <_ZN12SimpleTimer112set_durationEm>
    2a78:	88 ed       	ldi	r24, 0xD8	; 216
    2a7a:	96 e0       	ldi	r25, 0x06	; 6
    2a7c:	52 d1       	rcall	.+676    	; 0x2d22 <_ZN12SimpleTimer15startEv>
    2a7e:	82 e3       	ldi	r24, 0x32	; 50
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	88 87       	std	Y+8, r24	; 0x08
    2a88:	99 87       	std	Y+9, r25	; 0x09
    2a8a:	aa 87       	std	Y+10, r26	; 0x0a
    2a8c:	bb 87       	std	Y+11, r27	; 0x0b
    2a8e:	ce 01       	movw	r24, r28
    2a90:	d8 df       	rcall	.-80     	; 0x2a42 <_ZN6Clocks5resetEv>
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	08 95       	ret

00002a98 <_ZN6ClocksC1El>:
    2a98:	cf 92       	push	r12
    2a9a:	df 92       	push	r13
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	ec 01       	movw	r28, r24
    2aa6:	6a 01       	movw	r12, r20
    2aa8:	7b 01       	movw	r14, r22
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	88 ed       	ldi	r24, 0xD8	; 216
    2ab4:	96 e0       	ldi	r25, 0x06	; 6
    2ab6:	42 d1       	rcall	.+644    	; 0x2d3c <_ZN12SimpleTimer112set_durationEm>
    2ab8:	88 ed       	ldi	r24, 0xD8	; 216
    2aba:	96 e0       	ldi	r25, 0x06	; 6
    2abc:	32 d1       	rcall	.+612    	; 0x2d22 <_ZN12SimpleTimer15startEv>
    2abe:	c8 86       	std	Y+8, r12	; 0x08
    2ac0:	d9 86       	std	Y+9, r13	; 0x09
    2ac2:	ea 86       	std	Y+10, r14	; 0x0a
    2ac4:	fb 86       	std	Y+11, r15	; 0x0b
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	bc df       	rcall	.-136    	; 0x2a42 <_ZN6Clocks5resetEv>
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	08 95       	ret

00002ad8 <_ZN6Clocks11setIntervalEl>:
    2ad8:	fc 01       	movw	r30, r24
    2ada:	40 87       	std	Z+8, r20	; 0x08
    2adc:	51 87       	std	Z+9, r21	; 0x09
    2ade:	62 87       	std	Z+10, r22	; 0x0a
    2ae0:	73 87       	std	Z+11, r23	; 0x0b
    2ae2:	08 95       	ret

00002ae4 <_ZN6Clocks6updateEv>:
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	ec 01       	movw	r28, r24
    2aea:	88 ed       	ldi	r24, 0xD8	; 216
    2aec:	96 e0       	ldi	r25, 0x06	; 6
    2aee:	10 d1       	rcall	.+544    	; 0x2d10 <_ZN12SimpleTimer16millisEv>
    2af0:	68 83       	st	Y, r22
    2af2:	79 83       	std	Y+1, r23	; 0x01
    2af4:	8a 83       	std	Y+2, r24	; 0x02
    2af6:	9b 83       	std	Y+3, r25	; 0x03
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <_ZN6Clocks6isDoneEv>:
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	ec 01       	movw	r28, r24
    2b04:	ef df       	rcall	.-34     	; 0x2ae4 <_ZN6Clocks6updateEv>
    2b06:	28 81       	ld	r18, Y
    2b08:	39 81       	ldd	r19, Y+1	; 0x01
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0e:	28 1b       	sub	r18, r24
    2b10:	39 0b       	sbc	r19, r25
    2b12:	c9 01       	movw	r24, r18
    2b14:	99 23       	and	r25, r25
    2b16:	24 f4       	brge	.+8      	; 0x2b20 <_ZN6Clocks6isDoneEv+0x22>
    2b18:	88 27       	eor	r24, r24
    2b1a:	99 27       	eor	r25, r25
    2b1c:	82 1b       	sub	r24, r18
    2b1e:	93 0b       	sbc	r25, r19
    2b20:	09 2e       	mov	r0, r25
    2b22:	00 0c       	add	r0, r0
    2b24:	aa 0b       	sbc	r26, r26
    2b26:	bb 0b       	sbc	r27, r27
    2b28:	48 85       	ldd	r20, Y+8	; 0x08
    2b2a:	59 85       	ldd	r21, Y+9	; 0x09
    2b2c:	6a 85       	ldd	r22, Y+10	; 0x0a
    2b2e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2b30:	48 17       	cp	r20, r24
    2b32:	59 07       	cpc	r21, r25
    2b34:	6a 07       	cpc	r22, r26
    2b36:	7b 07       	cpc	r23, r27
    2b38:	24 f4       	brge	.+8      	; 0x2b42 <_ZN6Clocks6isDoneEv+0x44>
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	82 df       	rcall	.-252    	; 0x2a42 <_ZN6Clocks5resetEv>
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	01 c0       	rjmp	.+2      	; 0x2b44 <_ZN6Clocks6isDoneEv+0x46>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	08 95       	ret

00002b4a <_ZN6Clocks14isDone_NoResetEv>:
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	ec 01       	movw	r28, r24
    2b54:	c7 df       	rcall	.-114    	; 0x2ae4 <_ZN6Clocks6updateEv>
    2b56:	88 81       	ld	r24, Y
    2b58:	99 81       	ldd	r25, Y+1	; 0x01
    2b5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b5e:	82 1b       	sub	r24, r18
    2b60:	93 0b       	sbc	r25, r19
    2b62:	ac 01       	movw	r20, r24
    2b64:	22 f4       	brpl	.+8      	; 0x2b6e <_ZN6Clocks14isDone_NoResetEv+0x24>
    2b66:	44 27       	eor	r20, r20
    2b68:	55 27       	eor	r21, r21
    2b6a:	48 1b       	sub	r20, r24
    2b6c:	59 0b       	sbc	r21, r25
    2b6e:	05 2e       	mov	r0, r21
    2b70:	00 0c       	add	r0, r0
    2b72:	66 0b       	sbc	r22, r22
    2b74:	77 0b       	sbc	r23, r23
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	08 85       	ldd	r16, Y+8	; 0x08
    2b7a:	19 85       	ldd	r17, Y+9	; 0x09
    2b7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b7e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b80:	04 17       	cp	r16, r20
    2b82:	15 07       	cpc	r17, r21
    2b84:	26 07       	cpc	r18, r22
    2b86:	37 07       	cpc	r19, r23
    2b88:	0c f0       	brlt	.+2      	; 0x2b8c <_ZN6Clocks14isDone_NoResetEv+0x42>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	08 95       	ret

00002b96 <_GLOBAL__sub_I__ZN6ClocksC2Ev>:

#include "../timer/SimpleTimer1.hpp"
#include "../uart/uart_2.hpp"
#include "../uart/uart_3.hpp"

static SimpleTimer1 ClockTimer;
    2b96:	88 ed       	ldi	r24, 0xD8	; 216
    2b98:	96 e0       	ldi	r25, 0x06	; 6
    2b9a:	ce c0       	rjmp	.+412    	; 0x2d38 <_ZN12SimpleTimer1C1Ev>
    2b9c:	08 95       	ret

00002b9e <_Z5resetv>:

/*--------------------- Definitions of Helper Functions ----------------------*/

void reset ()
{
  count = 0;
    2b9e:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <_ZL5count>
    2ba2:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <_ZL5count+0x1>
    2ba6:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <_ZL5count+0x2>
    2baa:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <_ZL5count+0x3>
  timer0_disableTimerOverflowInterrupt();
    2bae:	07 d1       	rcall	.+526    	; 0x2dbe <_Z36timer0_disableTimerOverflowInterruptv>
  timer0_setClockSource(NO_CLOCK_SOURCE); // stops the timer module
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	d7 c0       	rjmp	.+430    	; 0x2d62 <_Z21timer0_setClockSource12CLOCK_SOURCE>
    2bb4:	08 95       	ret

00002bb6 <__vector_23>:
void set_max_count (uint32_t);

/*------------------------ Interrupt Service Routine -------------------------*/

ISR (TIMER0_OVF_vect)
{
    2bb6:	1f 92       	push	r1
    2bb8:	0f 92       	push	r0
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	0f 92       	push	r0
    2bbe:	11 24       	eor	r1, r1
    2bc0:	0b b6       	in	r0, 0x3b	; 59
    2bc2:	0f 92       	push	r0
    2bc4:	2f 93       	push	r18
    2bc6:	3f 93       	push	r19
    2bc8:	4f 93       	push	r20
    2bca:	5f 93       	push	r21
    2bcc:	6f 93       	push	r22
    2bce:	7f 93       	push	r23
    2bd0:	8f 93       	push	r24
    2bd2:	9f 93       	push	r25
    2bd4:	af 93       	push	r26
    2bd6:	bf 93       	push	r27
    2bd8:	ef 93       	push	r30
    2bda:	ff 93       	push	r31
  ++count;
    2bdc:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <_ZL5count>
    2be0:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <_ZL5count+0x1>
    2be4:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <_ZL5count+0x2>
    2be8:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <_ZL5count+0x3>
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	a1 1d       	adc	r26, r1
    2bf0:	b1 1d       	adc	r27, r1
    2bf2:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <_ZL5count>
    2bf6:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <_ZL5count+0x1>
    2bfa:	a0 93 df 06 	sts	0x06DF, r26	; 0x8006df <_ZL5count+0x2>
    2bfe:	b0 93 e0 06 	sts	0x06E0, r27	; 0x8006e0 <_ZL5count+0x3>
  if (count > max_count)
    2c02:	40 91 dd 06 	lds	r20, 0x06DD	; 0x8006dd <_ZL5count>
    2c06:	50 91 de 06 	lds	r21, 0x06DE	; 0x8006de <_ZL5count+0x1>
    2c0a:	60 91 df 06 	lds	r22, 0x06DF	; 0x8006df <_ZL5count+0x2>
    2c0e:	70 91 e0 06 	lds	r23, 0x06E0	; 0x8006e0 <_ZL5count+0x3>
    2c12:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ZL9max_count>
    2c16:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ZL9max_count+0x1>
    2c1a:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <_ZL9max_count+0x2>
    2c1e:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <_ZL9max_count+0x3>
    2c22:	84 17       	cp	r24, r20
    2c24:	95 07       	cpc	r25, r21
    2c26:	a6 07       	cpc	r26, r22
    2c28:	b7 07       	cpc	r27, r23
    2c2a:	08 f4       	brcc	.+2      	; 0x2c2e <__vector_23+0x78>
    reset();
    2c2c:	b8 df       	rcall	.-144    	; 0x2b9e <_Z5resetv>
}
    2c2e:	ff 91       	pop	r31
    2c30:	ef 91       	pop	r30
    2c32:	bf 91       	pop	r27
    2c34:	af 91       	pop	r26
    2c36:	9f 91       	pop	r25
    2c38:	8f 91       	pop	r24
    2c3a:	7f 91       	pop	r23
    2c3c:	6f 91       	pop	r22
    2c3e:	5f 91       	pop	r21
    2c40:	4f 91       	pop	r20
    2c42:	3f 91       	pop	r19
    2c44:	2f 91       	pop	r18
    2c46:	0f 90       	pop	r0
    2c48:	0b be       	out	0x3b, r0	; 59
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	0f 90       	pop	r0
    2c50:	1f 90       	pop	r1
    2c52:	18 95       	reti

00002c54 <__vector_20>:
	TIMSK1 &= 0b11111110; // disable timer overflow interrupt
	TCCR1B &= 0b11111000; // set clock source to no clock source
}

ISR (TIMER1_OVF_vect)
{
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	4f 93       	push	r20
    2c60:	5f 93       	push	r21
    2c62:	6f 93       	push	r22
    2c64:	7f 93       	push	r23
    2c66:	8f 93       	push	r24
    2c68:	9f 93       	push	r25
    2c6a:	af 93       	push	r26
    2c6c:	bf 93       	push	r27

	++count;
    2c6e:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <_ZL5count>
    2c72:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <_ZL5count+0x1>
    2c76:	a0 91 eb 06 	lds	r26, 0x06EB	; 0x8006eb <_ZL5count+0x2>
    2c7a:	b0 91 ec 06 	lds	r27, 0x06EC	; 0x8006ec <_ZL5count+0x3>
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	a1 1d       	adc	r26, r1
    2c82:	b1 1d       	adc	r27, r1
    2c84:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <_ZL5count>
    2c88:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <_ZL5count+0x1>
    2c8c:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <_ZL5count+0x2>
    2c90:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <_ZL5count+0x3>
	if (count > max_count)
    2c94:	40 91 e9 06 	lds	r20, 0x06E9	; 0x8006e9 <_ZL5count>
    2c98:	50 91 ea 06 	lds	r21, 0x06EA	; 0x8006ea <_ZL5count+0x1>
    2c9c:	60 91 eb 06 	lds	r22, 0x06EB	; 0x8006eb <_ZL5count+0x2>
    2ca0:	70 91 ec 06 	lds	r23, 0x06EC	; 0x8006ec <_ZL5count+0x3>
    2ca4:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <_ZL9max_count>
    2ca8:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <_ZL9max_count+0x1>
    2cac:	a0 91 e3 06 	lds	r26, 0x06E3	; 0x8006e3 <_ZL9max_count+0x2>
    2cb0:	b0 91 e4 06 	lds	r27, 0x06E4	; 0x8006e4 <_ZL9max_count+0x3>
    2cb4:	84 17       	cp	r24, r20
    2cb6:	95 07       	cpc	r25, r21
    2cb8:	a6 07       	cpc	r26, r22
    2cba:	b7 07       	cpc	r27, r23
    2cbc:	d8 f4       	brcc	.+54     	; 0x2cf4 <__vector_20+0xa0>
	{
		GlobalCount+=4;
    2cbe:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <_ZL11GlobalCount>
    2cc2:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <_ZL11GlobalCount+0x1>
    2cc6:	a0 91 e7 06 	lds	r26, 0x06E7	; 0x8006e7 <_ZL11GlobalCount+0x2>
    2cca:	b0 91 e8 06 	lds	r27, 0x06E8	; 0x8006e8 <_ZL11GlobalCount+0x3>
    2cce:	04 96       	adiw	r24, 0x04	; 4
    2cd0:	a1 1d       	adc	r26, r1
    2cd2:	b1 1d       	adc	r27, r1
    2cd4:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <_ZL11GlobalCount>
    2cd8:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <_ZL11GlobalCount+0x1>
    2cdc:	a0 93 e7 06 	sts	0x06E7, r26	; 0x8006e7 <_ZL11GlobalCount+0x2>
    2ce0:	b0 93 e8 06 	sts	0x06E8, r27	; 0x8006e8 <_ZL11GlobalCount+0x3>
		count = 0;
    2ce4:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <_ZL5count>
    2ce8:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <_ZL5count+0x1>
    2cec:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <_ZL5count+0x2>
    2cf0:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <_ZL5count+0x3>
		//reset();
	}
	TIFR1 = (0<<TOV1); //Reset timer0 overflow interrupt flag
    2cf4:	16 ba       	out	0x16, r1	; 22
}
    2cf6:	bf 91       	pop	r27
    2cf8:	af 91       	pop	r26
    2cfa:	9f 91       	pop	r25
    2cfc:	8f 91       	pop	r24
    2cfe:	7f 91       	pop	r23
    2d00:	6f 91       	pop	r22
    2d02:	5f 91       	pop	r21
    2d04:	4f 91       	pop	r20
    2d06:	0f 90       	pop	r0
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	0f 90       	pop	r0
    2d0c:	1f 90       	pop	r1
    2d0e:	18 95       	reti

00002d10 <_ZN12SimpleTimer16millisEv>:
	start();

}
uint32_t SimpleTimer1::millis()
{
	return GlobalCount;
    2d10:	60 91 e5 06 	lds	r22, 0x06E5	; 0x8006e5 <_ZL11GlobalCount>
    2d14:	70 91 e6 06 	lds	r23, 0x06E6	; 0x8006e6 <_ZL11GlobalCount+0x1>
    2d18:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <_ZL11GlobalCount+0x2>
    2d1c:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <_ZL11GlobalCount+0x3>
}
    2d20:	08 95       	ret

00002d22 <_ZN12SimpleTimer15startEv>:
void SimpleTimer1::start ()
{
	TIMSK1 |= 0b00000001; // enable timer overflow interrupt
    2d22:	ef e6       	ldi	r30, 0x6F	; 111
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	81 60       	ori	r24, 0x01	; 1
    2d2a:	80 83       	st	Z, r24
	TCCR1B |= 0b00000001; // internal clock source, no prescale
    2d2c:	e1 e8       	ldi	r30, 0x81	; 129
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	81 60       	ori	r24, 0x01	; 1
    2d34:	80 83       	st	Z, r24
    2d36:	08 95       	ret

00002d38 <_ZN12SimpleTimer1C1Ev>:
	TIFR1 = (0<<TOV1); //Reset timer0 overflow interrupt flag
}

SimpleTimer1::SimpleTimer1 ()
{
	start();
    2d38:	f4 cf       	rjmp	.-24     	; 0x2d22 <_ZN12SimpleTimer15startEv>
    2d3a:	08 95       	ret

00002d3c <_ZN12SimpleTimer112set_durationEm>:

void SimpleTimer1::set_duration (uint32_t length_ms)
{
	const uint32_t CLOCK_RATE_kHz = 16000;
	const uint32_t MAX_TCNT = 0xFFFF;
	max_count = length_ms * CLOCK_RATE_kHz / MAX_TCNT;
    2d3c:	a0 e8       	ldi	r26, 0x80	; 128
    2d3e:	be e3       	ldi	r27, 0x3E	; 62
    2d40:	9a 01       	movw	r18, r20
    2d42:	ab 01       	movw	r20, r22
    2d44:	ea d4       	rcall	.+2516   	; 0x371a <__muluhisi3>
    2d46:	2f ef       	ldi	r18, 0xFF	; 255
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	89 d4       	rcall	.+2322   	; 0x3662 <__udivmodsi4>
    2d50:	20 93 e1 06 	sts	0x06E1, r18	; 0x8006e1 <_ZL9max_count>
    2d54:	30 93 e2 06 	sts	0x06E2, r19	; 0x8006e2 <_ZL9max_count+0x1>
    2d58:	40 93 e3 06 	sts	0x06E3, r20	; 0x8006e3 <_ZL9max_count+0x2>
    2d5c:	50 93 e4 06 	sts	0x06E4, r21	; 0x8006e4 <_ZL9max_count+0x3>
    2d60:	08 95       	ret

00002d62 <_Z21timer0_setClockSource12CLOCK_SOURCE>:

void
timer0_enableTimerOverflowInterrupt ()
{
	// Write HIGH to TIMSK0 (Bit 0)
	TIMSK0 |= 0b00000001;
    2d62:	e8 2f       	mov	r30, r24
    2d64:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <_ZL2cs>
    2d68:	85 b5       	in	r24, 0x25	; 37
    2d6a:	88 7f       	andi	r24, 0xF8	; 248
    2d6c:	85 bd       	out	0x25, r24	; 37
    2d6e:	8e 2f       	mov	r24, r30
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	88 30       	cpi	r24, 0x08	; 8
    2d74:	91 05       	cpc	r25, r1
    2d76:	10 f5       	brcc	.+68     	; 0x2dbc <_Z21timer0_setClockSource12CLOCK_SOURCE+0x5a>
    2d78:	fc 01       	movw	r30, r24
    2d7a:	ed 55       	subi	r30, 0x5D	; 93
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	af c4       	rjmp	.+2398   	; 0x36de <__tablejump2__>
    2d80:	85 b5       	in	r24, 0x25	; 37
    2d82:	85 bd       	out	0x25, r24	; 37
    2d84:	08 95       	ret
    2d86:	85 b5       	in	r24, 0x25	; 37
    2d88:	81 60       	ori	r24, 0x01	; 1
    2d8a:	85 bd       	out	0x25, r24	; 37
    2d8c:	08 95       	ret
    2d8e:	85 b5       	in	r24, 0x25	; 37
    2d90:	82 60       	ori	r24, 0x02	; 2
    2d92:	85 bd       	out	0x25, r24	; 37
    2d94:	08 95       	ret
    2d96:	85 b5       	in	r24, 0x25	; 37
    2d98:	83 60       	ori	r24, 0x03	; 3
    2d9a:	85 bd       	out	0x25, r24	; 37
    2d9c:	08 95       	ret
    2d9e:	85 b5       	in	r24, 0x25	; 37
    2da0:	84 60       	ori	r24, 0x04	; 4
    2da2:	85 bd       	out	0x25, r24	; 37
    2da4:	08 95       	ret
    2da6:	85 b5       	in	r24, 0x25	; 37
    2da8:	85 60       	ori	r24, 0x05	; 5
    2daa:	85 bd       	out	0x25, r24	; 37
    2dac:	08 95       	ret
    2dae:	85 b5       	in	r24, 0x25	; 37
    2db0:	86 60       	ori	r24, 0x06	; 6
    2db2:	85 bd       	out	0x25, r24	; 37
    2db4:	08 95       	ret
    2db6:	85 b5       	in	r24, 0x25	; 37
    2db8:	87 60       	ori	r24, 0x07	; 7
    2dba:	85 bd       	out	0x25, r24	; 37
    2dbc:	08 95       	ret

00002dbe <_Z36timer0_disableTimerOverflowInterruptv>:

void
timer0_disableTimerOverflowInterrupt ()
{
	// Write LOW to TIMSK0 (Bit 0)
	TIMSK0 &= 0b11111110;
    2dbe:	ee e6       	ldi	r30, 0x6E	; 110
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	8e 7f       	andi	r24, 0xFE	; 254
    2dc6:	80 83       	st	Z, r24
    2dc8:	08 95       	ret

00002dca <__vector_25>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART0_RECEIVE_INTERRUPT)
{
    2dca:	1f 92       	push	r1
    2dcc:	0f 92       	push	r0
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	0f 92       	push	r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	0b b6       	in	r0, 0x3b	; 59
    2dd6:	0f 92       	push	r0
    2dd8:	2f 93       	push	r18
    2dda:	8f 93       	push	r24
    2ddc:	9f 93       	push	r25
    2dde:	ef 93       	push	r30
    2de0:	ff 93       	push	r31
    uint8_t new_head, data, status, error;
    status = UART0_STATUS;
    2de2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    2de6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE0) | (1 << DOR0)| (1 << UPE0));
    2dea:	8c 71       	andi	r24, 0x1C	; 28

    new_head = (receive_head + 1) & UART0_BUFFER_MASK;
    2dec:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <_ZL12receive_head>
    2df0:	ef 5f       	subi	r30, 0xFF	; 255
    2df2:	ef 71       	andi	r30, 0x1F	; 31
    if (new_head == receive_tail)
    2df4:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <_ZL12receive_tail>
    2df8:	e9 17       	cp	r30, r25
    2dfa:	39 f0       	breq	.+14     	; 0x2e0a <__vector_25+0x40>
        error = UART0_BUFFER_OVERFLOW >> 8;
    else
    {
        receive_head = new_head;
    2dfc:	e0 93 f0 06 	sts	0x06F0, r30	; 0x8006f0 <_ZL12receive_head>
        receive_buffer[new_head] = data;
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	ef 50       	subi	r30, 0x0F	; 15
    2e04:	f9 4f       	sbci	r31, 0xF9	; 249
    2e06:	20 83       	st	Z, r18
    2e08:	01 c0       	rjmp	.+2      	; 0x2e0c <__vector_25+0x42>
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE0) | (1 << DOR0)| (1 << UPE0));

    new_head = (receive_head + 1) & UART0_BUFFER_MASK;
    if (new_head == receive_tail)
        error = UART0_BUFFER_OVERFLOW >> 8;
    2e0a:	82 e0       	ldi	r24, 0x02	; 2
    else
    {
        receive_head = new_head;
        receive_buffer[new_head] = data;
    }
    last_receive_error |= error;   
    2e0c:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <_ZL18last_receive_error>
    2e10:	89 2b       	or	r24, r25
    2e12:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <_ZL18last_receive_error>
}
    2e16:	ff 91       	pop	r31
    2e18:	ef 91       	pop	r30
    2e1a:	9f 91       	pop	r25
    2e1c:	8f 91       	pop	r24
    2e1e:	2f 91       	pop	r18
    2e20:	0f 90       	pop	r0
    2e22:	0b be       	out	0x3b, r0	; 59
    2e24:	0f 90       	pop	r0
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	0f 90       	pop	r0
    2e2a:	1f 90       	pop	r1
    2e2c:	18 95       	reti

00002e2e <__vector_26>:

ISR (UART0_TRANSMIT_INTERRUPT)
{
    2e2e:	1f 92       	push	r1
    2e30:	0f 92       	push	r0
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	0f 92       	push	r0
    2e36:	11 24       	eor	r1, r1
    2e38:	0b b6       	in	r0, 0x3b	; 59
    2e3a:	0f 92       	push	r0
    2e3c:	8f 93       	push	r24
    2e3e:	9f 93       	push	r25
    2e40:	ef 93       	push	r30
    2e42:	ff 93       	push	r31
    uint8_t new_tail;
    if (transmit_head != transmit_tail)
    2e44:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <_ZL13transmit_head>
    2e48:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <_ZL13transmit_tail>
    2e4c:	98 17       	cp	r25, r24
    2e4e:	69 f0       	breq	.+26     	; 0x2e6a <__vector_26+0x3c>
    {
        new_tail = (transmit_tail + 1) & UART0_BUFFER_MASK;
    2e50:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <_ZL13transmit_tail>
    2e54:	ef 5f       	subi	r30, 0xFF	; 255
    2e56:	ef 71       	andi	r30, 0x1F	; 31
        transmit_tail = new_tail;
    2e58:	e0 93 11 07 	sts	0x0711, r30	; 0x800711 <_ZL13transmit_tail>
        UART0_DATA = transmit_buffer[new_tail]; // transmit
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	ed 5e       	subi	r30, 0xED	; 237
    2e60:	f8 4f       	sbci	r31, 0xF8	; 248
    2e62:	80 81       	ld	r24, Z
    2e64:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2e68:	05 c0       	rjmp	.+10     	; 0x2e74 <__vector_26+0x46>
    }
    else
        UART0_CONTROL_B &= ~(1 << UDRIE0); // buffer empty so end transmission
    2e6a:	e1 ec       	ldi	r30, 0xC1	; 193
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8f 7d       	andi	r24, 0xDF	; 223
    2e72:	80 83       	st	Z, r24
}
    2e74:	ff 91       	pop	r31
    2e76:	ef 91       	pop	r30
    2e78:	9f 91       	pop	r25
    2e7a:	8f 91       	pop	r24
    2e7c:	0f 90       	pop	r0
    2e7e:	0b be       	out	0x3b, r0	; 59
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	0f 90       	pop	r0
    2e86:	1f 90       	pop	r1
    2e88:	18 95       	reti

00002e8a <_Z16uart0_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart0_initialize (uint16_t baudrate)
{
    transmit_head = 0;
    2e8a:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <_ZL13transmit_head>
    transmit_tail = 0;
    2e8e:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <_ZL13transmit_tail>
    receive_head = 0;
    2e92:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <_ZL12receive_head>
    receive_tail = 0;
    2e96:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <_ZL12receive_tail>

    UBRR0H = (uint8_t)((baudrate >> 8) & 0x80) ;
    2e9a:	90 78       	andi	r25, 0x80	; 128
    2e9c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t)(baudrate & 0x00FF);
    2ea0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      
    // set enable bits
    UART0_CONTROL_B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    2ea4:	88 e9       	ldi	r24, 0x98	; 152
    2ea6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    // set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
    UART0_CONTROL_C = (1 << UCSZ01) | (1 << UCSZ00);
    2eaa:	86 e0       	ldi	r24, 0x06	; 6
    2eac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2eb0:	08 95       	ret

00002eb2 <__vector_36>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART1_RECEIVE_INTERRUPT)
{
    2eb2:	1f 92       	push	r1
    2eb4:	0f 92       	push	r0
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	0f 92       	push	r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	0b b6       	in	r0, 0x3b	; 59
    2ebe:	0f 92       	push	r0
    2ec0:	2f 93       	push	r18
    2ec2:	8f 93       	push	r24
    2ec4:	9f 93       	push	r25
    2ec6:	ef 93       	push	r30
    2ec8:	ff 93       	push	r31
	uint8_t new_head, data, status, error;
	status = UART1_STATUS;
    2eca:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UART1_DATA;
    2ece:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE1) | (1 << DOR1)| (1 << UPE1));
    2ed2:	8c 71       	andi	r24, 0x1C	; 28

	new_head = (receive_head + 1) & UART1_BUFFER_MASK;
    2ed4:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <_ZL12receive_head>
    2ed8:	ef 5f       	subi	r30, 0xFF	; 255
	if (new_head == receive_tail)
    2eda:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <_ZL12receive_tail>
    2ede:	e9 17       	cp	r30, r25
    2ee0:	39 f0       	breq	.+14     	; 0x2ef0 <__vector_36+0x3e>
		error = UART1_BUFFER_OVERFLOW >> 8;
	else
	{
		receive_head = new_head;
    2ee2:	e0 93 35 07 	sts	0x0735, r30	; 0x800735 <_ZL12receive_head>
		receive_buffer[new_head] = data;
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	ea 5c       	subi	r30, 0xCA	; 202
    2eea:	f8 4f       	sbci	r31, 0xF8	; 248
    2eec:	20 83       	st	Z, r18
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <__vector_36+0x40>
	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE1) | (1 << DOR1)| (1 << UPE1));

	new_head = (receive_head + 1) & UART1_BUFFER_MASK;
	if (new_head == receive_tail)
		error = UART1_BUFFER_OVERFLOW >> 8;
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		receive_head = new_head;
		receive_buffer[new_head] = data;
	}
	last_receive_error |= error;
    2ef2:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <_ZL18last_receive_error>
    2ef6:	89 2b       	or	r24, r25
    2ef8:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <_ZL18last_receive_error>
}
    2efc:	ff 91       	pop	r31
    2efe:	ef 91       	pop	r30
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	2f 91       	pop	r18
    2f06:	0f 90       	pop	r0
    2f08:	0b be       	out	0x3b, r0	; 59
    2f0a:	0f 90       	pop	r0
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	0f 90       	pop	r0
    2f10:	1f 90       	pop	r1
    2f12:	18 95       	reti

00002f14 <__vector_37>:

ISR (UART1_TRANSMIT_INTERRUPT)
{
    2f14:	1f 92       	push	r1
    2f16:	0f 92       	push	r0
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	0f 92       	push	r0
    2f1c:	11 24       	eor	r1, r1
    2f1e:	0b b6       	in	r0, 0x3b	; 59
    2f20:	0f 92       	push	r0
    2f22:	8f 93       	push	r24
    2f24:	9f 93       	push	r25
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31
	uint8_t new_tail;
	if (transmit_head != transmit_tail)
    2f2a:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <_ZL13transmit_head>
    2f2e:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <_ZL13transmit_tail>
    2f32:	98 17       	cp	r25, r24
    2f34:	61 f0       	breq	.+24     	; 0x2f4e <__vector_37+0x3a>
	{
		new_tail = (transmit_tail + 1) & UART1_BUFFER_MASK;
    2f36:	e0 91 36 08 	lds	r30, 0x0836	; 0x800836 <_ZL13transmit_tail>
    2f3a:	ef 5f       	subi	r30, 0xFF	; 255
		transmit_tail = new_tail;
    2f3c:	e0 93 36 08 	sts	0x0836, r30	; 0x800836 <_ZL13transmit_tail>
		UART1_DATA = transmit_buffer[new_tail]; // transmit
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	e8 5c       	subi	r30, 0xC8	; 200
    2f44:	f7 4f       	sbci	r31, 0xF7	; 247
    2f46:	80 81       	ld	r24, Z
    2f48:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    2f4c:	05 c0       	rjmp	.+10     	; 0x2f58 <__vector_37+0x44>
	}
	else
		UART1_CONTROL_B &= ~(1 << UDRIE1); // buffer empty so end transmission
    2f4e:	e9 ec       	ldi	r30, 0xC9	; 201
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	8f 7d       	andi	r24, 0xDF	; 223
    2f56:	80 83       	st	Z, r24
}
    2f58:	ff 91       	pop	r31
    2f5a:	ef 91       	pop	r30
    2f5c:	9f 91       	pop	r25
    2f5e:	8f 91       	pop	r24
    2f60:	0f 90       	pop	r0
    2f62:	0b be       	out	0x3b, r0	; 59
    2f64:	0f 90       	pop	r0
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	0f 90       	pop	r0
    2f6a:	1f 90       	pop	r1
    2f6c:	18 95       	reti

00002f6e <_Z16uart1_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart1_initialize (uint16_t baudrate)
{
	transmit_head = 0;
    2f6e:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <_ZL13transmit_head>
	transmit_tail = 0;
    2f72:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <_ZL13transmit_tail>
	receive_head = 0;
    2f76:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <_ZL12receive_head>
	receive_tail = 0;
    2f7a:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <_ZL12receive_tail>

	UBRR1H = (uint8_t)((baudrate >> 8) & 0x80) ;
    2f7e:	90 78       	andi	r25, 0x80	; 128
    2f80:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(baudrate & 0x00FF);
    2f84:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	// set enable bits
	UART1_CONTROL_B = (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    2f88:	88 e9       	ldi	r24, 0x98	; 152
    2f8a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

	// set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
	UART1_CONTROL_C = (1 << UCSZ11) | (1 << UCSZ10);
    2f8e:	86 e0       	ldi	r24, 0x06	; 6
    2f90:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    2f94:	08 95       	ret

00002f96 <_Z15uart1_read_bytev>:
uint16_t uart1_read_byte ()
{
	uint8_t new_tail;
	uint8_t data;
	uint8_t error;
	if (receive_head == receive_tail)
    2f96:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <_ZL12receive_head>
    2f9a:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <_ZL12receive_tail>
    2f9e:	98 17       	cp	r25, r24
    2fa0:	a1 f0       	breq	.+40     	; 0x2fca <_Z15uart1_read_bytev+0x34>
		return UART1_NO_DATA;
	new_tail = (receive_tail + 1) & UART1_BUFFER_MASK;
    2fa2:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <_ZL12receive_tail>
    2fa6:	8f 5f       	subi	r24, 0xFF	; 255
	data = receive_buffer[new_tail];
    2fa8:	e8 2f       	mov	r30, r24
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	ea 5c       	subi	r30, 0xCA	; 202
    2fae:	f8 4f       	sbci	r31, 0xF8	; 248
    2fb0:	20 81       	ld	r18, Z
	receive_tail = new_tail;
    2fb2:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <_ZL12receive_tail>
	error = last_receive_error;
    2fb6:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <_ZL18last_receive_error>
	last_receive_error = 0;
    2fba:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <_ZL18last_receive_error>
	return (error << 8) + data;
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	98 2f       	mov	r25, r24
    2fc2:	88 27       	eor	r24, r24
    2fc4:	82 0f       	add	r24, r18
    2fc6:	91 1d       	adc	r25, r1
    2fc8:	08 95       	ret
{
	uint8_t new_tail;
	uint8_t data;
	uint8_t error;
	if (receive_head == receive_tail)
		return UART1_NO_DATA;
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	91 e0       	ldi	r25, 0x01	; 1
	data = receive_buffer[new_tail];
	receive_tail = new_tail;
	error = last_receive_error;
	last_receive_error = 0;
	return (error << 8) + data;
}
    2fce:	08 95       	ret

00002fd0 <_Z15uart1_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart1_send_byte (uint8_t data)
{
	uint8_t new_head;
	new_head  = (transmit_head + 1) & UART1_BUFFER_MASK;
    2fd0:	20 91 37 08 	lds	r18, 0x0837	; 0x800837 <_ZL13transmit_head>
    2fd4:	2f 5f       	subi	r18, 0xFF	; 255
	while (new_head == transmit_tail) {} // wait for free space in buffer
    2fd6:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <_ZL13transmit_tail>
    2fda:	29 17       	cp	r18, r25
    2fdc:	e1 f3       	breq	.-8      	; 0x2fd6 <_Z15uart1_send_byteh+0x6>
	transmit_buffer[new_head] = data;
    2fde:	e2 2f       	mov	r30, r18
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	e8 5c       	subi	r30, 0xC8	; 200
    2fe4:	f7 4f       	sbci	r31, 0xF7	; 247
    2fe6:	80 83       	st	Z, r24
	transmit_head = new_head;
    2fe8:	20 93 37 08 	sts	0x0837, r18	; 0x800837 <_ZL13transmit_head>
	UART1_CONTROL_B |= (1 << UDRIE1); // enable data register interrupt
    2fec:	e9 ec       	ldi	r30, 0xC9	; 201
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	80 62       	ori	r24, 0x20	; 32
    2ff4:	80 83       	st	Z, r24
    2ff6:	08 95       	ret

00002ff8 <__vector_51>:
	data = receive_buffer[new_tail];
	receive_tail = new_tail;
	error = last_receive_error;
	last_receive_error = 0;
	return (error << 8) + data;
}
    2ff8:	1f 92       	push	r1
    2ffa:	0f 92       	push	r0
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	0f 92       	push	r0
    3000:	11 24       	eor	r1, r1
    3002:	0b b6       	in	r0, 0x3b	; 59
    3004:	0f 92       	push	r0
    3006:	2f 93       	push	r18
    3008:	8f 93       	push	r24
    300a:	9f 93       	push	r25
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
    3014:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    3018:	8c 71       	andi	r24, 0x1C	; 28
    301a:	e0 91 3a 09 	lds	r30, 0x093A	; 0x80093a <_ZL12receive_head>
    301e:	ef 5f       	subi	r30, 0xFF	; 255
    3020:	ef 71       	andi	r30, 0x1F	; 31
    3022:	90 91 39 09 	lds	r25, 0x0939	; 0x800939 <_ZL12receive_tail>
    3026:	e9 17       	cp	r30, r25
    3028:	39 f0       	breq	.+14     	; 0x3038 <__vector_51+0x40>
    302a:	e0 93 3a 09 	sts	0x093A, r30	; 0x80093a <_ZL12receive_head>
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	e5 5c       	subi	r30, 0xC5	; 197
    3032:	f6 4f       	sbci	r31, 0xF6	; 246
    3034:	20 83       	st	Z, r18
    3036:	01 c0       	rjmp	.+2      	; 0x303a <__vector_51+0x42>
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	90 91 38 09 	lds	r25, 0x0938	; 0x800938 <_ZL18last_receive_error>
    303e:	89 2b       	or	r24, r25
    3040:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <_ZL18last_receive_error>
    3044:	ff 91       	pop	r31
    3046:	ef 91       	pop	r30
    3048:	9f 91       	pop	r25
    304a:	8f 91       	pop	r24
    304c:	2f 91       	pop	r18
    304e:	0f 90       	pop	r0
    3050:	0b be       	out	0x3b, r0	; 59
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	0f 90       	pop	r0
    3058:	1f 90       	pop	r1
    305a:	18 95       	reti

0000305c <__vector_52>:
    305c:	1f 92       	push	r1
    305e:	0f 92       	push	r0
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	0f 92       	push	r0
    3064:	11 24       	eor	r1, r1
    3066:	0b b6       	in	r0, 0x3b	; 59
    3068:	0f 92       	push	r0
    306a:	8f 93       	push	r24
    306c:	9f 93       	push	r25
    306e:	ef 93       	push	r30
    3070:	ff 93       	push	r31
    3072:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <_ZL13transmit_head>
    3076:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <_ZL13transmit_tail>
    307a:	98 17       	cp	r25, r24
    307c:	69 f0       	breq	.+26     	; 0x3098 <__vector_52+0x3c>
    307e:	e0 91 5b 09 	lds	r30, 0x095B	; 0x80095b <_ZL13transmit_tail>
    3082:	ef 5f       	subi	r30, 0xFF	; 255
    3084:	ef 71       	andi	r30, 0x1F	; 31
    3086:	e0 93 5b 09 	sts	0x095B, r30	; 0x80095b <_ZL13transmit_tail>
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	e3 5a       	subi	r30, 0xA3	; 163
    308e:	f6 4f       	sbci	r31, 0xF6	; 246
    3090:	80 81       	ld	r24, Z
    3092:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    3096:	05 c0       	rjmp	.+10     	; 0x30a2 <__vector_52+0x46>
    3098:	e1 ed       	ldi	r30, 0xD1	; 209
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	8f 7d       	andi	r24, 0xDF	; 223
    30a0:	80 83       	st	Z, r24
    30a2:	ff 91       	pop	r31
    30a4:	ef 91       	pop	r30
    30a6:	9f 91       	pop	r25
    30a8:	8f 91       	pop	r24
    30aa:	0f 90       	pop	r0
    30ac:	0b be       	out	0x3b, r0	; 59
    30ae:	0f 90       	pop	r0
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	0f 90       	pop	r0
    30b4:	1f 90       	pop	r1
    30b6:	18 95       	reti

000030b8 <_Z16uart2_initializej>:
    30b8:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <_ZL13transmit_head>
    30bc:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <_ZL13transmit_tail>
    30c0:	10 92 3a 09 	sts	0x093A, r1	; 0x80093a <_ZL12receive_head>
    30c4:	10 92 39 09 	sts	0x0939, r1	; 0x800939 <_ZL12receive_tail>
    30c8:	90 78       	andi	r25, 0x80	; 128
    30ca:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
    30ce:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
    30d2:	88 e9       	ldi	r24, 0x98	; 152
    30d4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
    30d8:	86 e0       	ldi	r24, 0x06	; 6
    30da:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	8e e8       	ldi	r24, 0x8E	; 142
    30e4:	98 e1       	ldi	r25, 0x18	; 24
    30e6:	23 d3       	rcall	.+1606   	; 0x372e <fdevopen>
    30e8:	90 93 c5 09 	sts	0x09C5, r25	; 0x8009c5 <__iob+0x3>
    30ec:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <__iob+0x2>
    30f0:	08 95       	ret

000030f2 <_Z15uart2_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart2_send_byte (uint8_t data)
{
	uint8_t new_head;
	new_head  = (transmit_head + 1) & UART2_BUFFER_MASK;
    30f2:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <_ZL13transmit_head>
    30f6:	2f 5f       	subi	r18, 0xFF	; 255
    30f8:	2f 71       	andi	r18, 0x1F	; 31
	while (new_head == transmit_tail) {} // wait for free space in buffer
    30fa:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <_ZL13transmit_tail>
    30fe:	29 17       	cp	r18, r25
    3100:	e1 f3       	breq	.-8      	; 0x30fa <_Z15uart2_send_byteh+0x8>
	transmit_buffer[new_head] = data;
    3102:	e2 2f       	mov	r30, r18
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	e3 5a       	subi	r30, 0xA3	; 163
    3108:	f6 4f       	sbci	r31, 0xF6	; 246
    310a:	80 83       	st	Z, r24
	transmit_head = new_head;
    310c:	20 93 5c 09 	sts	0x095C, r18	; 0x80095c <_ZL13transmit_head>
	UART2_CONTROL_B |= (1 << UDRIE2); // enable data register interrupt
    3110:	e1 ed       	ldi	r30, 0xD1	; 209
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	80 62       	ori	r24, 0x20	; 32
    3118:	80 83       	st	Z, r24
    311a:	08 95       	ret

0000311c <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{

	if (c != '\n') {
    311c:	8a 30       	cpi	r24, 0x0A	; 10
    311e:	11 f0       	breq	.+4      	; 0x3124 <uart_putchar+0x8>
		uart2_send_byte(c);
    3120:	e8 df       	rcall	.-48     	; 0x30f2 <_Z15uart2_send_byteh>
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <uart_putchar+0xc>
	} else {
		uart2_send_byte('\r');
    3124:	8d e0       	ldi	r24, 0x0D	; 13
    3126:	e5 df       	rcall	.-54     	; 0x30f2 <_Z15uart2_send_byteh>
	}

	return 0;
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	08 95       	ret

0000312e <__vector_54>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART3_RECEIVE_INTERRUPT)
{
    312e:	1f 92       	push	r1
    3130:	0f 92       	push	r0
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	0f 92       	push	r0
    3136:	11 24       	eor	r1, r1
    3138:	0b b6       	in	r0, 0x3b	; 59
    313a:	0f 92       	push	r0
    313c:	2f 93       	push	r18
    313e:	8f 93       	push	r24
    3140:	9f 93       	push	r25
    3142:	ef 93       	push	r30
    3144:	ff 93       	push	r31
	uint8_t new_head, data, status, error;
	status = UART3_STATUS;
    3146:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7e0130>
	data = UART3_DATA;
    314a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7e0136>

	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));
    314e:	8c 71       	andi	r24, 0x1C	; 28

	new_head = (receive_head + 1) & UART3_BUFFER_MASK;
    3150:	e0 91 7f 09 	lds	r30, 0x097F	; 0x80097f <_ZL12receive_head>
    3154:	ef 5f       	subi	r30, 0xFF	; 255
    3156:	ef 71       	andi	r30, 0x1F	; 31
	if (new_head == receive_tail)
    3158:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <_ZL12receive_tail>
    315c:	e9 17       	cp	r30, r25
    315e:	39 f0       	breq	.+14     	; 0x316e <__vector_54+0x40>
		error = UART3_BUFFER_OVERFLOW >> 8;
	else
	{
		receive_head = new_head;
    3160:	e0 93 7f 09 	sts	0x097F, r30	; 0x80097f <_ZL12receive_head>
		receive_buffer[new_head] = data;
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	e0 58       	subi	r30, 0x80	; 128
    3168:	f6 4f       	sbci	r31, 0xF6	; 246
    316a:	20 83       	st	Z, r18
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <__vector_54+0x42>
	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));

	new_head = (receive_head + 1) & UART3_BUFFER_MASK;
	if (new_head == receive_tail)
		error = UART3_BUFFER_OVERFLOW >> 8;
    316e:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		receive_head = new_head;
		receive_buffer[new_head] = data;
	}
	last_receive_error |= error;
    3170:	90 91 7d 09 	lds	r25, 0x097D	; 0x80097d <_ZL18last_receive_error>
    3174:	89 2b       	or	r24, r25
    3176:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <_ZL18last_receive_error>
}
    317a:	ff 91       	pop	r31
    317c:	ef 91       	pop	r30
    317e:	9f 91       	pop	r25
    3180:	8f 91       	pop	r24
    3182:	2f 91       	pop	r18
    3184:	0f 90       	pop	r0
    3186:	0b be       	out	0x3b, r0	; 59
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	0f 90       	pop	r0
    318e:	1f 90       	pop	r1
    3190:	18 95       	reti

00003192 <__vector_55>:

ISR (UART3_TRANSMIT_INTERRUPT)
{
    3192:	1f 92       	push	r1
    3194:	0f 92       	push	r0
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	0f 92       	push	r0
    319a:	11 24       	eor	r1, r1
    319c:	0b b6       	in	r0, 0x3b	; 59
    319e:	0f 92       	push	r0
    31a0:	8f 93       	push	r24
    31a2:	9f 93       	push	r25
    31a4:	ef 93       	push	r30
    31a6:	ff 93       	push	r31
	uint8_t new_tail;
	if (transmit_head != transmit_tail)
    31a8:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <_ZL13transmit_head>
    31ac:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <_ZL13transmit_tail>
    31b0:	98 17       	cp	r25, r24
    31b2:	69 f0       	breq	.+26     	; 0x31ce <__vector_55+0x3c>
	{
		new_tail = (transmit_tail + 1) & UART3_BUFFER_MASK;
    31b4:	e0 91 a0 09 	lds	r30, 0x09A0	; 0x8009a0 <_ZL13transmit_tail>
    31b8:	ef 5f       	subi	r30, 0xFF	; 255
    31ba:	ef 71       	andi	r30, 0x1F	; 31
		transmit_tail = new_tail;
    31bc:	e0 93 a0 09 	sts	0x09A0, r30	; 0x8009a0 <_ZL13transmit_tail>
		UART3_DATA = transmit_buffer[new_tail]; // transmit
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	ee 55       	subi	r30, 0x5E	; 94
    31c4:	f6 4f       	sbci	r31, 0xF6	; 246
    31c6:	80 81       	ld	r24, Z
    31c8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7e0136>
    31cc:	05 c0       	rjmp	.+10     	; 0x31d8 <__vector_55+0x46>
	}
	else
		UART3_CONTROL_B &= ~(1 << UDRIE3); // buffer empty so end transmission
    31ce:	e1 e3       	ldi	r30, 0x31	; 49
    31d0:	f1 e0       	ldi	r31, 0x01	; 1
    31d2:	80 81       	ld	r24, Z
    31d4:	8f 7d       	andi	r24, 0xDF	; 223
    31d6:	80 83       	st	Z, r24
}
    31d8:	ff 91       	pop	r31
    31da:	ef 91       	pop	r30
    31dc:	9f 91       	pop	r25
    31de:	8f 91       	pop	r24
    31e0:	0f 90       	pop	r0
    31e2:	0b be       	out	0x3b, r0	; 59
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <_Z16uart3_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart3_initialize (uint16_t baudrate)
{
	transmit_head = 0;
    31ee:	10 92 a1 09 	sts	0x09A1, r1	; 0x8009a1 <_ZL13transmit_head>
	transmit_tail = 0;
    31f2:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <_ZL13transmit_tail>
	receive_head = 0;
    31f6:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <_ZL12receive_head>
	receive_tail = 0;
    31fa:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <_ZL12receive_tail>

	UBRR3H = (uint8_t)((baudrate >> 8) & 0x80) ;
    31fe:	90 78       	andi	r25, 0x80	; 128
    3200:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7e0135>
	UBRR3L = (uint8_t)(baudrate & 0x00FF);
    3204:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7e0134>

	// set enable bits
	UART3_CONTROL_B = (1 << RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    3208:	88 e9       	ldi	r24, 0x98	; 152
    320a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7e0131>

	// set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
	UART3_CONTROL_C = (1 << UCSZ31) | (1 << UCSZ30);
    320e:	86 e0       	ldi	r24, 0x06	; 6
    3210:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7e0132>
    3214:	08 95       	ret

00003216 <__subsf3>:
    3216:	50 58       	subi	r21, 0x80	; 128

00003218 <__addsf3>:
    3218:	bb 27       	eor	r27, r27
    321a:	aa 27       	eor	r26, r26
    321c:	0e d0       	rcall	.+28     	; 0x323a <__addsf3x>
    321e:	75 c1       	rjmp	.+746    	; 0x350a <__fp_round>
    3220:	66 d1       	rcall	.+716    	; 0x34ee <__fp_pscA>
    3222:	30 f0       	brcs	.+12     	; 0x3230 <__addsf3+0x18>
    3224:	6b d1       	rcall	.+726    	; 0x34fc <__fp_pscB>
    3226:	20 f0       	brcs	.+8      	; 0x3230 <__addsf3+0x18>
    3228:	31 f4       	brne	.+12     	; 0x3236 <__addsf3+0x1e>
    322a:	9f 3f       	cpi	r25, 0xFF	; 255
    322c:	11 f4       	brne	.+4      	; 0x3232 <__addsf3+0x1a>
    322e:	1e f4       	brtc	.+6      	; 0x3236 <__addsf3+0x1e>
    3230:	5b c1       	rjmp	.+694    	; 0x34e8 <__fp_nan>
    3232:	0e f4       	brtc	.+2      	; 0x3236 <__addsf3+0x1e>
    3234:	e0 95       	com	r30
    3236:	e7 fb       	bst	r30, 7
    3238:	51 c1       	rjmp	.+674    	; 0x34dc <__fp_inf>

0000323a <__addsf3x>:
    323a:	e9 2f       	mov	r30, r25
    323c:	77 d1       	rcall	.+750    	; 0x352c <__fp_split3>
    323e:	80 f3       	brcs	.-32     	; 0x3220 <__addsf3+0x8>
    3240:	ba 17       	cp	r27, r26
    3242:	62 07       	cpc	r22, r18
    3244:	73 07       	cpc	r23, r19
    3246:	84 07       	cpc	r24, r20
    3248:	95 07       	cpc	r25, r21
    324a:	18 f0       	brcs	.+6      	; 0x3252 <__addsf3x+0x18>
    324c:	71 f4       	brne	.+28     	; 0x326a <__addsf3x+0x30>
    324e:	9e f5       	brtc	.+102    	; 0x32b6 <__addsf3x+0x7c>
    3250:	8f c1       	rjmp	.+798    	; 0x3570 <__fp_zero>
    3252:	0e f4       	brtc	.+2      	; 0x3256 <__addsf3x+0x1c>
    3254:	e0 95       	com	r30
    3256:	0b 2e       	mov	r0, r27
    3258:	ba 2f       	mov	r27, r26
    325a:	a0 2d       	mov	r26, r0
    325c:	0b 01       	movw	r0, r22
    325e:	b9 01       	movw	r22, r18
    3260:	90 01       	movw	r18, r0
    3262:	0c 01       	movw	r0, r24
    3264:	ca 01       	movw	r24, r20
    3266:	a0 01       	movw	r20, r0
    3268:	11 24       	eor	r1, r1
    326a:	ff 27       	eor	r31, r31
    326c:	59 1b       	sub	r21, r25
    326e:	99 f0       	breq	.+38     	; 0x3296 <__addsf3x+0x5c>
    3270:	59 3f       	cpi	r21, 0xF9	; 249
    3272:	50 f4       	brcc	.+20     	; 0x3288 <__addsf3x+0x4e>
    3274:	50 3e       	cpi	r21, 0xE0	; 224
    3276:	68 f1       	brcs	.+90     	; 0x32d2 <__addsf3x+0x98>
    3278:	1a 16       	cp	r1, r26
    327a:	f0 40       	sbci	r31, 0x00	; 0
    327c:	a2 2f       	mov	r26, r18
    327e:	23 2f       	mov	r18, r19
    3280:	34 2f       	mov	r19, r20
    3282:	44 27       	eor	r20, r20
    3284:	58 5f       	subi	r21, 0xF8	; 248
    3286:	f3 cf       	rjmp	.-26     	; 0x326e <__addsf3x+0x34>
    3288:	46 95       	lsr	r20
    328a:	37 95       	ror	r19
    328c:	27 95       	ror	r18
    328e:	a7 95       	ror	r26
    3290:	f0 40       	sbci	r31, 0x00	; 0
    3292:	53 95       	inc	r21
    3294:	c9 f7       	brne	.-14     	; 0x3288 <__addsf3x+0x4e>
    3296:	7e f4       	brtc	.+30     	; 0x32b6 <__addsf3x+0x7c>
    3298:	1f 16       	cp	r1, r31
    329a:	ba 0b       	sbc	r27, r26
    329c:	62 0b       	sbc	r22, r18
    329e:	73 0b       	sbc	r23, r19
    32a0:	84 0b       	sbc	r24, r20
    32a2:	ba f0       	brmi	.+46     	; 0x32d2 <__addsf3x+0x98>
    32a4:	91 50       	subi	r25, 0x01	; 1
    32a6:	a1 f0       	breq	.+40     	; 0x32d0 <__addsf3x+0x96>
    32a8:	ff 0f       	add	r31, r31
    32aa:	bb 1f       	adc	r27, r27
    32ac:	66 1f       	adc	r22, r22
    32ae:	77 1f       	adc	r23, r23
    32b0:	88 1f       	adc	r24, r24
    32b2:	c2 f7       	brpl	.-16     	; 0x32a4 <__addsf3x+0x6a>
    32b4:	0e c0       	rjmp	.+28     	; 0x32d2 <__addsf3x+0x98>
    32b6:	ba 0f       	add	r27, r26
    32b8:	62 1f       	adc	r22, r18
    32ba:	73 1f       	adc	r23, r19
    32bc:	84 1f       	adc	r24, r20
    32be:	48 f4       	brcc	.+18     	; 0x32d2 <__addsf3x+0x98>
    32c0:	87 95       	ror	r24
    32c2:	77 95       	ror	r23
    32c4:	67 95       	ror	r22
    32c6:	b7 95       	ror	r27
    32c8:	f7 95       	ror	r31
    32ca:	9e 3f       	cpi	r25, 0xFE	; 254
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <__addsf3x+0x96>
    32ce:	b3 cf       	rjmp	.-154    	; 0x3236 <__addsf3+0x1e>
    32d0:	93 95       	inc	r25
    32d2:	88 0f       	add	r24, r24
    32d4:	08 f0       	brcs	.+2      	; 0x32d8 <__addsf3x+0x9e>
    32d6:	99 27       	eor	r25, r25
    32d8:	ee 0f       	add	r30, r30
    32da:	97 95       	ror	r25
    32dc:	87 95       	ror	r24
    32de:	08 95       	ret

000032e0 <__cmpsf2>:
    32e0:	d9 d0       	rcall	.+434    	; 0x3494 <__fp_cmp>
    32e2:	08 f4       	brcc	.+2      	; 0x32e6 <__cmpsf2+0x6>
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	08 95       	ret

000032e8 <__divsf3>:
    32e8:	0c d0       	rcall	.+24     	; 0x3302 <__divsf3x>
    32ea:	0f c1       	rjmp	.+542    	; 0x350a <__fp_round>
    32ec:	07 d1       	rcall	.+526    	; 0x34fc <__fp_pscB>
    32ee:	40 f0       	brcs	.+16     	; 0x3300 <__divsf3+0x18>
    32f0:	fe d0       	rcall	.+508    	; 0x34ee <__fp_pscA>
    32f2:	30 f0       	brcs	.+12     	; 0x3300 <__divsf3+0x18>
    32f4:	21 f4       	brne	.+8      	; 0x32fe <__divsf3+0x16>
    32f6:	5f 3f       	cpi	r21, 0xFF	; 255
    32f8:	19 f0       	breq	.+6      	; 0x3300 <__divsf3+0x18>
    32fa:	f0 c0       	rjmp	.+480    	; 0x34dc <__fp_inf>
    32fc:	51 11       	cpse	r21, r1
    32fe:	39 c1       	rjmp	.+626    	; 0x3572 <__fp_szero>
    3300:	f3 c0       	rjmp	.+486    	; 0x34e8 <__fp_nan>

00003302 <__divsf3x>:
    3302:	14 d1       	rcall	.+552    	; 0x352c <__fp_split3>
    3304:	98 f3       	brcs	.-26     	; 0x32ec <__divsf3+0x4>

00003306 <__divsf3_pse>:
    3306:	99 23       	and	r25, r25
    3308:	c9 f3       	breq	.-14     	; 0x32fc <__divsf3+0x14>
    330a:	55 23       	and	r21, r21
    330c:	b1 f3       	breq	.-20     	; 0x32fa <__divsf3+0x12>
    330e:	95 1b       	sub	r25, r21
    3310:	55 0b       	sbc	r21, r21
    3312:	bb 27       	eor	r27, r27
    3314:	aa 27       	eor	r26, r26
    3316:	62 17       	cp	r22, r18
    3318:	73 07       	cpc	r23, r19
    331a:	84 07       	cpc	r24, r20
    331c:	38 f0       	brcs	.+14     	; 0x332c <__divsf3_pse+0x26>
    331e:	9f 5f       	subi	r25, 0xFF	; 255
    3320:	5f 4f       	sbci	r21, 0xFF	; 255
    3322:	22 0f       	add	r18, r18
    3324:	33 1f       	adc	r19, r19
    3326:	44 1f       	adc	r20, r20
    3328:	aa 1f       	adc	r26, r26
    332a:	a9 f3       	breq	.-22     	; 0x3316 <__divsf3_pse+0x10>
    332c:	33 d0       	rcall	.+102    	; 0x3394 <__divsf3_pse+0x8e>
    332e:	0e 2e       	mov	r0, r30
    3330:	3a f0       	brmi	.+14     	; 0x3340 <__divsf3_pse+0x3a>
    3332:	e0 e8       	ldi	r30, 0x80	; 128
    3334:	30 d0       	rcall	.+96     	; 0x3396 <__divsf3_pse+0x90>
    3336:	91 50       	subi	r25, 0x01	; 1
    3338:	50 40       	sbci	r21, 0x00	; 0
    333a:	e6 95       	lsr	r30
    333c:	00 1c       	adc	r0, r0
    333e:	ca f7       	brpl	.-14     	; 0x3332 <__divsf3_pse+0x2c>
    3340:	29 d0       	rcall	.+82     	; 0x3394 <__divsf3_pse+0x8e>
    3342:	fe 2f       	mov	r31, r30
    3344:	27 d0       	rcall	.+78     	; 0x3394 <__divsf3_pse+0x8e>
    3346:	66 0f       	add	r22, r22
    3348:	77 1f       	adc	r23, r23
    334a:	88 1f       	adc	r24, r24
    334c:	bb 1f       	adc	r27, r27
    334e:	26 17       	cp	r18, r22
    3350:	37 07       	cpc	r19, r23
    3352:	48 07       	cpc	r20, r24
    3354:	ab 07       	cpc	r26, r27
    3356:	b0 e8       	ldi	r27, 0x80	; 128
    3358:	09 f0       	breq	.+2      	; 0x335c <__divsf3_pse+0x56>
    335a:	bb 0b       	sbc	r27, r27
    335c:	80 2d       	mov	r24, r0
    335e:	bf 01       	movw	r22, r30
    3360:	ff 27       	eor	r31, r31
    3362:	93 58       	subi	r25, 0x83	; 131
    3364:	5f 4f       	sbci	r21, 0xFF	; 255
    3366:	2a f0       	brmi	.+10     	; 0x3372 <__divsf3_pse+0x6c>
    3368:	9e 3f       	cpi	r25, 0xFE	; 254
    336a:	51 05       	cpc	r21, r1
    336c:	68 f0       	brcs	.+26     	; 0x3388 <__divsf3_pse+0x82>
    336e:	b6 c0       	rjmp	.+364    	; 0x34dc <__fp_inf>
    3370:	00 c1       	rjmp	.+512    	; 0x3572 <__fp_szero>
    3372:	5f 3f       	cpi	r21, 0xFF	; 255
    3374:	ec f3       	brlt	.-6      	; 0x3370 <__divsf3_pse+0x6a>
    3376:	98 3e       	cpi	r25, 0xE8	; 232
    3378:	dc f3       	brlt	.-10     	; 0x3370 <__divsf3_pse+0x6a>
    337a:	86 95       	lsr	r24
    337c:	77 95       	ror	r23
    337e:	67 95       	ror	r22
    3380:	b7 95       	ror	r27
    3382:	f7 95       	ror	r31
    3384:	9f 5f       	subi	r25, 0xFF	; 255
    3386:	c9 f7       	brne	.-14     	; 0x337a <__divsf3_pse+0x74>
    3388:	88 0f       	add	r24, r24
    338a:	91 1d       	adc	r25, r1
    338c:	96 95       	lsr	r25
    338e:	87 95       	ror	r24
    3390:	97 f9       	bld	r25, 7
    3392:	08 95       	ret
    3394:	e1 e0       	ldi	r30, 0x01	; 1
    3396:	66 0f       	add	r22, r22
    3398:	77 1f       	adc	r23, r23
    339a:	88 1f       	adc	r24, r24
    339c:	bb 1f       	adc	r27, r27
    339e:	62 17       	cp	r22, r18
    33a0:	73 07       	cpc	r23, r19
    33a2:	84 07       	cpc	r24, r20
    33a4:	ba 07       	cpc	r27, r26
    33a6:	20 f0       	brcs	.+8      	; 0x33b0 <__divsf3_pse+0xaa>
    33a8:	62 1b       	sub	r22, r18
    33aa:	73 0b       	sbc	r23, r19
    33ac:	84 0b       	sbc	r24, r20
    33ae:	ba 0b       	sbc	r27, r26
    33b0:	ee 1f       	adc	r30, r30
    33b2:	88 f7       	brcc	.-30     	; 0x3396 <__divsf3_pse+0x90>
    33b4:	e0 95       	com	r30
    33b6:	08 95       	ret

000033b8 <__fixsfsi>:
    33b8:	04 d0       	rcall	.+8      	; 0x33c2 <__fixunssfsi>
    33ba:	68 94       	set
    33bc:	b1 11       	cpse	r27, r1
    33be:	d9 c0       	rjmp	.+434    	; 0x3572 <__fp_szero>
    33c0:	08 95       	ret

000033c2 <__fixunssfsi>:
    33c2:	bc d0       	rcall	.+376    	; 0x353c <__fp_splitA>
    33c4:	88 f0       	brcs	.+34     	; 0x33e8 <__fixunssfsi+0x26>
    33c6:	9f 57       	subi	r25, 0x7F	; 127
    33c8:	90 f0       	brcs	.+36     	; 0x33ee <__fixunssfsi+0x2c>
    33ca:	b9 2f       	mov	r27, r25
    33cc:	99 27       	eor	r25, r25
    33ce:	b7 51       	subi	r27, 0x17	; 23
    33d0:	a0 f0       	brcs	.+40     	; 0x33fa <__fixunssfsi+0x38>
    33d2:	d1 f0       	breq	.+52     	; 0x3408 <__fixunssfsi+0x46>
    33d4:	66 0f       	add	r22, r22
    33d6:	77 1f       	adc	r23, r23
    33d8:	88 1f       	adc	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	1a f0       	brmi	.+6      	; 0x33e4 <__fixunssfsi+0x22>
    33de:	ba 95       	dec	r27
    33e0:	c9 f7       	brne	.-14     	; 0x33d4 <__fixunssfsi+0x12>
    33e2:	12 c0       	rjmp	.+36     	; 0x3408 <__fixunssfsi+0x46>
    33e4:	b1 30       	cpi	r27, 0x01	; 1
    33e6:	81 f0       	breq	.+32     	; 0x3408 <__fixunssfsi+0x46>
    33e8:	c3 d0       	rcall	.+390    	; 0x3570 <__fp_zero>
    33ea:	b1 e0       	ldi	r27, 0x01	; 1
    33ec:	08 95       	ret
    33ee:	c0 c0       	rjmp	.+384    	; 0x3570 <__fp_zero>
    33f0:	67 2f       	mov	r22, r23
    33f2:	78 2f       	mov	r23, r24
    33f4:	88 27       	eor	r24, r24
    33f6:	b8 5f       	subi	r27, 0xF8	; 248
    33f8:	39 f0       	breq	.+14     	; 0x3408 <__fixunssfsi+0x46>
    33fa:	b9 3f       	cpi	r27, 0xF9	; 249
    33fc:	cc f3       	brlt	.-14     	; 0x33f0 <__fixunssfsi+0x2e>
    33fe:	86 95       	lsr	r24
    3400:	77 95       	ror	r23
    3402:	67 95       	ror	r22
    3404:	b3 95       	inc	r27
    3406:	d9 f7       	brne	.-10     	; 0x33fe <__fixunssfsi+0x3c>
    3408:	3e f4       	brtc	.+14     	; 0x3418 <__fixunssfsi+0x56>
    340a:	90 95       	com	r25
    340c:	80 95       	com	r24
    340e:	70 95       	com	r23
    3410:	61 95       	neg	r22
    3412:	7f 4f       	sbci	r23, 0xFF	; 255
    3414:	8f 4f       	sbci	r24, 0xFF	; 255
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	08 95       	ret

0000341a <__floatunsisf>:
    341a:	e8 94       	clt
    341c:	09 c0       	rjmp	.+18     	; 0x3430 <__floatsisf+0x12>

0000341e <__floatsisf>:
    341e:	97 fb       	bst	r25, 7
    3420:	3e f4       	brtc	.+14     	; 0x3430 <__floatsisf+0x12>
    3422:	90 95       	com	r25
    3424:	80 95       	com	r24
    3426:	70 95       	com	r23
    3428:	61 95       	neg	r22
    342a:	7f 4f       	sbci	r23, 0xFF	; 255
    342c:	8f 4f       	sbci	r24, 0xFF	; 255
    342e:	9f 4f       	sbci	r25, 0xFF	; 255
    3430:	99 23       	and	r25, r25
    3432:	a9 f0       	breq	.+42     	; 0x345e <__floatsisf+0x40>
    3434:	f9 2f       	mov	r31, r25
    3436:	96 e9       	ldi	r25, 0x96	; 150
    3438:	bb 27       	eor	r27, r27
    343a:	93 95       	inc	r25
    343c:	f6 95       	lsr	r31
    343e:	87 95       	ror	r24
    3440:	77 95       	ror	r23
    3442:	67 95       	ror	r22
    3444:	b7 95       	ror	r27
    3446:	f1 11       	cpse	r31, r1
    3448:	f8 cf       	rjmp	.-16     	; 0x343a <__floatsisf+0x1c>
    344a:	fa f4       	brpl	.+62     	; 0x348a <__floatsisf+0x6c>
    344c:	bb 0f       	add	r27, r27
    344e:	11 f4       	brne	.+4      	; 0x3454 <__floatsisf+0x36>
    3450:	60 ff       	sbrs	r22, 0
    3452:	1b c0       	rjmp	.+54     	; 0x348a <__floatsisf+0x6c>
    3454:	6f 5f       	subi	r22, 0xFF	; 255
    3456:	7f 4f       	sbci	r23, 0xFF	; 255
    3458:	8f 4f       	sbci	r24, 0xFF	; 255
    345a:	9f 4f       	sbci	r25, 0xFF	; 255
    345c:	16 c0       	rjmp	.+44     	; 0x348a <__floatsisf+0x6c>
    345e:	88 23       	and	r24, r24
    3460:	11 f0       	breq	.+4      	; 0x3466 <__floatsisf+0x48>
    3462:	96 e9       	ldi	r25, 0x96	; 150
    3464:	11 c0       	rjmp	.+34     	; 0x3488 <__floatsisf+0x6a>
    3466:	77 23       	and	r23, r23
    3468:	21 f0       	breq	.+8      	; 0x3472 <__floatsisf+0x54>
    346a:	9e e8       	ldi	r25, 0x8E	; 142
    346c:	87 2f       	mov	r24, r23
    346e:	76 2f       	mov	r23, r22
    3470:	05 c0       	rjmp	.+10     	; 0x347c <__floatsisf+0x5e>
    3472:	66 23       	and	r22, r22
    3474:	71 f0       	breq	.+28     	; 0x3492 <__floatsisf+0x74>
    3476:	96 e8       	ldi	r25, 0x86	; 134
    3478:	86 2f       	mov	r24, r22
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	2a f0       	brmi	.+10     	; 0x348a <__floatsisf+0x6c>
    3480:	9a 95       	dec	r25
    3482:	66 0f       	add	r22, r22
    3484:	77 1f       	adc	r23, r23
    3486:	88 1f       	adc	r24, r24
    3488:	da f7       	brpl	.-10     	; 0x3480 <__floatsisf+0x62>
    348a:	88 0f       	add	r24, r24
    348c:	96 95       	lsr	r25
    348e:	87 95       	ror	r24
    3490:	97 f9       	bld	r25, 7
    3492:	08 95       	ret

00003494 <__fp_cmp>:
    3494:	99 0f       	add	r25, r25
    3496:	00 08       	sbc	r0, r0
    3498:	55 0f       	add	r21, r21
    349a:	aa 0b       	sbc	r26, r26
    349c:	e0 e8       	ldi	r30, 0x80	; 128
    349e:	fe ef       	ldi	r31, 0xFE	; 254
    34a0:	16 16       	cp	r1, r22
    34a2:	17 06       	cpc	r1, r23
    34a4:	e8 07       	cpc	r30, r24
    34a6:	f9 07       	cpc	r31, r25
    34a8:	c0 f0       	brcs	.+48     	; 0x34da <__fp_cmp+0x46>
    34aa:	12 16       	cp	r1, r18
    34ac:	13 06       	cpc	r1, r19
    34ae:	e4 07       	cpc	r30, r20
    34b0:	f5 07       	cpc	r31, r21
    34b2:	98 f0       	brcs	.+38     	; 0x34da <__fp_cmp+0x46>
    34b4:	62 1b       	sub	r22, r18
    34b6:	73 0b       	sbc	r23, r19
    34b8:	84 0b       	sbc	r24, r20
    34ba:	95 0b       	sbc	r25, r21
    34bc:	39 f4       	brne	.+14     	; 0x34cc <__fp_cmp+0x38>
    34be:	0a 26       	eor	r0, r26
    34c0:	61 f0       	breq	.+24     	; 0x34da <__fp_cmp+0x46>
    34c2:	23 2b       	or	r18, r19
    34c4:	24 2b       	or	r18, r20
    34c6:	25 2b       	or	r18, r21
    34c8:	21 f4       	brne	.+8      	; 0x34d2 <__fp_cmp+0x3e>
    34ca:	08 95       	ret
    34cc:	0a 26       	eor	r0, r26
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <__fp_cmp+0x3e>
    34d0:	a1 40       	sbci	r26, 0x01	; 1
    34d2:	a6 95       	lsr	r26
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	81 1d       	adc	r24, r1
    34d8:	81 1d       	adc	r24, r1
    34da:	08 95       	ret

000034dc <__fp_inf>:
    34dc:	97 f9       	bld	r25, 7
    34de:	9f 67       	ori	r25, 0x7F	; 127
    34e0:	80 e8       	ldi	r24, 0x80	; 128
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	08 95       	ret

000034e8 <__fp_nan>:
    34e8:	9f ef       	ldi	r25, 0xFF	; 255
    34ea:	80 ec       	ldi	r24, 0xC0	; 192
    34ec:	08 95       	ret

000034ee <__fp_pscA>:
    34ee:	00 24       	eor	r0, r0
    34f0:	0a 94       	dec	r0
    34f2:	16 16       	cp	r1, r22
    34f4:	17 06       	cpc	r1, r23
    34f6:	18 06       	cpc	r1, r24
    34f8:	09 06       	cpc	r0, r25
    34fa:	08 95       	ret

000034fc <__fp_pscB>:
    34fc:	00 24       	eor	r0, r0
    34fe:	0a 94       	dec	r0
    3500:	12 16       	cp	r1, r18
    3502:	13 06       	cpc	r1, r19
    3504:	14 06       	cpc	r1, r20
    3506:	05 06       	cpc	r0, r21
    3508:	08 95       	ret

0000350a <__fp_round>:
    350a:	09 2e       	mov	r0, r25
    350c:	03 94       	inc	r0
    350e:	00 0c       	add	r0, r0
    3510:	11 f4       	brne	.+4      	; 0x3516 <__fp_round+0xc>
    3512:	88 23       	and	r24, r24
    3514:	52 f0       	brmi	.+20     	; 0x352a <__fp_round+0x20>
    3516:	bb 0f       	add	r27, r27
    3518:	40 f4       	brcc	.+16     	; 0x352a <__fp_round+0x20>
    351a:	bf 2b       	or	r27, r31
    351c:	11 f4       	brne	.+4      	; 0x3522 <__fp_round+0x18>
    351e:	60 ff       	sbrs	r22, 0
    3520:	04 c0       	rjmp	.+8      	; 0x352a <__fp_round+0x20>
    3522:	6f 5f       	subi	r22, 0xFF	; 255
    3524:	7f 4f       	sbci	r23, 0xFF	; 255
    3526:	8f 4f       	sbci	r24, 0xFF	; 255
    3528:	9f 4f       	sbci	r25, 0xFF	; 255
    352a:	08 95       	ret

0000352c <__fp_split3>:
    352c:	57 fd       	sbrc	r21, 7
    352e:	90 58       	subi	r25, 0x80	; 128
    3530:	44 0f       	add	r20, r20
    3532:	55 1f       	adc	r21, r21
    3534:	59 f0       	breq	.+22     	; 0x354c <__fp_splitA+0x10>
    3536:	5f 3f       	cpi	r21, 0xFF	; 255
    3538:	71 f0       	breq	.+28     	; 0x3556 <__fp_splitA+0x1a>
    353a:	47 95       	ror	r20

0000353c <__fp_splitA>:
    353c:	88 0f       	add	r24, r24
    353e:	97 fb       	bst	r25, 7
    3540:	99 1f       	adc	r25, r25
    3542:	61 f0       	breq	.+24     	; 0x355c <__fp_splitA+0x20>
    3544:	9f 3f       	cpi	r25, 0xFF	; 255
    3546:	79 f0       	breq	.+30     	; 0x3566 <__fp_splitA+0x2a>
    3548:	87 95       	ror	r24
    354a:	08 95       	ret
    354c:	12 16       	cp	r1, r18
    354e:	13 06       	cpc	r1, r19
    3550:	14 06       	cpc	r1, r20
    3552:	55 1f       	adc	r21, r21
    3554:	f2 cf       	rjmp	.-28     	; 0x353a <__fp_split3+0xe>
    3556:	46 95       	lsr	r20
    3558:	f1 df       	rcall	.-30     	; 0x353c <__fp_splitA>
    355a:	08 c0       	rjmp	.+16     	; 0x356c <__fp_splitA+0x30>
    355c:	16 16       	cp	r1, r22
    355e:	17 06       	cpc	r1, r23
    3560:	18 06       	cpc	r1, r24
    3562:	99 1f       	adc	r25, r25
    3564:	f1 cf       	rjmp	.-30     	; 0x3548 <__fp_splitA+0xc>
    3566:	86 95       	lsr	r24
    3568:	71 05       	cpc	r23, r1
    356a:	61 05       	cpc	r22, r1
    356c:	08 94       	sec
    356e:	08 95       	ret

00003570 <__fp_zero>:
    3570:	e8 94       	clt

00003572 <__fp_szero>:
    3572:	bb 27       	eor	r27, r27
    3574:	66 27       	eor	r22, r22
    3576:	77 27       	eor	r23, r23
    3578:	cb 01       	movw	r24, r22
    357a:	97 f9       	bld	r25, 7
    357c:	08 95       	ret

0000357e <__mulsf3>:
    357e:	0b d0       	rcall	.+22     	; 0x3596 <__mulsf3x>
    3580:	c4 cf       	rjmp	.-120    	; 0x350a <__fp_round>
    3582:	b5 df       	rcall	.-150    	; 0x34ee <__fp_pscA>
    3584:	28 f0       	brcs	.+10     	; 0x3590 <__mulsf3+0x12>
    3586:	ba df       	rcall	.-140    	; 0x34fc <__fp_pscB>
    3588:	18 f0       	brcs	.+6      	; 0x3590 <__mulsf3+0x12>
    358a:	95 23       	and	r25, r21
    358c:	09 f0       	breq	.+2      	; 0x3590 <__mulsf3+0x12>
    358e:	a6 cf       	rjmp	.-180    	; 0x34dc <__fp_inf>
    3590:	ab cf       	rjmp	.-170    	; 0x34e8 <__fp_nan>
    3592:	11 24       	eor	r1, r1
    3594:	ee cf       	rjmp	.-36     	; 0x3572 <__fp_szero>

00003596 <__mulsf3x>:
    3596:	ca df       	rcall	.-108    	; 0x352c <__fp_split3>
    3598:	a0 f3       	brcs	.-24     	; 0x3582 <__mulsf3+0x4>

0000359a <__mulsf3_pse>:
    359a:	95 9f       	mul	r25, r21
    359c:	d1 f3       	breq	.-12     	; 0x3592 <__mulsf3+0x14>
    359e:	95 0f       	add	r25, r21
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	55 1f       	adc	r21, r21
    35a4:	62 9f       	mul	r22, r18
    35a6:	f0 01       	movw	r30, r0
    35a8:	72 9f       	mul	r23, r18
    35aa:	bb 27       	eor	r27, r27
    35ac:	f0 0d       	add	r31, r0
    35ae:	b1 1d       	adc	r27, r1
    35b0:	63 9f       	mul	r22, r19
    35b2:	aa 27       	eor	r26, r26
    35b4:	f0 0d       	add	r31, r0
    35b6:	b1 1d       	adc	r27, r1
    35b8:	aa 1f       	adc	r26, r26
    35ba:	64 9f       	mul	r22, r20
    35bc:	66 27       	eor	r22, r22
    35be:	b0 0d       	add	r27, r0
    35c0:	a1 1d       	adc	r26, r1
    35c2:	66 1f       	adc	r22, r22
    35c4:	82 9f       	mul	r24, r18
    35c6:	22 27       	eor	r18, r18
    35c8:	b0 0d       	add	r27, r0
    35ca:	a1 1d       	adc	r26, r1
    35cc:	62 1f       	adc	r22, r18
    35ce:	73 9f       	mul	r23, r19
    35d0:	b0 0d       	add	r27, r0
    35d2:	a1 1d       	adc	r26, r1
    35d4:	62 1f       	adc	r22, r18
    35d6:	83 9f       	mul	r24, r19
    35d8:	a0 0d       	add	r26, r0
    35da:	61 1d       	adc	r22, r1
    35dc:	22 1f       	adc	r18, r18
    35de:	74 9f       	mul	r23, r20
    35e0:	33 27       	eor	r19, r19
    35e2:	a0 0d       	add	r26, r0
    35e4:	61 1d       	adc	r22, r1
    35e6:	23 1f       	adc	r18, r19
    35e8:	84 9f       	mul	r24, r20
    35ea:	60 0d       	add	r22, r0
    35ec:	21 1d       	adc	r18, r1
    35ee:	82 2f       	mov	r24, r18
    35f0:	76 2f       	mov	r23, r22
    35f2:	6a 2f       	mov	r22, r26
    35f4:	11 24       	eor	r1, r1
    35f6:	9f 57       	subi	r25, 0x7F	; 127
    35f8:	50 40       	sbci	r21, 0x00	; 0
    35fa:	8a f0       	brmi	.+34     	; 0x361e <__mulsf3_pse+0x84>
    35fc:	e1 f0       	breq	.+56     	; 0x3636 <__mulsf3_pse+0x9c>
    35fe:	88 23       	and	r24, r24
    3600:	4a f0       	brmi	.+18     	; 0x3614 <__mulsf3_pse+0x7a>
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	bb 1f       	adc	r27, r27
    3608:	66 1f       	adc	r22, r22
    360a:	77 1f       	adc	r23, r23
    360c:	88 1f       	adc	r24, r24
    360e:	91 50       	subi	r25, 0x01	; 1
    3610:	50 40       	sbci	r21, 0x00	; 0
    3612:	a9 f7       	brne	.-22     	; 0x35fe <__mulsf3_pse+0x64>
    3614:	9e 3f       	cpi	r25, 0xFE	; 254
    3616:	51 05       	cpc	r21, r1
    3618:	70 f0       	brcs	.+28     	; 0x3636 <__mulsf3_pse+0x9c>
    361a:	60 cf       	rjmp	.-320    	; 0x34dc <__fp_inf>
    361c:	aa cf       	rjmp	.-172    	; 0x3572 <__fp_szero>
    361e:	5f 3f       	cpi	r21, 0xFF	; 255
    3620:	ec f3       	brlt	.-6      	; 0x361c <__mulsf3_pse+0x82>
    3622:	98 3e       	cpi	r25, 0xE8	; 232
    3624:	dc f3       	brlt	.-10     	; 0x361c <__mulsf3_pse+0x82>
    3626:	86 95       	lsr	r24
    3628:	77 95       	ror	r23
    362a:	67 95       	ror	r22
    362c:	b7 95       	ror	r27
    362e:	f7 95       	ror	r31
    3630:	e7 95       	ror	r30
    3632:	9f 5f       	subi	r25, 0xFF	; 255
    3634:	c1 f7       	brne	.-16     	; 0x3626 <__mulsf3_pse+0x8c>
    3636:	fe 2b       	or	r31, r30
    3638:	88 0f       	add	r24, r24
    363a:	91 1d       	adc	r25, r1
    363c:	96 95       	lsr	r25
    363e:	87 95       	ror	r24
    3640:	97 f9       	bld	r25, 7
    3642:	08 95       	ret

00003644 <__mulsi3>:
    3644:	db 01       	movw	r26, r22
    3646:	8f 93       	push	r24
    3648:	9f 93       	push	r25
    364a:	67 d0       	rcall	.+206    	; 0x371a <__muluhisi3>
    364c:	bf 91       	pop	r27
    364e:	af 91       	pop	r26
    3650:	a2 9f       	mul	r26, r18
    3652:	80 0d       	add	r24, r0
    3654:	91 1d       	adc	r25, r1
    3656:	a3 9f       	mul	r26, r19
    3658:	90 0d       	add	r25, r0
    365a:	b2 9f       	mul	r27, r18
    365c:	90 0d       	add	r25, r0
    365e:	11 24       	eor	r1, r1
    3660:	08 95       	ret

00003662 <__udivmodsi4>:
    3662:	a1 e2       	ldi	r26, 0x21	; 33
    3664:	1a 2e       	mov	r1, r26
    3666:	aa 1b       	sub	r26, r26
    3668:	bb 1b       	sub	r27, r27
    366a:	fd 01       	movw	r30, r26
    366c:	0d c0       	rjmp	.+26     	; 0x3688 <__udivmodsi4_ep>

0000366e <__udivmodsi4_loop>:
    366e:	aa 1f       	adc	r26, r26
    3670:	bb 1f       	adc	r27, r27
    3672:	ee 1f       	adc	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	a2 17       	cp	r26, r18
    3678:	b3 07       	cpc	r27, r19
    367a:	e4 07       	cpc	r30, r20
    367c:	f5 07       	cpc	r31, r21
    367e:	20 f0       	brcs	.+8      	; 0x3688 <__udivmodsi4_ep>
    3680:	a2 1b       	sub	r26, r18
    3682:	b3 0b       	sbc	r27, r19
    3684:	e4 0b       	sbc	r30, r20
    3686:	f5 0b       	sbc	r31, r21

00003688 <__udivmodsi4_ep>:
    3688:	66 1f       	adc	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	88 1f       	adc	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	1a 94       	dec	r1
    3692:	69 f7       	brne	.-38     	; 0x366e <__udivmodsi4_loop>
    3694:	60 95       	com	r22
    3696:	70 95       	com	r23
    3698:	80 95       	com	r24
    369a:	90 95       	com	r25
    369c:	9b 01       	movw	r18, r22
    369e:	ac 01       	movw	r20, r24
    36a0:	bd 01       	movw	r22, r26
    36a2:	cf 01       	movw	r24, r30
    36a4:	08 95       	ret

000036a6 <__divmodsi4>:
    36a6:	05 2e       	mov	r0, r21
    36a8:	97 fb       	bst	r25, 7
    36aa:	16 f4       	brtc	.+4      	; 0x36b0 <__divmodsi4+0xa>
    36ac:	00 94       	com	r0
    36ae:	0f d0       	rcall	.+30     	; 0x36ce <__negsi2>
    36b0:	57 fd       	sbrc	r21, 7
    36b2:	05 d0       	rcall	.+10     	; 0x36be <__divmodsi4_neg2>
    36b4:	d6 df       	rcall	.-84     	; 0x3662 <__udivmodsi4>
    36b6:	07 fc       	sbrc	r0, 7
    36b8:	02 d0       	rcall	.+4      	; 0x36be <__divmodsi4_neg2>
    36ba:	46 f4       	brtc	.+16     	; 0x36cc <__divmodsi4_exit>
    36bc:	08 c0       	rjmp	.+16     	; 0x36ce <__negsi2>

000036be <__divmodsi4_neg2>:
    36be:	50 95       	com	r21
    36c0:	40 95       	com	r20
    36c2:	30 95       	com	r19
    36c4:	21 95       	neg	r18
    36c6:	3f 4f       	sbci	r19, 0xFF	; 255
    36c8:	4f 4f       	sbci	r20, 0xFF	; 255
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255

000036cc <__divmodsi4_exit>:
    36cc:	08 95       	ret

000036ce <__negsi2>:
    36ce:	90 95       	com	r25
    36d0:	80 95       	com	r24
    36d2:	70 95       	com	r23
    36d4:	61 95       	neg	r22
    36d6:	7f 4f       	sbci	r23, 0xFF	; 255
    36d8:	8f 4f       	sbci	r24, 0xFF	; 255
    36da:	9f 4f       	sbci	r25, 0xFF	; 255
    36dc:	08 95       	ret

000036de <__tablejump2__>:
    36de:	ee 0f       	add	r30, r30
    36e0:	ff 1f       	adc	r31, r31
    36e2:	00 24       	eor	r0, r0
    36e4:	00 1c       	adc	r0, r0
    36e6:	0b be       	out	0x3b, r0	; 59
    36e8:	07 90       	elpm	r0, Z+
    36ea:	f6 91       	elpm	r31, Z
    36ec:	e0 2d       	mov	r30, r0
    36ee:	09 94       	ijmp

000036f0 <__umulhisi3>:
    36f0:	a2 9f       	mul	r26, r18
    36f2:	b0 01       	movw	r22, r0
    36f4:	b3 9f       	mul	r27, r19
    36f6:	c0 01       	movw	r24, r0
    36f8:	a3 9f       	mul	r26, r19
    36fa:	70 0d       	add	r23, r0
    36fc:	81 1d       	adc	r24, r1
    36fe:	11 24       	eor	r1, r1
    3700:	91 1d       	adc	r25, r1
    3702:	b2 9f       	mul	r27, r18
    3704:	70 0d       	add	r23, r0
    3706:	81 1d       	adc	r24, r1
    3708:	11 24       	eor	r1, r1
    370a:	91 1d       	adc	r25, r1
    370c:	08 95       	ret

0000370e <__usmulhisi3>:
    370e:	f0 df       	rcall	.-32     	; 0x36f0 <__umulhisi3>

00003710 <__usmulhisi3_tail>:
    3710:	b7 ff       	sbrs	r27, 7
    3712:	08 95       	ret
    3714:	82 1b       	sub	r24, r18
    3716:	93 0b       	sbc	r25, r19
    3718:	08 95       	ret

0000371a <__muluhisi3>:
    371a:	ea df       	rcall	.-44     	; 0x36f0 <__umulhisi3>
    371c:	a5 9f       	mul	r26, r21
    371e:	90 0d       	add	r25, r0
    3720:	b4 9f       	mul	r27, r20
    3722:	90 0d       	add	r25, r0
    3724:	a4 9f       	mul	r26, r20
    3726:	80 0d       	add	r24, r0
    3728:	91 1d       	adc	r25, r1
    372a:	11 24       	eor	r1, r1
    372c:	08 95       	ret

0000372e <fdevopen>:
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	31 f4       	brne	.+12     	; 0x3746 <fdevopen+0x18>
    373a:	61 15       	cp	r22, r1
    373c:	71 05       	cpc	r23, r1
    373e:	19 f4       	brne	.+6      	; 0x3746 <fdevopen+0x18>
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	39 c0       	rjmp	.+114    	; 0x37b8 <fdevopen+0x8a>
    3746:	8b 01       	movw	r16, r22
    3748:	ec 01       	movw	r28, r24
    374a:	6e e0       	ldi	r22, 0x0E	; 14
    374c:	70 e0       	ldi	r23, 0x00	; 0
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	47 d2       	rcall	.+1166   	; 0x3be2 <calloc>
    3754:	fc 01       	movw	r30, r24
    3756:	89 2b       	or	r24, r25
    3758:	99 f3       	breq	.-26     	; 0x3740 <fdevopen+0x12>
    375a:	80 e8       	ldi	r24, 0x80	; 128
    375c:	83 83       	std	Z+3, r24	; 0x03
    375e:	01 15       	cp	r16, r1
    3760:	11 05       	cpc	r17, r1
    3762:	71 f0       	breq	.+28     	; 0x3780 <fdevopen+0x52>
    3764:	13 87       	std	Z+11, r17	; 0x0b
    3766:	02 87       	std	Z+10, r16	; 0x0a
    3768:	81 e8       	ldi	r24, 0x81	; 129
    376a:	83 83       	std	Z+3, r24	; 0x03
    376c:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__iob>
    3770:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <__iob+0x1>
    3774:	89 2b       	or	r24, r25
    3776:	21 f4       	brne	.+8      	; 0x3780 <fdevopen+0x52>
    3778:	f0 93 c3 09 	sts	0x09C3, r31	; 0x8009c3 <__iob+0x1>
    377c:	e0 93 c2 09 	sts	0x09C2, r30	; 0x8009c2 <__iob>
    3780:	20 97       	sbiw	r28, 0x00	; 0
    3782:	c9 f0       	breq	.+50     	; 0x37b6 <fdevopen+0x88>
    3784:	d1 87       	std	Z+9, r29	; 0x09
    3786:	c0 87       	std	Z+8, r28	; 0x08
    3788:	83 81       	ldd	r24, Z+3	; 0x03
    378a:	82 60       	ori	r24, 0x02	; 2
    378c:	83 83       	std	Z+3, r24	; 0x03
    378e:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <__iob+0x2>
    3792:	90 91 c5 09 	lds	r25, 0x09C5	; 0x8009c5 <__iob+0x3>
    3796:	89 2b       	or	r24, r25
    3798:	71 f4       	brne	.+28     	; 0x37b6 <fdevopen+0x88>
    379a:	f0 93 c5 09 	sts	0x09C5, r31	; 0x8009c5 <__iob+0x3>
    379e:	e0 93 c4 09 	sts	0x09C4, r30	; 0x8009c4 <__iob+0x2>
    37a2:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <__iob+0x4>
    37a6:	90 91 c7 09 	lds	r25, 0x09C7	; 0x8009c7 <__iob+0x5>
    37aa:	89 2b       	or	r24, r25
    37ac:	21 f4       	brne	.+8      	; 0x37b6 <fdevopen+0x88>
    37ae:	f0 93 c7 09 	sts	0x09C7, r31	; 0x8009c7 <__iob+0x5>
    37b2:	e0 93 c6 09 	sts	0x09C6, r30	; 0x8009c6 <__iob+0x4>
    37b6:	cf 01       	movw	r24, r30
    37b8:	df 91       	pop	r29
    37ba:	cf 91       	pop	r28
    37bc:	1f 91       	pop	r17
    37be:	0f 91       	pop	r16
    37c0:	08 95       	ret

000037c2 <printf>:
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	ae 01       	movw	r20, r28
    37cc:	4b 5f       	subi	r20, 0xFB	; 251
    37ce:	5f 4f       	sbci	r21, 0xFF	; 255
    37d0:	fa 01       	movw	r30, r20
    37d2:	61 91       	ld	r22, Z+
    37d4:	71 91       	ld	r23, Z+
    37d6:	af 01       	movw	r20, r30
    37d8:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <__iob+0x2>
    37dc:	90 91 c5 09 	lds	r25, 0x09C5	; 0x8009c5 <__iob+0x3>
    37e0:	03 d0       	rcall	.+6      	; 0x37e8 <vfprintf>
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	08 95       	ret

000037e8 <vfprintf>:
    37e8:	2f 92       	push	r2
    37ea:	3f 92       	push	r3
    37ec:	4f 92       	push	r4
    37ee:	5f 92       	push	r5
    37f0:	6f 92       	push	r6
    37f2:	7f 92       	push	r7
    37f4:	8f 92       	push	r8
    37f6:	9f 92       	push	r9
    37f8:	af 92       	push	r10
    37fa:	bf 92       	push	r11
    37fc:	cf 92       	push	r12
    37fe:	df 92       	push	r13
    3800:	ef 92       	push	r14
    3802:	ff 92       	push	r15
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	2b 97       	sbiw	r28, 0x0b	; 11
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	6c 01       	movw	r12, r24
    381e:	7b 01       	movw	r14, r22
    3820:	8a 01       	movw	r16, r20
    3822:	fc 01       	movw	r30, r24
    3824:	17 82       	std	Z+7, r1	; 0x07
    3826:	16 82       	std	Z+6, r1	; 0x06
    3828:	83 81       	ldd	r24, Z+3	; 0x03
    382a:	81 ff       	sbrs	r24, 1
    382c:	bf c1       	rjmp	.+894    	; 0x3bac <vfprintf+0x3c4>
    382e:	ce 01       	movw	r24, r28
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	3c 01       	movw	r6, r24
    3834:	f6 01       	movw	r30, r12
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	f7 01       	movw	r30, r14
    383a:	93 fd       	sbrc	r25, 3
    383c:	85 91       	lpm	r24, Z+
    383e:	93 ff       	sbrs	r25, 3
    3840:	81 91       	ld	r24, Z+
    3842:	7f 01       	movw	r14, r30
    3844:	88 23       	and	r24, r24
    3846:	09 f4       	brne	.+2      	; 0x384a <vfprintf+0x62>
    3848:	ad c1       	rjmp	.+858    	; 0x3ba4 <vfprintf+0x3bc>
    384a:	85 32       	cpi	r24, 0x25	; 37
    384c:	39 f4       	brne	.+14     	; 0x385c <vfprintf+0x74>
    384e:	93 fd       	sbrc	r25, 3
    3850:	85 91       	lpm	r24, Z+
    3852:	93 ff       	sbrs	r25, 3
    3854:	81 91       	ld	r24, Z+
    3856:	7f 01       	movw	r14, r30
    3858:	85 32       	cpi	r24, 0x25	; 37
    385a:	21 f4       	brne	.+8      	; 0x3864 <vfprintf+0x7c>
    385c:	b6 01       	movw	r22, r12
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	18 d3       	rcall	.+1584   	; 0x3e92 <fputc>
    3862:	e8 cf       	rjmp	.-48     	; 0x3834 <vfprintf+0x4c>
    3864:	91 2c       	mov	r9, r1
    3866:	21 2c       	mov	r2, r1
    3868:	31 2c       	mov	r3, r1
    386a:	ff e1       	ldi	r31, 0x1F	; 31
    386c:	f3 15       	cp	r31, r3
    386e:	d8 f0       	brcs	.+54     	; 0x38a6 <vfprintf+0xbe>
    3870:	8b 32       	cpi	r24, 0x2B	; 43
    3872:	79 f0       	breq	.+30     	; 0x3892 <vfprintf+0xaa>
    3874:	38 f4       	brcc	.+14     	; 0x3884 <vfprintf+0x9c>
    3876:	80 32       	cpi	r24, 0x20	; 32
    3878:	79 f0       	breq	.+30     	; 0x3898 <vfprintf+0xb0>
    387a:	83 32       	cpi	r24, 0x23	; 35
    387c:	a1 f4       	brne	.+40     	; 0x38a6 <vfprintf+0xbe>
    387e:	23 2d       	mov	r18, r3
    3880:	20 61       	ori	r18, 0x10	; 16
    3882:	1d c0       	rjmp	.+58     	; 0x38be <vfprintf+0xd6>
    3884:	8d 32       	cpi	r24, 0x2D	; 45
    3886:	61 f0       	breq	.+24     	; 0x38a0 <vfprintf+0xb8>
    3888:	80 33       	cpi	r24, 0x30	; 48
    388a:	69 f4       	brne	.+26     	; 0x38a6 <vfprintf+0xbe>
    388c:	23 2d       	mov	r18, r3
    388e:	21 60       	ori	r18, 0x01	; 1
    3890:	16 c0       	rjmp	.+44     	; 0x38be <vfprintf+0xd6>
    3892:	83 2d       	mov	r24, r3
    3894:	82 60       	ori	r24, 0x02	; 2
    3896:	38 2e       	mov	r3, r24
    3898:	e3 2d       	mov	r30, r3
    389a:	e4 60       	ori	r30, 0x04	; 4
    389c:	3e 2e       	mov	r3, r30
    389e:	2a c0       	rjmp	.+84     	; 0x38f4 <vfprintf+0x10c>
    38a0:	f3 2d       	mov	r31, r3
    38a2:	f8 60       	ori	r31, 0x08	; 8
    38a4:	1d c0       	rjmp	.+58     	; 0x38e0 <vfprintf+0xf8>
    38a6:	37 fc       	sbrc	r3, 7
    38a8:	2d c0       	rjmp	.+90     	; 0x3904 <vfprintf+0x11c>
    38aa:	20 ed       	ldi	r18, 0xD0	; 208
    38ac:	28 0f       	add	r18, r24
    38ae:	2a 30       	cpi	r18, 0x0A	; 10
    38b0:	40 f0       	brcs	.+16     	; 0x38c2 <vfprintf+0xda>
    38b2:	8e 32       	cpi	r24, 0x2E	; 46
    38b4:	b9 f4       	brne	.+46     	; 0x38e4 <vfprintf+0xfc>
    38b6:	36 fc       	sbrc	r3, 6
    38b8:	75 c1       	rjmp	.+746    	; 0x3ba4 <vfprintf+0x3bc>
    38ba:	23 2d       	mov	r18, r3
    38bc:	20 64       	ori	r18, 0x40	; 64
    38be:	32 2e       	mov	r3, r18
    38c0:	19 c0       	rjmp	.+50     	; 0x38f4 <vfprintf+0x10c>
    38c2:	36 fe       	sbrs	r3, 6
    38c4:	06 c0       	rjmp	.+12     	; 0x38d2 <vfprintf+0xea>
    38c6:	8a e0       	ldi	r24, 0x0A	; 10
    38c8:	98 9e       	mul	r9, r24
    38ca:	20 0d       	add	r18, r0
    38cc:	11 24       	eor	r1, r1
    38ce:	92 2e       	mov	r9, r18
    38d0:	11 c0       	rjmp	.+34     	; 0x38f4 <vfprintf+0x10c>
    38d2:	ea e0       	ldi	r30, 0x0A	; 10
    38d4:	2e 9e       	mul	r2, r30
    38d6:	20 0d       	add	r18, r0
    38d8:	11 24       	eor	r1, r1
    38da:	22 2e       	mov	r2, r18
    38dc:	f3 2d       	mov	r31, r3
    38de:	f0 62       	ori	r31, 0x20	; 32
    38e0:	3f 2e       	mov	r3, r31
    38e2:	08 c0       	rjmp	.+16     	; 0x38f4 <vfprintf+0x10c>
    38e4:	8c 36       	cpi	r24, 0x6C	; 108
    38e6:	21 f4       	brne	.+8      	; 0x38f0 <vfprintf+0x108>
    38e8:	83 2d       	mov	r24, r3
    38ea:	80 68       	ori	r24, 0x80	; 128
    38ec:	38 2e       	mov	r3, r24
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <vfprintf+0x10c>
    38f0:	88 36       	cpi	r24, 0x68	; 104
    38f2:	41 f4       	brne	.+16     	; 0x3904 <vfprintf+0x11c>
    38f4:	f7 01       	movw	r30, r14
    38f6:	93 fd       	sbrc	r25, 3
    38f8:	85 91       	lpm	r24, Z+
    38fa:	93 ff       	sbrs	r25, 3
    38fc:	81 91       	ld	r24, Z+
    38fe:	7f 01       	movw	r14, r30
    3900:	81 11       	cpse	r24, r1
    3902:	b3 cf       	rjmp	.-154    	; 0x386a <vfprintf+0x82>
    3904:	98 2f       	mov	r25, r24
    3906:	9f 7d       	andi	r25, 0xDF	; 223
    3908:	95 54       	subi	r25, 0x45	; 69
    390a:	93 30       	cpi	r25, 0x03	; 3
    390c:	28 f4       	brcc	.+10     	; 0x3918 <vfprintf+0x130>
    390e:	0c 5f       	subi	r16, 0xFC	; 252
    3910:	1f 4f       	sbci	r17, 0xFF	; 255
    3912:	9f e3       	ldi	r25, 0x3F	; 63
    3914:	99 83       	std	Y+1, r25	; 0x01
    3916:	0d c0       	rjmp	.+26     	; 0x3932 <vfprintf+0x14a>
    3918:	83 36       	cpi	r24, 0x63	; 99
    391a:	31 f0       	breq	.+12     	; 0x3928 <vfprintf+0x140>
    391c:	83 37       	cpi	r24, 0x73	; 115
    391e:	71 f0       	breq	.+28     	; 0x393c <vfprintf+0x154>
    3920:	83 35       	cpi	r24, 0x53	; 83
    3922:	09 f0       	breq	.+2      	; 0x3926 <vfprintf+0x13e>
    3924:	55 c0       	rjmp	.+170    	; 0x39d0 <vfprintf+0x1e8>
    3926:	20 c0       	rjmp	.+64     	; 0x3968 <vfprintf+0x180>
    3928:	f8 01       	movw	r30, r16
    392a:	80 81       	ld	r24, Z
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	0e 5f       	subi	r16, 0xFE	; 254
    3930:	1f 4f       	sbci	r17, 0xFF	; 255
    3932:	88 24       	eor	r8, r8
    3934:	83 94       	inc	r8
    3936:	91 2c       	mov	r9, r1
    3938:	53 01       	movw	r10, r6
    393a:	12 c0       	rjmp	.+36     	; 0x3960 <vfprintf+0x178>
    393c:	28 01       	movw	r4, r16
    393e:	f2 e0       	ldi	r31, 0x02	; 2
    3940:	4f 0e       	add	r4, r31
    3942:	51 1c       	adc	r5, r1
    3944:	f8 01       	movw	r30, r16
    3946:	a0 80       	ld	r10, Z
    3948:	b1 80       	ldd	r11, Z+1	; 0x01
    394a:	36 fe       	sbrs	r3, 6
    394c:	03 c0       	rjmp	.+6      	; 0x3954 <vfprintf+0x16c>
    394e:	69 2d       	mov	r22, r9
    3950:	70 e0       	ldi	r23, 0x00	; 0
    3952:	02 c0       	rjmp	.+4      	; 0x3958 <vfprintf+0x170>
    3954:	6f ef       	ldi	r22, 0xFF	; 255
    3956:	7f ef       	ldi	r23, 0xFF	; 255
    3958:	c5 01       	movw	r24, r10
    395a:	90 d2       	rcall	.+1312   	; 0x3e7c <strnlen>
    395c:	4c 01       	movw	r8, r24
    395e:	82 01       	movw	r16, r4
    3960:	f3 2d       	mov	r31, r3
    3962:	ff 77       	andi	r31, 0x7F	; 127
    3964:	3f 2e       	mov	r3, r31
    3966:	15 c0       	rjmp	.+42     	; 0x3992 <vfprintf+0x1aa>
    3968:	28 01       	movw	r4, r16
    396a:	22 e0       	ldi	r18, 0x02	; 2
    396c:	42 0e       	add	r4, r18
    396e:	51 1c       	adc	r5, r1
    3970:	f8 01       	movw	r30, r16
    3972:	a0 80       	ld	r10, Z
    3974:	b1 80       	ldd	r11, Z+1	; 0x01
    3976:	36 fe       	sbrs	r3, 6
    3978:	03 c0       	rjmp	.+6      	; 0x3980 <vfprintf+0x198>
    397a:	69 2d       	mov	r22, r9
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	02 c0       	rjmp	.+4      	; 0x3984 <vfprintf+0x19c>
    3980:	6f ef       	ldi	r22, 0xFF	; 255
    3982:	7f ef       	ldi	r23, 0xFF	; 255
    3984:	c5 01       	movw	r24, r10
    3986:	68 d2       	rcall	.+1232   	; 0x3e58 <strnlen_P>
    3988:	4c 01       	movw	r8, r24
    398a:	f3 2d       	mov	r31, r3
    398c:	f0 68       	ori	r31, 0x80	; 128
    398e:	3f 2e       	mov	r3, r31
    3990:	82 01       	movw	r16, r4
    3992:	33 fc       	sbrc	r3, 3
    3994:	19 c0       	rjmp	.+50     	; 0x39c8 <vfprintf+0x1e0>
    3996:	82 2d       	mov	r24, r2
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	88 16       	cp	r8, r24
    399c:	99 06       	cpc	r9, r25
    399e:	a0 f4       	brcc	.+40     	; 0x39c8 <vfprintf+0x1e0>
    39a0:	b6 01       	movw	r22, r12
    39a2:	80 e2       	ldi	r24, 0x20	; 32
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	75 d2       	rcall	.+1258   	; 0x3e92 <fputc>
    39a8:	2a 94       	dec	r2
    39aa:	f5 cf       	rjmp	.-22     	; 0x3996 <vfprintf+0x1ae>
    39ac:	f5 01       	movw	r30, r10
    39ae:	37 fc       	sbrc	r3, 7
    39b0:	85 91       	lpm	r24, Z+
    39b2:	37 fe       	sbrs	r3, 7
    39b4:	81 91       	ld	r24, Z+
    39b6:	5f 01       	movw	r10, r30
    39b8:	b6 01       	movw	r22, r12
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	6a d2       	rcall	.+1236   	; 0x3e92 <fputc>
    39be:	21 10       	cpse	r2, r1
    39c0:	2a 94       	dec	r2
    39c2:	21 e0       	ldi	r18, 0x01	; 1
    39c4:	82 1a       	sub	r8, r18
    39c6:	91 08       	sbc	r9, r1
    39c8:	81 14       	cp	r8, r1
    39ca:	91 04       	cpc	r9, r1
    39cc:	79 f7       	brne	.-34     	; 0x39ac <vfprintf+0x1c4>
    39ce:	e1 c0       	rjmp	.+450    	; 0x3b92 <vfprintf+0x3aa>
    39d0:	84 36       	cpi	r24, 0x64	; 100
    39d2:	11 f0       	breq	.+4      	; 0x39d8 <vfprintf+0x1f0>
    39d4:	89 36       	cpi	r24, 0x69	; 105
    39d6:	39 f5       	brne	.+78     	; 0x3a26 <vfprintf+0x23e>
    39d8:	f8 01       	movw	r30, r16
    39da:	37 fe       	sbrs	r3, 7
    39dc:	07 c0       	rjmp	.+14     	; 0x39ec <vfprintf+0x204>
    39de:	60 81       	ld	r22, Z
    39e0:	71 81       	ldd	r23, Z+1	; 0x01
    39e2:	82 81       	ldd	r24, Z+2	; 0x02
    39e4:	93 81       	ldd	r25, Z+3	; 0x03
    39e6:	0c 5f       	subi	r16, 0xFC	; 252
    39e8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ea:	08 c0       	rjmp	.+16     	; 0x39fc <vfprintf+0x214>
    39ec:	60 81       	ld	r22, Z
    39ee:	71 81       	ldd	r23, Z+1	; 0x01
    39f0:	07 2e       	mov	r0, r23
    39f2:	00 0c       	add	r0, r0
    39f4:	88 0b       	sbc	r24, r24
    39f6:	99 0b       	sbc	r25, r25
    39f8:	0e 5f       	subi	r16, 0xFE	; 254
    39fa:	1f 4f       	sbci	r17, 0xFF	; 255
    39fc:	f3 2d       	mov	r31, r3
    39fe:	ff 76       	andi	r31, 0x6F	; 111
    3a00:	3f 2e       	mov	r3, r31
    3a02:	97 ff       	sbrs	r25, 7
    3a04:	09 c0       	rjmp	.+18     	; 0x3a18 <vfprintf+0x230>
    3a06:	90 95       	com	r25
    3a08:	80 95       	com	r24
    3a0a:	70 95       	com	r23
    3a0c:	61 95       	neg	r22
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	8f 4f       	sbci	r24, 0xFF	; 255
    3a12:	9f 4f       	sbci	r25, 0xFF	; 255
    3a14:	f0 68       	ori	r31, 0x80	; 128
    3a16:	3f 2e       	mov	r3, r31
    3a18:	2a e0       	ldi	r18, 0x0A	; 10
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	a3 01       	movw	r20, r6
    3a1e:	75 d2       	rcall	.+1258   	; 0x3f0a <__ultoa_invert>
    3a20:	88 2e       	mov	r8, r24
    3a22:	86 18       	sub	r8, r6
    3a24:	44 c0       	rjmp	.+136    	; 0x3aae <vfprintf+0x2c6>
    3a26:	85 37       	cpi	r24, 0x75	; 117
    3a28:	31 f4       	brne	.+12     	; 0x3a36 <vfprintf+0x24e>
    3a2a:	23 2d       	mov	r18, r3
    3a2c:	2f 7e       	andi	r18, 0xEF	; 239
    3a2e:	b2 2e       	mov	r11, r18
    3a30:	2a e0       	ldi	r18, 0x0A	; 10
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	25 c0       	rjmp	.+74     	; 0x3a80 <vfprintf+0x298>
    3a36:	93 2d       	mov	r25, r3
    3a38:	99 7f       	andi	r25, 0xF9	; 249
    3a3a:	b9 2e       	mov	r11, r25
    3a3c:	8f 36       	cpi	r24, 0x6F	; 111
    3a3e:	c1 f0       	breq	.+48     	; 0x3a70 <vfprintf+0x288>
    3a40:	18 f4       	brcc	.+6      	; 0x3a48 <vfprintf+0x260>
    3a42:	88 35       	cpi	r24, 0x58	; 88
    3a44:	79 f0       	breq	.+30     	; 0x3a64 <vfprintf+0x27c>
    3a46:	ae c0       	rjmp	.+348    	; 0x3ba4 <vfprintf+0x3bc>
    3a48:	80 37       	cpi	r24, 0x70	; 112
    3a4a:	19 f0       	breq	.+6      	; 0x3a52 <vfprintf+0x26a>
    3a4c:	88 37       	cpi	r24, 0x78	; 120
    3a4e:	21 f0       	breq	.+8      	; 0x3a58 <vfprintf+0x270>
    3a50:	a9 c0       	rjmp	.+338    	; 0x3ba4 <vfprintf+0x3bc>
    3a52:	e9 2f       	mov	r30, r25
    3a54:	e0 61       	ori	r30, 0x10	; 16
    3a56:	be 2e       	mov	r11, r30
    3a58:	b4 fe       	sbrs	r11, 4
    3a5a:	0d c0       	rjmp	.+26     	; 0x3a76 <vfprintf+0x28e>
    3a5c:	fb 2d       	mov	r31, r11
    3a5e:	f4 60       	ori	r31, 0x04	; 4
    3a60:	bf 2e       	mov	r11, r31
    3a62:	09 c0       	rjmp	.+18     	; 0x3a76 <vfprintf+0x28e>
    3a64:	34 fe       	sbrs	r3, 4
    3a66:	0a c0       	rjmp	.+20     	; 0x3a7c <vfprintf+0x294>
    3a68:	29 2f       	mov	r18, r25
    3a6a:	26 60       	ori	r18, 0x06	; 6
    3a6c:	b2 2e       	mov	r11, r18
    3a6e:	06 c0       	rjmp	.+12     	; 0x3a7c <vfprintf+0x294>
    3a70:	28 e0       	ldi	r18, 0x08	; 8
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	05 c0       	rjmp	.+10     	; 0x3a80 <vfprintf+0x298>
    3a76:	20 e1       	ldi	r18, 0x10	; 16
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <vfprintf+0x298>
    3a7c:	20 e1       	ldi	r18, 0x10	; 16
    3a7e:	32 e0       	ldi	r19, 0x02	; 2
    3a80:	f8 01       	movw	r30, r16
    3a82:	b7 fe       	sbrs	r11, 7
    3a84:	07 c0       	rjmp	.+14     	; 0x3a94 <vfprintf+0x2ac>
    3a86:	60 81       	ld	r22, Z
    3a88:	71 81       	ldd	r23, Z+1	; 0x01
    3a8a:	82 81       	ldd	r24, Z+2	; 0x02
    3a8c:	93 81       	ldd	r25, Z+3	; 0x03
    3a8e:	0c 5f       	subi	r16, 0xFC	; 252
    3a90:	1f 4f       	sbci	r17, 0xFF	; 255
    3a92:	06 c0       	rjmp	.+12     	; 0x3aa0 <vfprintf+0x2b8>
    3a94:	60 81       	ld	r22, Z
    3a96:	71 81       	ldd	r23, Z+1	; 0x01
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 5f       	subi	r16, 0xFE	; 254
    3a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa0:	a3 01       	movw	r20, r6
    3aa2:	33 d2       	rcall	.+1126   	; 0x3f0a <__ultoa_invert>
    3aa4:	88 2e       	mov	r8, r24
    3aa6:	86 18       	sub	r8, r6
    3aa8:	fb 2d       	mov	r31, r11
    3aaa:	ff 77       	andi	r31, 0x7F	; 127
    3aac:	3f 2e       	mov	r3, r31
    3aae:	36 fe       	sbrs	r3, 6
    3ab0:	0d c0       	rjmp	.+26     	; 0x3acc <vfprintf+0x2e4>
    3ab2:	23 2d       	mov	r18, r3
    3ab4:	2e 7f       	andi	r18, 0xFE	; 254
    3ab6:	a2 2e       	mov	r10, r18
    3ab8:	89 14       	cp	r8, r9
    3aba:	58 f4       	brcc	.+22     	; 0x3ad2 <vfprintf+0x2ea>
    3abc:	34 fe       	sbrs	r3, 4
    3abe:	0b c0       	rjmp	.+22     	; 0x3ad6 <vfprintf+0x2ee>
    3ac0:	32 fc       	sbrc	r3, 2
    3ac2:	09 c0       	rjmp	.+18     	; 0x3ad6 <vfprintf+0x2ee>
    3ac4:	83 2d       	mov	r24, r3
    3ac6:	8e 7e       	andi	r24, 0xEE	; 238
    3ac8:	a8 2e       	mov	r10, r24
    3aca:	05 c0       	rjmp	.+10     	; 0x3ad6 <vfprintf+0x2ee>
    3acc:	b8 2c       	mov	r11, r8
    3ace:	a3 2c       	mov	r10, r3
    3ad0:	03 c0       	rjmp	.+6      	; 0x3ad8 <vfprintf+0x2f0>
    3ad2:	b8 2c       	mov	r11, r8
    3ad4:	01 c0       	rjmp	.+2      	; 0x3ad8 <vfprintf+0x2f0>
    3ad6:	b9 2c       	mov	r11, r9
    3ad8:	a4 fe       	sbrs	r10, 4
    3ada:	0f c0       	rjmp	.+30     	; 0x3afa <vfprintf+0x312>
    3adc:	fe 01       	movw	r30, r28
    3ade:	e8 0d       	add	r30, r8
    3ae0:	f1 1d       	adc	r31, r1
    3ae2:	80 81       	ld	r24, Z
    3ae4:	80 33       	cpi	r24, 0x30	; 48
    3ae6:	21 f4       	brne	.+8      	; 0x3af0 <vfprintf+0x308>
    3ae8:	9a 2d       	mov	r25, r10
    3aea:	99 7e       	andi	r25, 0xE9	; 233
    3aec:	a9 2e       	mov	r10, r25
    3aee:	09 c0       	rjmp	.+18     	; 0x3b02 <vfprintf+0x31a>
    3af0:	a2 fe       	sbrs	r10, 2
    3af2:	06 c0       	rjmp	.+12     	; 0x3b00 <vfprintf+0x318>
    3af4:	b3 94       	inc	r11
    3af6:	b3 94       	inc	r11
    3af8:	04 c0       	rjmp	.+8      	; 0x3b02 <vfprintf+0x31a>
    3afa:	8a 2d       	mov	r24, r10
    3afc:	86 78       	andi	r24, 0x86	; 134
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <vfprintf+0x31a>
    3b00:	b3 94       	inc	r11
    3b02:	a3 fc       	sbrc	r10, 3
    3b04:	10 c0       	rjmp	.+32     	; 0x3b26 <vfprintf+0x33e>
    3b06:	a0 fe       	sbrs	r10, 0
    3b08:	06 c0       	rjmp	.+12     	; 0x3b16 <vfprintf+0x32e>
    3b0a:	b2 14       	cp	r11, r2
    3b0c:	80 f4       	brcc	.+32     	; 0x3b2e <vfprintf+0x346>
    3b0e:	28 0c       	add	r2, r8
    3b10:	92 2c       	mov	r9, r2
    3b12:	9b 18       	sub	r9, r11
    3b14:	0d c0       	rjmp	.+26     	; 0x3b30 <vfprintf+0x348>
    3b16:	b2 14       	cp	r11, r2
    3b18:	58 f4       	brcc	.+22     	; 0x3b30 <vfprintf+0x348>
    3b1a:	b6 01       	movw	r22, r12
    3b1c:	80 e2       	ldi	r24, 0x20	; 32
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	b8 d1       	rcall	.+880    	; 0x3e92 <fputc>
    3b22:	b3 94       	inc	r11
    3b24:	f8 cf       	rjmp	.-16     	; 0x3b16 <vfprintf+0x32e>
    3b26:	b2 14       	cp	r11, r2
    3b28:	18 f4       	brcc	.+6      	; 0x3b30 <vfprintf+0x348>
    3b2a:	2b 18       	sub	r2, r11
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <vfprintf+0x34a>
    3b2e:	98 2c       	mov	r9, r8
    3b30:	21 2c       	mov	r2, r1
    3b32:	a4 fe       	sbrs	r10, 4
    3b34:	0f c0       	rjmp	.+30     	; 0x3b54 <vfprintf+0x36c>
    3b36:	b6 01       	movw	r22, r12
    3b38:	80 e3       	ldi	r24, 0x30	; 48
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	aa d1       	rcall	.+852    	; 0x3e92 <fputc>
    3b3e:	a2 fe       	sbrs	r10, 2
    3b40:	16 c0       	rjmp	.+44     	; 0x3b6e <vfprintf+0x386>
    3b42:	a1 fc       	sbrc	r10, 1
    3b44:	03 c0       	rjmp	.+6      	; 0x3b4c <vfprintf+0x364>
    3b46:	88 e7       	ldi	r24, 0x78	; 120
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <vfprintf+0x368>
    3b4c:	88 e5       	ldi	r24, 0x58	; 88
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	b6 01       	movw	r22, r12
    3b52:	0c c0       	rjmp	.+24     	; 0x3b6c <vfprintf+0x384>
    3b54:	8a 2d       	mov	r24, r10
    3b56:	86 78       	andi	r24, 0x86	; 134
    3b58:	51 f0       	breq	.+20     	; 0x3b6e <vfprintf+0x386>
    3b5a:	a1 fe       	sbrs	r10, 1
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <vfprintf+0x37a>
    3b5e:	8b e2       	ldi	r24, 0x2B	; 43
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <vfprintf+0x37c>
    3b62:	80 e2       	ldi	r24, 0x20	; 32
    3b64:	a7 fc       	sbrc	r10, 7
    3b66:	8d e2       	ldi	r24, 0x2D	; 45
    3b68:	b6 01       	movw	r22, r12
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	92 d1       	rcall	.+804    	; 0x3e92 <fputc>
    3b6e:	89 14       	cp	r8, r9
    3b70:	30 f4       	brcc	.+12     	; 0x3b7e <vfprintf+0x396>
    3b72:	b6 01       	movw	r22, r12
    3b74:	80 e3       	ldi	r24, 0x30	; 48
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	8c d1       	rcall	.+792    	; 0x3e92 <fputc>
    3b7a:	9a 94       	dec	r9
    3b7c:	f8 cf       	rjmp	.-16     	; 0x3b6e <vfprintf+0x386>
    3b7e:	8a 94       	dec	r8
    3b80:	f3 01       	movw	r30, r6
    3b82:	e8 0d       	add	r30, r8
    3b84:	f1 1d       	adc	r31, r1
    3b86:	80 81       	ld	r24, Z
    3b88:	b6 01       	movw	r22, r12
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	82 d1       	rcall	.+772    	; 0x3e92 <fputc>
    3b8e:	81 10       	cpse	r8, r1
    3b90:	f6 cf       	rjmp	.-20     	; 0x3b7e <vfprintf+0x396>
    3b92:	22 20       	and	r2, r2
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <vfprintf+0x3b0>
    3b96:	4e ce       	rjmp	.-868    	; 0x3834 <vfprintf+0x4c>
    3b98:	b6 01       	movw	r22, r12
    3b9a:	80 e2       	ldi	r24, 0x20	; 32
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	79 d1       	rcall	.+754    	; 0x3e92 <fputc>
    3ba0:	2a 94       	dec	r2
    3ba2:	f7 cf       	rjmp	.-18     	; 0x3b92 <vfprintf+0x3aa>
    3ba4:	f6 01       	movw	r30, r12
    3ba6:	86 81       	ldd	r24, Z+6	; 0x06
    3ba8:	97 81       	ldd	r25, Z+7	; 0x07
    3baa:	02 c0       	rjmp	.+4      	; 0x3bb0 <vfprintf+0x3c8>
    3bac:	8f ef       	ldi	r24, 0xFF	; 255
    3bae:	9f ef       	ldi	r25, 0xFF	; 255
    3bb0:	2b 96       	adiw	r28, 0x0b	; 11
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	df 90       	pop	r13
    3bca:	cf 90       	pop	r12
    3bcc:	bf 90       	pop	r11
    3bce:	af 90       	pop	r10
    3bd0:	9f 90       	pop	r9
    3bd2:	8f 90       	pop	r8
    3bd4:	7f 90       	pop	r7
    3bd6:	6f 90       	pop	r6
    3bd8:	5f 90       	pop	r5
    3bda:	4f 90       	pop	r4
    3bdc:	3f 90       	pop	r3
    3bde:	2f 90       	pop	r2
    3be0:	08 95       	ret

00003be2 <calloc>:
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	86 9f       	mul	r24, r22
    3bec:	80 01       	movw	r16, r0
    3bee:	87 9f       	mul	r24, r23
    3bf0:	10 0d       	add	r17, r0
    3bf2:	96 9f       	mul	r25, r22
    3bf4:	10 0d       	add	r17, r0
    3bf6:	11 24       	eor	r1, r1
    3bf8:	c8 01       	movw	r24, r16
    3bfa:	0d d0       	rcall	.+26     	; 0x3c16 <malloc>
    3bfc:	ec 01       	movw	r28, r24
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	21 f0       	breq	.+8      	; 0x3c0a <calloc+0x28>
    3c02:	a8 01       	movw	r20, r16
    3c04:	60 e0       	ldi	r22, 0x00	; 0
    3c06:	70 e0       	ldi	r23, 0x00	; 0
    3c08:	32 d1       	rcall	.+612    	; 0x3e6e <memset>
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	df 91       	pop	r29
    3c0e:	cf 91       	pop	r28
    3c10:	1f 91       	pop	r17
    3c12:	0f 91       	pop	r16
    3c14:	08 95       	ret

00003c16 <malloc>:
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	82 30       	cpi	r24, 0x02	; 2
    3c20:	91 05       	cpc	r25, r1
    3c22:	10 f4       	brcc	.+4      	; 0x3c28 <malloc+0x12>
    3c24:	82 e0       	ldi	r24, 0x02	; 2
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	e0 91 ca 09 	lds	r30, 0x09CA	; 0x8009ca <__flp>
    3c2c:	f0 91 cb 09 	lds	r31, 0x09CB	; 0x8009cb <__flp+0x1>
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	a0 e0       	ldi	r26, 0x00	; 0
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	30 97       	sbiw	r30, 0x00	; 0
    3c3a:	19 f1       	breq	.+70     	; 0x3c82 <malloc+0x6c>
    3c3c:	40 81       	ld	r20, Z
    3c3e:	51 81       	ldd	r21, Z+1	; 0x01
    3c40:	02 81       	ldd	r16, Z+2	; 0x02
    3c42:	13 81       	ldd	r17, Z+3	; 0x03
    3c44:	48 17       	cp	r20, r24
    3c46:	59 07       	cpc	r21, r25
    3c48:	c8 f0       	brcs	.+50     	; 0x3c7c <malloc+0x66>
    3c4a:	84 17       	cp	r24, r20
    3c4c:	95 07       	cpc	r25, r21
    3c4e:	69 f4       	brne	.+26     	; 0x3c6a <malloc+0x54>
    3c50:	10 97       	sbiw	r26, 0x00	; 0
    3c52:	31 f0       	breq	.+12     	; 0x3c60 <malloc+0x4a>
    3c54:	12 96       	adiw	r26, 0x02	; 2
    3c56:	0c 93       	st	X, r16
    3c58:	12 97       	sbiw	r26, 0x02	; 2
    3c5a:	13 96       	adiw	r26, 0x03	; 3
    3c5c:	1c 93       	st	X, r17
    3c5e:	27 c0       	rjmp	.+78     	; 0x3cae <malloc+0x98>
    3c60:	00 93 ca 09 	sts	0x09CA, r16	; 0x8009ca <__flp>
    3c64:	10 93 cb 09 	sts	0x09CB, r17	; 0x8009cb <__flp+0x1>
    3c68:	22 c0       	rjmp	.+68     	; 0x3cae <malloc+0x98>
    3c6a:	21 15       	cp	r18, r1
    3c6c:	31 05       	cpc	r19, r1
    3c6e:	19 f0       	breq	.+6      	; 0x3c76 <malloc+0x60>
    3c70:	42 17       	cp	r20, r18
    3c72:	53 07       	cpc	r21, r19
    3c74:	18 f4       	brcc	.+6      	; 0x3c7c <malloc+0x66>
    3c76:	9a 01       	movw	r18, r20
    3c78:	bd 01       	movw	r22, r26
    3c7a:	ef 01       	movw	r28, r30
    3c7c:	df 01       	movw	r26, r30
    3c7e:	f8 01       	movw	r30, r16
    3c80:	db cf       	rjmp	.-74     	; 0x3c38 <malloc+0x22>
    3c82:	21 15       	cp	r18, r1
    3c84:	31 05       	cpc	r19, r1
    3c86:	f9 f0       	breq	.+62     	; 0x3cc6 <malloc+0xb0>
    3c88:	28 1b       	sub	r18, r24
    3c8a:	39 0b       	sbc	r19, r25
    3c8c:	24 30       	cpi	r18, 0x04	; 4
    3c8e:	31 05       	cpc	r19, r1
    3c90:	80 f4       	brcc	.+32     	; 0x3cb2 <malloc+0x9c>
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	9b 81       	ldd	r25, Y+3	; 0x03
    3c96:	61 15       	cp	r22, r1
    3c98:	71 05       	cpc	r23, r1
    3c9a:	21 f0       	breq	.+8      	; 0x3ca4 <malloc+0x8e>
    3c9c:	fb 01       	movw	r30, r22
    3c9e:	93 83       	std	Z+3, r25	; 0x03
    3ca0:	82 83       	std	Z+2, r24	; 0x02
    3ca2:	04 c0       	rjmp	.+8      	; 0x3cac <malloc+0x96>
    3ca4:	90 93 cb 09 	sts	0x09CB, r25	; 0x8009cb <__flp+0x1>
    3ca8:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <__flp>
    3cac:	fe 01       	movw	r30, r28
    3cae:	32 96       	adiw	r30, 0x02	; 2
    3cb0:	44 c0       	rjmp	.+136    	; 0x3d3a <malloc+0x124>
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e2 0f       	add	r30, r18
    3cb6:	f3 1f       	adc	r31, r19
    3cb8:	81 93       	st	Z+, r24
    3cba:	91 93       	st	Z+, r25
    3cbc:	22 50       	subi	r18, 0x02	; 2
    3cbe:	31 09       	sbc	r19, r1
    3cc0:	39 83       	std	Y+1, r19	; 0x01
    3cc2:	28 83       	st	Y, r18
    3cc4:	3a c0       	rjmp	.+116    	; 0x3d3a <malloc+0x124>
    3cc6:	20 91 c8 09 	lds	r18, 0x09C8	; 0x8009c8 <__brkval>
    3cca:	30 91 c9 09 	lds	r19, 0x09C9	; 0x8009c9 <__brkval+0x1>
    3cce:	23 2b       	or	r18, r19
    3cd0:	41 f4       	brne	.+16     	; 0x3ce2 <malloc+0xcc>
    3cd2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3cd6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3cda:	30 93 c9 09 	sts	0x09C9, r19	; 0x8009c9 <__brkval+0x1>
    3cde:	20 93 c8 09 	sts	0x09C8, r18	; 0x8009c8 <__brkval>
    3ce2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3ce6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3cea:	21 15       	cp	r18, r1
    3cec:	31 05       	cpc	r19, r1
    3cee:	41 f4       	brne	.+16     	; 0x3d00 <malloc+0xea>
    3cf0:	2d b7       	in	r18, 0x3d	; 61
    3cf2:	3e b7       	in	r19, 0x3e	; 62
    3cf4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3cf8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3cfc:	24 1b       	sub	r18, r20
    3cfe:	35 0b       	sbc	r19, r21
    3d00:	e0 91 c8 09 	lds	r30, 0x09C8	; 0x8009c8 <__brkval>
    3d04:	f0 91 c9 09 	lds	r31, 0x09C9	; 0x8009c9 <__brkval+0x1>
    3d08:	e2 17       	cp	r30, r18
    3d0a:	f3 07       	cpc	r31, r19
    3d0c:	a0 f4       	brcc	.+40     	; 0x3d36 <malloc+0x120>
    3d0e:	2e 1b       	sub	r18, r30
    3d10:	3f 0b       	sbc	r19, r31
    3d12:	28 17       	cp	r18, r24
    3d14:	39 07       	cpc	r19, r25
    3d16:	78 f0       	brcs	.+30     	; 0x3d36 <malloc+0x120>
    3d18:	ac 01       	movw	r20, r24
    3d1a:	4e 5f       	subi	r20, 0xFE	; 254
    3d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d1e:	24 17       	cp	r18, r20
    3d20:	35 07       	cpc	r19, r21
    3d22:	48 f0       	brcs	.+18     	; 0x3d36 <malloc+0x120>
    3d24:	4e 0f       	add	r20, r30
    3d26:	5f 1f       	adc	r21, r31
    3d28:	50 93 c9 09 	sts	0x09C9, r21	; 0x8009c9 <__brkval+0x1>
    3d2c:	40 93 c8 09 	sts	0x09C8, r20	; 0x8009c8 <__brkval>
    3d30:	81 93       	st	Z+, r24
    3d32:	91 93       	st	Z+, r25
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <malloc+0x124>
    3d36:	e0 e0       	ldi	r30, 0x00	; 0
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	cf 01       	movw	r24, r30
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	08 95       	ret

00003d46 <free>:
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	09 f4       	brne	.+2      	; 0x3d50 <free+0xa>
    3d4e:	81 c0       	rjmp	.+258    	; 0x3e52 <free+0x10c>
    3d50:	fc 01       	movw	r30, r24
    3d52:	32 97       	sbiw	r30, 0x02	; 2
    3d54:	13 82       	std	Z+3, r1	; 0x03
    3d56:	12 82       	std	Z+2, r1	; 0x02
    3d58:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <__flp>
    3d5c:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <__flp+0x1>
    3d60:	10 97       	sbiw	r26, 0x00	; 0
    3d62:	81 f4       	brne	.+32     	; 0x3d84 <free+0x3e>
    3d64:	20 81       	ld	r18, Z
    3d66:	31 81       	ldd	r19, Z+1	; 0x01
    3d68:	82 0f       	add	r24, r18
    3d6a:	93 1f       	adc	r25, r19
    3d6c:	20 91 c8 09 	lds	r18, 0x09C8	; 0x8009c8 <__brkval>
    3d70:	30 91 c9 09 	lds	r19, 0x09C9	; 0x8009c9 <__brkval+0x1>
    3d74:	28 17       	cp	r18, r24
    3d76:	39 07       	cpc	r19, r25
    3d78:	51 f5       	brne	.+84     	; 0x3dce <free+0x88>
    3d7a:	f0 93 c9 09 	sts	0x09C9, r31	; 0x8009c9 <__brkval+0x1>
    3d7e:	e0 93 c8 09 	sts	0x09C8, r30	; 0x8009c8 <__brkval>
    3d82:	67 c0       	rjmp	.+206    	; 0x3e52 <free+0x10c>
    3d84:	ed 01       	movw	r28, r26
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	ce 17       	cp	r28, r30
    3d8c:	df 07       	cpc	r29, r31
    3d8e:	40 f4       	brcc	.+16     	; 0x3da0 <free+0x5a>
    3d90:	4a 81       	ldd	r20, Y+2	; 0x02
    3d92:	5b 81       	ldd	r21, Y+3	; 0x03
    3d94:	9e 01       	movw	r18, r28
    3d96:	41 15       	cp	r20, r1
    3d98:	51 05       	cpc	r21, r1
    3d9a:	f1 f0       	breq	.+60     	; 0x3dd8 <free+0x92>
    3d9c:	ea 01       	movw	r28, r20
    3d9e:	f5 cf       	rjmp	.-22     	; 0x3d8a <free+0x44>
    3da0:	d3 83       	std	Z+3, r29	; 0x03
    3da2:	c2 83       	std	Z+2, r28	; 0x02
    3da4:	40 81       	ld	r20, Z
    3da6:	51 81       	ldd	r21, Z+1	; 0x01
    3da8:	84 0f       	add	r24, r20
    3daa:	95 1f       	adc	r25, r21
    3dac:	c8 17       	cp	r28, r24
    3dae:	d9 07       	cpc	r29, r25
    3db0:	59 f4       	brne	.+22     	; 0x3dc8 <free+0x82>
    3db2:	88 81       	ld	r24, Y
    3db4:	99 81       	ldd	r25, Y+1	; 0x01
    3db6:	84 0f       	add	r24, r20
    3db8:	95 1f       	adc	r25, r21
    3dba:	02 96       	adiw	r24, 0x02	; 2
    3dbc:	91 83       	std	Z+1, r25	; 0x01
    3dbe:	80 83       	st	Z, r24
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc4:	93 83       	std	Z+3, r25	; 0x03
    3dc6:	82 83       	std	Z+2, r24	; 0x02
    3dc8:	21 15       	cp	r18, r1
    3dca:	31 05       	cpc	r19, r1
    3dcc:	29 f4       	brne	.+10     	; 0x3dd8 <free+0x92>
    3dce:	f0 93 cb 09 	sts	0x09CB, r31	; 0x8009cb <__flp+0x1>
    3dd2:	e0 93 ca 09 	sts	0x09CA, r30	; 0x8009ca <__flp>
    3dd6:	3d c0       	rjmp	.+122    	; 0x3e52 <free+0x10c>
    3dd8:	e9 01       	movw	r28, r18
    3dda:	fb 83       	std	Y+3, r31	; 0x03
    3ddc:	ea 83       	std	Y+2, r30	; 0x02
    3dde:	49 91       	ld	r20, Y+
    3de0:	59 91       	ld	r21, Y+
    3de2:	c4 0f       	add	r28, r20
    3de4:	d5 1f       	adc	r29, r21
    3de6:	ec 17       	cp	r30, r28
    3de8:	fd 07       	cpc	r31, r29
    3dea:	61 f4       	brne	.+24     	; 0x3e04 <free+0xbe>
    3dec:	80 81       	ld	r24, Z
    3dee:	91 81       	ldd	r25, Z+1	; 0x01
    3df0:	84 0f       	add	r24, r20
    3df2:	95 1f       	adc	r25, r21
    3df4:	02 96       	adiw	r24, 0x02	; 2
    3df6:	e9 01       	movw	r28, r18
    3df8:	99 83       	std	Y+1, r25	; 0x01
    3dfa:	88 83       	st	Y, r24
    3dfc:	82 81       	ldd	r24, Z+2	; 0x02
    3dfe:	93 81       	ldd	r25, Z+3	; 0x03
    3e00:	9b 83       	std	Y+3, r25	; 0x03
    3e02:	8a 83       	std	Y+2, r24	; 0x02
    3e04:	e0 e0       	ldi	r30, 0x00	; 0
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	12 96       	adiw	r26, 0x02	; 2
    3e0a:	8d 91       	ld	r24, X+
    3e0c:	9c 91       	ld	r25, X
    3e0e:	13 97       	sbiw	r26, 0x03	; 3
    3e10:	00 97       	sbiw	r24, 0x00	; 0
    3e12:	19 f0       	breq	.+6      	; 0x3e1a <free+0xd4>
    3e14:	fd 01       	movw	r30, r26
    3e16:	dc 01       	movw	r26, r24
    3e18:	f7 cf       	rjmp	.-18     	; 0x3e08 <free+0xc2>
    3e1a:	8d 91       	ld	r24, X+
    3e1c:	9c 91       	ld	r25, X
    3e1e:	11 97       	sbiw	r26, 0x01	; 1
    3e20:	9d 01       	movw	r18, r26
    3e22:	2e 5f       	subi	r18, 0xFE	; 254
    3e24:	3f 4f       	sbci	r19, 0xFF	; 255
    3e26:	82 0f       	add	r24, r18
    3e28:	93 1f       	adc	r25, r19
    3e2a:	20 91 c8 09 	lds	r18, 0x09C8	; 0x8009c8 <__brkval>
    3e2e:	30 91 c9 09 	lds	r19, 0x09C9	; 0x8009c9 <__brkval+0x1>
    3e32:	28 17       	cp	r18, r24
    3e34:	39 07       	cpc	r19, r25
    3e36:	69 f4       	brne	.+26     	; 0x3e52 <free+0x10c>
    3e38:	30 97       	sbiw	r30, 0x00	; 0
    3e3a:	29 f4       	brne	.+10     	; 0x3e46 <free+0x100>
    3e3c:	10 92 cb 09 	sts	0x09CB, r1	; 0x8009cb <__flp+0x1>
    3e40:	10 92 ca 09 	sts	0x09CA, r1	; 0x8009ca <__flp>
    3e44:	02 c0       	rjmp	.+4      	; 0x3e4a <free+0x104>
    3e46:	13 82       	std	Z+3, r1	; 0x03
    3e48:	12 82       	std	Z+2, r1	; 0x02
    3e4a:	b0 93 c9 09 	sts	0x09C9, r27	; 0x8009c9 <__brkval+0x1>
    3e4e:	a0 93 c8 09 	sts	0x09C8, r26	; 0x8009c8 <__brkval>
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	08 95       	ret

00003e58 <strnlen_P>:
    3e58:	fc 01       	movw	r30, r24
    3e5a:	05 90       	lpm	r0, Z+
    3e5c:	61 50       	subi	r22, 0x01	; 1
    3e5e:	70 40       	sbci	r23, 0x00	; 0
    3e60:	01 10       	cpse	r0, r1
    3e62:	d8 f7       	brcc	.-10     	; 0x3e5a <strnlen_P+0x2>
    3e64:	80 95       	com	r24
    3e66:	90 95       	com	r25
    3e68:	8e 0f       	add	r24, r30
    3e6a:	9f 1f       	adc	r25, r31
    3e6c:	08 95       	ret

00003e6e <memset>:
    3e6e:	dc 01       	movw	r26, r24
    3e70:	01 c0       	rjmp	.+2      	; 0x3e74 <memset+0x6>
    3e72:	6d 93       	st	X+, r22
    3e74:	41 50       	subi	r20, 0x01	; 1
    3e76:	50 40       	sbci	r21, 0x00	; 0
    3e78:	e0 f7       	brcc	.-8      	; 0x3e72 <memset+0x4>
    3e7a:	08 95       	ret

00003e7c <strnlen>:
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	61 50       	subi	r22, 0x01	; 1
    3e80:	70 40       	sbci	r23, 0x00	; 0
    3e82:	01 90       	ld	r0, Z+
    3e84:	01 10       	cpse	r0, r1
    3e86:	d8 f7       	brcc	.-10     	; 0x3e7e <strnlen+0x2>
    3e88:	80 95       	com	r24
    3e8a:	90 95       	com	r25
    3e8c:	8e 0f       	add	r24, r30
    3e8e:	9f 1f       	adc	r25, r31
    3e90:	08 95       	ret

00003e92 <fputc>:
    3e92:	0f 93       	push	r16
    3e94:	1f 93       	push	r17
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	fb 01       	movw	r30, r22
    3e9c:	23 81       	ldd	r18, Z+3	; 0x03
    3e9e:	21 fd       	sbrc	r18, 1
    3ea0:	03 c0       	rjmp	.+6      	; 0x3ea8 <fputc+0x16>
    3ea2:	8f ef       	ldi	r24, 0xFF	; 255
    3ea4:	9f ef       	ldi	r25, 0xFF	; 255
    3ea6:	2c c0       	rjmp	.+88     	; 0x3f00 <fputc+0x6e>
    3ea8:	22 ff       	sbrs	r18, 2
    3eaa:	16 c0       	rjmp	.+44     	; 0x3ed8 <fputc+0x46>
    3eac:	46 81       	ldd	r20, Z+6	; 0x06
    3eae:	57 81       	ldd	r21, Z+7	; 0x07
    3eb0:	24 81       	ldd	r18, Z+4	; 0x04
    3eb2:	35 81       	ldd	r19, Z+5	; 0x05
    3eb4:	42 17       	cp	r20, r18
    3eb6:	53 07       	cpc	r21, r19
    3eb8:	44 f4       	brge	.+16     	; 0x3eca <fputc+0x38>
    3eba:	a0 81       	ld	r26, Z
    3ebc:	b1 81       	ldd	r27, Z+1	; 0x01
    3ebe:	9d 01       	movw	r18, r26
    3ec0:	2f 5f       	subi	r18, 0xFF	; 255
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec4:	31 83       	std	Z+1, r19	; 0x01
    3ec6:	20 83       	st	Z, r18
    3ec8:	8c 93       	st	X, r24
    3eca:	26 81       	ldd	r18, Z+6	; 0x06
    3ecc:	37 81       	ldd	r19, Z+7	; 0x07
    3ece:	2f 5f       	subi	r18, 0xFF	; 255
    3ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed2:	37 83       	std	Z+7, r19	; 0x07
    3ed4:	26 83       	std	Z+6, r18	; 0x06
    3ed6:	14 c0       	rjmp	.+40     	; 0x3f00 <fputc+0x6e>
    3ed8:	8b 01       	movw	r16, r22
    3eda:	ec 01       	movw	r28, r24
    3edc:	fb 01       	movw	r30, r22
    3ede:	00 84       	ldd	r0, Z+8	; 0x08
    3ee0:	f1 85       	ldd	r31, Z+9	; 0x09
    3ee2:	e0 2d       	mov	r30, r0
    3ee4:	09 95       	icall
    3ee6:	89 2b       	or	r24, r25
    3ee8:	e1 f6       	brne	.-72     	; 0x3ea2 <fputc+0x10>
    3eea:	d8 01       	movw	r26, r16
    3eec:	16 96       	adiw	r26, 0x06	; 6
    3eee:	8d 91       	ld	r24, X+
    3ef0:	9c 91       	ld	r25, X
    3ef2:	17 97       	sbiw	r26, 0x07	; 7
    3ef4:	01 96       	adiw	r24, 0x01	; 1
    3ef6:	17 96       	adiw	r26, 0x07	; 7
    3ef8:	9c 93       	st	X, r25
    3efa:	8e 93       	st	-X, r24
    3efc:	16 97       	sbiw	r26, 0x06	; 6
    3efe:	ce 01       	movw	r24, r28
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	1f 91       	pop	r17
    3f06:	0f 91       	pop	r16
    3f08:	08 95       	ret

00003f0a <__ultoa_invert>:
    3f0a:	fa 01       	movw	r30, r20
    3f0c:	aa 27       	eor	r26, r26
    3f0e:	28 30       	cpi	r18, 0x08	; 8
    3f10:	51 f1       	breq	.+84     	; 0x3f66 <__ultoa_invert+0x5c>
    3f12:	20 31       	cpi	r18, 0x10	; 16
    3f14:	81 f1       	breq	.+96     	; 0x3f76 <__ultoa_invert+0x6c>
    3f16:	e8 94       	clt
    3f18:	6f 93       	push	r22
    3f1a:	6e 7f       	andi	r22, 0xFE	; 254
    3f1c:	6e 5f       	subi	r22, 0xFE	; 254
    3f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f20:	8f 4f       	sbci	r24, 0xFF	; 255
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	af 4f       	sbci	r26, 0xFF	; 255
    3f26:	b1 e0       	ldi	r27, 0x01	; 1
    3f28:	3e d0       	rcall	.+124    	; 0x3fa6 <__ultoa_invert+0x9c>
    3f2a:	b4 e0       	ldi	r27, 0x04	; 4
    3f2c:	3c d0       	rcall	.+120    	; 0x3fa6 <__ultoa_invert+0x9c>
    3f2e:	67 0f       	add	r22, r23
    3f30:	78 1f       	adc	r23, r24
    3f32:	89 1f       	adc	r24, r25
    3f34:	9a 1f       	adc	r25, r26
    3f36:	a1 1d       	adc	r26, r1
    3f38:	68 0f       	add	r22, r24
    3f3a:	79 1f       	adc	r23, r25
    3f3c:	8a 1f       	adc	r24, r26
    3f3e:	91 1d       	adc	r25, r1
    3f40:	a1 1d       	adc	r26, r1
    3f42:	6a 0f       	add	r22, r26
    3f44:	71 1d       	adc	r23, r1
    3f46:	81 1d       	adc	r24, r1
    3f48:	91 1d       	adc	r25, r1
    3f4a:	a1 1d       	adc	r26, r1
    3f4c:	20 d0       	rcall	.+64     	; 0x3f8e <__ultoa_invert+0x84>
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <__ultoa_invert+0x48>
    3f50:	68 94       	set
    3f52:	3f 91       	pop	r19
    3f54:	2a e0       	ldi	r18, 0x0A	; 10
    3f56:	26 9f       	mul	r18, r22
    3f58:	11 24       	eor	r1, r1
    3f5a:	30 19       	sub	r19, r0
    3f5c:	30 5d       	subi	r19, 0xD0	; 208
    3f5e:	31 93       	st	Z+, r19
    3f60:	de f6       	brtc	.-74     	; 0x3f18 <__ultoa_invert+0xe>
    3f62:	cf 01       	movw	r24, r30
    3f64:	08 95       	ret
    3f66:	46 2f       	mov	r20, r22
    3f68:	47 70       	andi	r20, 0x07	; 7
    3f6a:	40 5d       	subi	r20, 0xD0	; 208
    3f6c:	41 93       	st	Z+, r20
    3f6e:	b3 e0       	ldi	r27, 0x03	; 3
    3f70:	0f d0       	rcall	.+30     	; 0x3f90 <__ultoa_invert+0x86>
    3f72:	c9 f7       	brne	.-14     	; 0x3f66 <__ultoa_invert+0x5c>
    3f74:	f6 cf       	rjmp	.-20     	; 0x3f62 <__ultoa_invert+0x58>
    3f76:	46 2f       	mov	r20, r22
    3f78:	4f 70       	andi	r20, 0x0F	; 15
    3f7a:	40 5d       	subi	r20, 0xD0	; 208
    3f7c:	4a 33       	cpi	r20, 0x3A	; 58
    3f7e:	18 f0       	brcs	.+6      	; 0x3f86 <__ultoa_invert+0x7c>
    3f80:	49 5d       	subi	r20, 0xD9	; 217
    3f82:	31 fd       	sbrc	r19, 1
    3f84:	40 52       	subi	r20, 0x20	; 32
    3f86:	41 93       	st	Z+, r20
    3f88:	02 d0       	rcall	.+4      	; 0x3f8e <__ultoa_invert+0x84>
    3f8a:	a9 f7       	brne	.-22     	; 0x3f76 <__ultoa_invert+0x6c>
    3f8c:	ea cf       	rjmp	.-44     	; 0x3f62 <__ultoa_invert+0x58>
    3f8e:	b4 e0       	ldi	r27, 0x04	; 4
    3f90:	a6 95       	lsr	r26
    3f92:	97 95       	ror	r25
    3f94:	87 95       	ror	r24
    3f96:	77 95       	ror	r23
    3f98:	67 95       	ror	r22
    3f9a:	ba 95       	dec	r27
    3f9c:	c9 f7       	brne	.-14     	; 0x3f90 <__ultoa_invert+0x86>
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	61 05       	cpc	r22, r1
    3fa2:	71 05       	cpc	r23, r1
    3fa4:	08 95       	ret
    3fa6:	9b 01       	movw	r18, r22
    3fa8:	ac 01       	movw	r20, r24
    3faa:	0a 2e       	mov	r0, r26
    3fac:	06 94       	lsr	r0
    3fae:	57 95       	ror	r21
    3fb0:	47 95       	ror	r20
    3fb2:	37 95       	ror	r19
    3fb4:	27 95       	ror	r18
    3fb6:	ba 95       	dec	r27
    3fb8:	c9 f7       	brne	.-14     	; 0x3fac <__ultoa_invert+0xa2>
    3fba:	62 0f       	add	r22, r18
    3fbc:	73 1f       	adc	r23, r19
    3fbe:	84 1f       	adc	r24, r20
    3fc0:	95 1f       	adc	r25, r21
    3fc2:	a0 1d       	adc	r26, r0
    3fc4:	08 95       	ret

00003fc6 <_exit>:
    3fc6:	f8 94       	cli

00003fc8 <__stop_program>:
    3fc8:	ff cf       	rjmp	.-2      	; 0x3fc8 <__stop_program>
