
ControlBoxDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  000040ba  0000414e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000070d  008002c0  008002c0  0000420e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000420e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000426c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  000042ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014bba  00000000  00000000  00004e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d60  00000000  00000000  000199be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ca4  00000000  00000000  0001e71e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000205c  00000000  00000000  000243c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004515  00000000  00000000  00026420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a547  00000000  00000000  0002a935  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  00034e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	b7 c0       	rjmp	.+366    	; 0x1b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c0       	rjmp	.+362    	; 0x1b4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b3 c0       	rjmp	.+358    	; 0x1b4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__vector_23>
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__vector_25>
      68:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__vector_26>
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	a0 c0       	rjmp	.+320    	; 0x1b6 <__vector_29>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	99 c0       	rjmp	.+306    	; 0x1b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	97 c0       	rjmp	.+302    	; 0x1b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	95 c0       	rjmp	.+298    	; 0x1b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 c0       	rjmp	.+294    	; 0x1b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__vector_36>
      94:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__vector_37>
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	85 c0       	rjmp	.+266    	; 0x1b4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	83 c0       	rjmp	.+262    	; 0x1b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	81 c0       	rjmp	.+258    	; 0x1b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7f c0       	rjmp	.+254    	; 0x1b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7b c0       	rjmp	.+246    	; 0x1b4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	79 c0       	rjmp	.+242    	; 0x1b4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	77 c0       	rjmp	.+238    	; 0x1b4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	75 c0       	rjmp	.+234    	; 0x1b4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__vector_51>
      d0:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__vector_52>
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 0f 19 	jmp	0x321e	; 0x321e <__vector_54>
      dc:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__vector_55>
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d1 07       	cpc	r29, r17
      e6:	b0 07       	cpc	r27, r16
      e8:	b3 07       	cpc	r27, r19
      ea:	b6 07       	cpc	r27, r22
      ec:	b9 07       	cpc	r27, r25
      ee:	bc 07       	cpc	r27, r28
      f0:	bf 07       	cpc	r27, r31
      f2:	c2 07       	cpc	r28, r18
      f4:	c5 07       	cpc	r28, r21
      f6:	c8 07       	cpc	r28, r24
      f8:	cb 07       	cpc	r28, r27
      fa:	fe 07       	cpc	r31, r30
      fc:	dd 07       	cpc	r29, r29
      fe:	e0 07       	cpc	r30, r16
     100:	e3 07       	cpc	r30, r19
     102:	e6 07       	cpc	r30, r22
     104:	e9 07       	cpc	r30, r25
     106:	ec 07       	cpc	r30, r28
     108:	ef 07       	cpc	r30, r31
     10a:	f2 07       	cpc	r31, r18
     10c:	f5 07       	cpc	r31, r21
     10e:	f8 07       	cpc	r31, r24
     110:	9f 08       	sbc	r9, r15
     112:	7e 08       	sbc	r7, r14
     114:	81 08       	sbc	r8, r1
     116:	84 08       	sbc	r8, r4
     118:	87 08       	sbc	r8, r7
     11a:	8a 08       	sbc	r8, r10
     11c:	8d 08       	sbc	r8, r13
     11e:	90 08       	sbc	r9, r0
     120:	93 08       	sbc	r9, r3
     122:	96 08       	sbc	r9, r6
     124:	99 08       	sbc	r9, r9
     126:	d6 0e       	add	r13, r22
     128:	db 0e       	add	r13, r27
     12a:	de 0e       	add	r13, r30
     12c:	e2 0e       	add	r14, r18
     12e:	e5 0e       	add	r14, r21
     130:	f9 0e       	add	r15, r25
     132:	f0 0e       	add	r15, r16
     134:	f3 0e       	add	r15, r19
     136:	64 0f       	add	r22, r20
     138:	69 0f       	add	r22, r25
     13a:	6c 0f       	add	r22, r28
     13c:	70 0f       	add	r23, r16
     13e:	7f 0f       	add	r23, r31
     140:	73 0f       	add	r23, r19
     142:	76 0f       	add	r23, r22
     144:	79 0f       	add	r23, r25
     146:	38 17       	cp	r19, r24
     148:	3b 17       	cp	r19, r27
     14a:	3f 17       	cp	r19, r31
     14c:	43 17       	cp	r20, r19
     14e:	47 17       	cp	r20, r23
     150:	4b 17       	cp	r20, r27
     152:	4f 17       	cp	r20, r31
     154:	53 17       	cp	r21, r19

00000156 <__ctors_start>:
     156:	7c 06       	cpc	r7, r28
     158:	1c 0b       	sbc	r17, r28
     15a:	98 0d       	add	r25, r8
     15c:	4e 15       	cp	r20, r14
     15e:	43 16       	cp	r4, r19

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	d1 e2       	ldi	r29, 0x21	; 33
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b2 e0       	ldi	r27, 0x02	; 2
     172:	ea eb       	ldi	r30, 0xBA	; 186
     174:	f0 e4       	ldi	r31, 0x40	; 64
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	0b bf       	out	0x3b, r16	; 59
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x14>
     17c:	07 90       	elpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a0 3c       	cpi	r26, 0xC0	; 192
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0x10>

00000186 <__do_clear_bss>:
     186:	29 e0       	ldi	r18, 0x09	; 9
     188:	a0 ec       	ldi	r26, 0xC0	; 192
     18a:	b2 e0       	ldi	r27, 0x02	; 2
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	ad 3c       	cpi	r26, 0xCD	; 205
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	10 e0       	ldi	r17, 0x00	; 0
     198:	c0 eb       	ldi	r28, 0xB0	; 176
     19a:	d0 e0       	ldi	r29, 0x00	; 0
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	21 97       	sbiw	r28, 0x01	; 1
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__tablejump2__>
     1a6:	cb 3a       	cpi	r28, 0xAB	; 171
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 63 14 	call	0x28c6	; 0x28c6 <main>
     1b0:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <__vector_29>:
  ADMUX |= channel;
}

void AnalogInput::disable_digital_input_buffers ()
{
  DIDR0 |= 0xFF;
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	8f 93       	push	r24
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__data_end>
     1c8:	8f 91       	pop	r24
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <_ZN11AnalogInput24select_voltage_referenceEv>:
     1d4:	ec e7       	ldi	r30, 0x7C	; 124
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	80 83       	st	Z, r24
     1de:	08 95       	ret

000001e0 <_ZN11AnalogInput22switch_to_this_channelEv>:
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
     1e6:	ec e7       	ldi	r30, 0x7C	; 124
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	90 7e       	andi	r25, 0xE0	; 224
     1ee:	90 83       	st	Z, r25
     1f0:	ab e7       	ldi	r26, 0x7B	; 123
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	9c 91       	ld	r25, X
     1f6:	97 7f       	andi	r25, 0xF7	; 247
     1f8:	9c 93       	st	X, r25
     1fa:	90 81       	ld	r25, Z
     1fc:	88 81       	ld	r24, Y
     1fe:	89 2b       	or	r24, r25
     200:	80 83       	st	Z, r24
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <_ZN11AnalogInput12set_prescaleEv>:

void AnalogInput::set_prescale ()
{
  // Divide the clock speed (16MHz) by 128, to provide a frequency of
  // 125kHz to the ADC input clock.  The acceptable range is 50kHz to 200kHz.
  ADCSRA |= 0b00000111;
     208:	ea e7       	ldi	r30, 0x7A	; 122
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	87 60       	ori	r24, 0x07	; 7
     210:	80 83       	st	Z, r24
     212:	08 95       	ret

00000214 <_ZN11AnalogInput10enable_adcEv>:
}

void AnalogInput::enable_adc ()
{
  ADCSRA |= (1 << ADEN);
     214:	ea e7       	ldi	r30, 0x7A	; 122
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	80 83       	st	Z, r24
     21e:	08 95       	ret

00000220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>:
{
  conversion_complete = true;
}

void AnalogInput::initialize (ANALOG_CHANNEL channel)
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
  sei();
     226:	78 94       	sei
  this->channel = channel;
     228:	68 83       	st	Y, r22
  select_voltage_reference();
     22a:	d4 df       	rcall	.-88     	; 0x1d4 <_ZN11AnalogInput24select_voltage_referenceEv>
  ADMUX |= channel;
}

void AnalogInput::disable_digital_input_buffers ()
{
  DIDR0 |= 0xFF;
     22c:	ee e7       	ldi	r30, 0x7E	; 126
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	80 83       	st	Z, r24
{
  sei();
  this->channel = channel;
  select_voltage_reference();
  disable_digital_input_buffers();
  set_prescale();
     236:	ce 01       	movw	r24, r28
     238:	e7 df       	rcall	.-50     	; 0x208 <_ZN11AnalogInput12set_prescaleEv>
  enable_adc();
     23a:	ce 01       	movw	r24, r28
     23c:	eb df       	rcall	.-42     	; 0x214 <_ZN11AnalogInput10enable_adcEv>
     23e:	df 91       	pop	r29
}
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <_ZN11AnalogInput16start_conversionEv>:
     244:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__data_end>
}

void AnalogInput::start_conversion ()
{
  conversion_complete = false;
  ADCSRA |= (1 << ADIE); // Enable the ADC interrupt.
     248:	ea e7       	ldi	r30, 0x7A	; 122
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	88 60       	ori	r24, 0x08	; 8
     250:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADSC); // Start the conversion.
     252:	80 81       	ld	r24, Z
     254:	80 64       	ori	r24, 0x40	; 64
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <_ZN11AnalogInput4readEv>:
  set_prescale();
  enable_adc();
}

uint16_t AnalogInput::read ()
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
  switch_to_this_channel();
     260:	bf df       	rcall	.-130    	; 0x1e0 <_ZN11AnalogInput22switch_to_this_channelEv>
  start_conversion();
     262:	ce 01       	movw	r24, r28
     264:	ef df       	rcall	.-34     	; 0x244 <_ZN11AnalogInput16start_conversionEv>
  while (!conversion_complete);
     266:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     26a:	88 23       	and	r24, r24
     26c:	e1 f3       	breq	.-8      	; 0x266 <_ZN11AnalogInput4readEv+0xc>
  uint16_t low = ADCL;
     26e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  uint16_t high = ADCH;
     272:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  return low + (high << 8);
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	98 2f       	mov	r25, r24
     27a:	88 27       	eor	r24, r24
}
     27c:	82 0f       	add	r24, r18
     27e:	91 1d       	adc	r25, r1
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <_ZN14Communications10initializeEjP6Memory>:
}

long Communications::mapVal(long x, long in_min, long in_max, long out_min, long out_max)
{
	return  (x - in_min) * (out_max - out_min ) / (in_max - in_min) + out_min;
     286:	fc 01       	movw	r30, r24
     288:	51 83       	std	Z+1, r21	; 0x01
     28a:	40 83       	st	Z, r20
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 2f 18 	call	0x305e	; 0x305e <_Z16uart1_initializej>
     294:	44 e6       	ldi	r20, 0x64	; 100
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	82 ef       	ldi	r24, 0xF2	; 242
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN6Clocks11setIntervalEl>
     2a4:	4c e2       	ldi	r20, 0x2C	; 44
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	86 ee       	ldi	r24, 0xE6	; 230
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN6Clocks11setIntervalEl>
     2b4:	40 ed       	ldi	r20, 0xD0	; 208
     2b6:	57 e0       	ldi	r21, 0x07	; 7
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	8a ed       	ldi	r24, 0xDA	; 218
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN6Clocks11setIntervalEl>
     2c4:	42 ef       	ldi	r20, 0xF2	; 242
     2c6:	53 e0       	ldi	r21, 0x03	; 3
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	8e ec       	ldi	r24, 0xCE	; 206
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <_ZN6Clocks11setIntervalEl>
     2d4:	08 95       	ret

000002d6 <_ZN14Communications16check_connectionEv>:
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     2dc:	bc 01       	movw	r22, r24
     2de:	84 e0       	ldi	r24, 0x04	; 4
     2e0:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     2f4:	89 2b       	or	r24, r25
     2f6:	99 f0       	breq	.+38     	; 0x31e <_ZN14Communications16check_connectionEv+0x48>
     2f8:	8e ec       	ldi	r24, 0xCE	; 206
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN6Clocks13isDoneSpecialEv>
     300:	88 23       	and	r24, r24
     302:	49 f0       	breq	.+18     	; 0x316 <_ZN14Communications16check_connectionEv+0x40>
     304:	8a e0       	ldi	r24, 0x0A	; 10
     306:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     30a:	bc 01       	movw	r22, r24
     30c:	6f 5f       	subi	r22, 0xFF	; 255
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	8a e0       	ldi	r24, 0x0A	; 10
     312:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
     316:	8a ed       	ldi	r24, 0xDA	; 218
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	0e 94 56 15 	call	0x2aac	; 0x2aac <_ZN6Clocks5resetEv>
     31e:	8a ed       	ldi	r24, 0xDA	; 218
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <_ZN6Clocks14isDone_NoResetEv>
     326:	88 23       	and	r24, r24
     328:	49 f0       	breq	.+18     	; 0x33c <_ZN14Communications16check_connectionEv+0x66>
     32a:	8e ec       	ldi	r24, 0xCE	; 206
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	0e 94 56 15 	call	0x2aac	; 0x2aac <_ZN6Clocks5resetEv>
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	8a e0       	ldi	r24, 0x0A	; 10
     338:	0c 94 a7 14 	jmp	0x294e	; 0x294e <_ZN6Memory5writeEhj>
     33c:	08 95       	ret

0000033e <_ZN14Communications25is_emergency_stop_pressedEv>:
     33e:	80 e3       	ldi	r24, 0x30	; 48
     340:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	89 2b       	or	r24, r25
     348:	09 f4       	brne	.+2      	; 0x34c <_ZN14Communications25is_emergency_stop_pressedEv+0xe>
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	82 2f       	mov	r24, r18
     34e:	08 95       	ret

00000350 <_ZN14Communications19get_requested_macroEv>:
     350:	cf 93       	push	r28
     352:	c0 e0       	ldi	r28, 0x00	; 0
     354:	80 e4       	ldi	r24, 0x40	; 64
     356:	8c 0f       	add	r24, r28
     358:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     35c:	89 2b       	or	r24, r25
     35e:	19 f0       	breq	.+6      	; 0x366 <_ZN14Communications19get_requested_macroEv+0x16>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	8c 0f       	add	r24, r28
     364:	04 c0       	rjmp	.+8      	; 0x36e <_ZN14Communications19get_requested_macroEv+0x1e>
     366:	cf 5f       	subi	r28, 0xFF	; 255
     368:	c0 31       	cpi	r28, 0x10	; 16
     36a:	a1 f7       	brne	.-24     	; 0x354 <_ZN14Communications19get_requested_macroEv+0x4>
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh>:
     372:	cf 92       	push	r12
     374:	df 92       	push	r13
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	eb 01       	movw	r28, r22
     384:	8a 01       	movw	r16, r20
     386:	85 e2       	ldi	r24, 0x25	; 37
     388:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     38c:	25 e5       	ldi	r18, 0x55	; 85
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	dc 01       	movw	r26, r24
     392:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__usmulhisi3>
     396:	6b 01       	movw	r12, r22
     398:	7c 01       	movw	r14, r24
     39a:	99 23       	and	r25, r25
     39c:	34 f4       	brge	.+12     	; 0x3aa <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x38>
     39e:	2f ef       	ldi	r18, 0xFF	; 255
     3a0:	c2 0e       	add	r12, r18
     3a2:	23 e0       	ldi	r18, 0x03	; 3
     3a4:	d2 1e       	adc	r13, r18
     3a6:	e1 1c       	adc	r14, r1
     3a8:	f1 1c       	adc	r15, r1
     3aa:	d7 01       	movw	r26, r14
     3ac:	c6 01       	movw	r24, r12
     3ae:	07 2e       	mov	r0, r23
     3b0:	7a e0       	ldi	r23, 0x0A	; 10
     3b2:	b5 95       	asr	r27
     3b4:	a7 95       	ror	r26
     3b6:	97 95       	ror	r25
     3b8:	87 95       	ror	r24
     3ba:	7a 95       	dec	r23
     3bc:	d1 f7       	brne	.-12     	; 0x3b2 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x40>
     3be:	70 2d       	mov	r23, r0
     3c0:	6c 01       	movw	r12, r24
     3c2:	7d 01       	movw	r14, r26
     3c4:	2f e0       	ldi	r18, 0x0F	; 15
     3c6:	c2 0e       	add	r12, r18
     3c8:	d1 1c       	adc	r13, r1
     3ca:	e1 1c       	adc	r14, r1
     3cc:	f1 1c       	adc	r15, r1
     3ce:	85 e3       	ldi	r24, 0x35	; 53
     3d0:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     3d4:	89 2b       	or	r24, r25
     3d6:	31 f0       	breq	.+12     	; 0x3e4 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x72>
     3d8:	d1 94       	neg	r13
     3da:	c1 94       	neg	r12
     3dc:	d1 08       	sbc	r13, r1
     3de:	3c 2d       	mov	r19, r12
     3e0:	2d 2d       	mov	r18, r13
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x86>
     3e4:	84 e3       	ldi	r24, 0x34	; 52
     3e6:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     3ea:	89 2b       	or	r24, r25
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x82>
     3ee:	3c 2d       	mov	r19, r12
     3f0:	2d 2d       	mov	r18, r13
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh+0x86>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	d8 01       	movw	r26, r16
     3fa:	ec 91       	ld	r30, X
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	8e 0f       	add	r24, r30
     400:	8c 93       	st	X, r24
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	cf 01       	movw	r24, r30
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	e8 0f       	add	r30, r24
     40c:	f9 1f       	adc	r31, r25
     40e:	ec 0f       	add	r30, r28
     410:	fd 1f       	adc	r31, r29
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	80 83       	st	Z, r24
     416:	31 83       	std	Z+1, r19	; 0x01
     418:	22 83       	std	Z+2, r18	; 0x02
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	08 95       	ret

0000042c <_ZN14Communications22get_plow_motor_commandEP7MessageRh>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8b 01       	movw	r16, r22
     436:	ea 01       	movw	r28, r20
     438:	81 e3       	ldi	r24, 0x31	; 49
     43a:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     43e:	89 2b       	or	r24, r25
     440:	91 f4       	brne	.+36     	; 0x466 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x3a>
     442:	87 e3       	ldi	r24, 0x37	; 55
     444:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     448:	89 2b       	or	r24, r25
     44a:	81 f4       	brne	.+32     	; 0x46c <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x40>
     44c:	82 e3       	ldi	r24, 0x32	; 50
     44e:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     452:	89 2b       	or	r24, r25
     454:	71 f4       	brne	.+28     	; 0x472 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x46>
     456:	88 e3       	ldi	r24, 0x38	; 56
     458:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     45c:	89 2b       	or	r24, r25
     45e:	61 f0       	breq	.+24     	; 0x478 <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x4c>
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	94 e6       	ldi	r25, 0x64	; 100
     464:	0b c0       	rjmp	.+22     	; 0x47c <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	9c e9       	ldi	r25, 0x9C	; 156
     46a:	08 c0       	rjmp	.+16     	; 0x47c <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	9c e9       	ldi	r25, 0x9C	; 156
     470:	05 c0       	rjmp	.+10     	; 0x47c <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	94 e6       	ldi	r25, 0x64	; 100
     476:	02 c0       	rjmp	.+4      	; 0x47c <_ZN14Communications22get_plow_motor_commandEP7MessageRh+0x50>
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	e8 81       	ld	r30, Y
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	2e 0f       	add	r18, r30
     482:	28 83       	st	Y, r18
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	9f 01       	movw	r18, r30
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	e2 0f       	add	r30, r18
     48e:	f3 1f       	adc	r31, r19
     490:	e0 0f       	add	r30, r16
     492:	f1 1f       	adc	r31, r17
     494:	25 e0       	ldi	r18, 0x05	; 5
     496:	20 83       	st	Z, r18
     498:	91 83       	std	Z+1, r25	; 0x01
     49a:	82 83       	std	Z+2, r24	; 0x02
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret

000004a6 <_ZN14Communications13joystickR_msgEP7MessageRh>:
     4a6:	2f 92       	push	r2
     4a8:	3f 92       	push	r3
     4aa:	4f 92       	push	r4
     4ac:	5f 92       	push	r5
     4ae:	6f 92       	push	r6
     4b0:	7f 92       	push	r7
     4b2:	8f 92       	push	r8
     4b4:	9f 92       	push	r9
     4b6:	af 92       	push	r10
     4b8:	bf 92       	push	r11
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <_ZN14Communications13joystickR_msgEP7MessageRh+0x26>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <_ZN14Communications13joystickR_msgEP7MessageRh+0x28>
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <_ZN14Communications13joystickR_msgEP7MessageRh+0x2a>
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	8b 01       	movw	r16, r22
     4d6:	5e 83       	std	Y+6, r21	; 0x06
     4d8:	4d 83       	std	Y+5, r20	; 0x05
     4da:	80 e2       	ldi	r24, 0x20	; 32
     4dc:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     4e0:	6c 01       	movw	r12, r24
     4e2:	81 e2       	ldi	r24, 0x21	; 33
     4e4:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     4e8:	7c 01       	movw	r14, r24
     4ea:	85 e2       	ldi	r24, 0x25	; 37
     4ec:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     4f0:	25 e5       	ldi	r18, 0x55	; 85
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	dc 01       	movw	r26, r24
     4f6:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__usmulhisi3>
     4fa:	28 ee       	ldi	r18, 0xE8	; 232
     4fc:	33 e0       	ldi	r19, 0x03	; 3
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__divmodsi4>
     506:	29 01       	movw	r4, r18
     508:	3a 01       	movw	r6, r20
     50a:	8f e0       	ldi	r24, 0x0F	; 15
     50c:	48 0e       	add	r4, r24
     50e:	51 1c       	adc	r5, r1
     510:	61 1c       	adc	r6, r1
     512:	71 1c       	adc	r7, r1
     514:	97 01       	movw	r18, r14
     516:	ad ec       	ldi	r26, 0xCD	; 205
     518:	bc ec       	ldi	r27, 0xCC	; 204
     51a:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__umulhisi3>
     51e:	96 95       	lsr	r25
     520:	87 95       	ror	r24
     522:	96 95       	lsr	r25
     524:	87 95       	ror	r24
     526:	bc 01       	movw	r22, r24
     528:	64 56       	subi	r22, 0x64	; 100
     52a:	71 09       	sbc	r23, r1
     52c:	07 2e       	mov	r0, r23
     52e:	00 0c       	add	r0, r0
     530:	88 0b       	sbc	r24, r24
     532:	99 0b       	sbc	r25, r25
     534:	0e 94 87 1a 	call	0x350e	; 0x350e <__floatsisf>
     538:	4b 01       	movw	r8, r22
     53a:	5c 01       	movw	r10, r24
     53c:	96 01       	movw	r18, r12
     53e:	ad ec       	ldi	r26, 0xCD	; 205
     540:	bc ec       	ldi	r27, 0xCC	; 204
     542:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__umulhisi3>
     546:	96 95       	lsr	r25
     548:	87 95       	ror	r24
     54a:	96 95       	lsr	r25
     54c:	87 95       	ror	r24
     54e:	bc 01       	movw	r22, r24
     550:	64 56       	subi	r22, 0x64	; 100
     552:	71 09       	sbc	r23, r1
     554:	07 2e       	mov	r0, r23
     556:	00 0c       	add	r0, r0
     558:	88 0b       	sbc	r24, r24
     55a:	99 0b       	sbc	r25, r25
     55c:	0e 94 87 1a 	call	0x350e	; 0x350e <__floatsisf>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	5f e3       	ldi	r21, 0x3F	; 63
     568:	0e 94 37 1b 	call	0x366e	; 0x366e <__mulsf3>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24
     570:	9b 01       	movw	r18, r22
     572:	ac 01       	movw	r20, r24
     574:	c5 01       	movw	r24, r10
     576:	b4 01       	movw	r22, r8
     578:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
     57c:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fixsfsi>
     580:	69 83       	std	Y+1, r22	; 0x01
     582:	7a 83       	std	Y+2, r23	; 0x02
     584:	8b 83       	std	Y+3, r24	; 0x03
     586:	9c 83       	std	Y+4, r25	; 0x04
     588:	a7 01       	movw	r20, r14
     58a:	96 01       	movw	r18, r12
     58c:	c5 01       	movw	r24, r10
     58e:	b4 01       	movw	r22, r8
     590:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
     594:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fixsfsi>
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	3a 81       	ldd	r19, Y+2	; 0x02
     59c:	2c 39       	cpi	r18, 0x9C	; 156
     59e:	ef ef       	ldi	r30, 0xFF	; 255
     5a0:	3e 07       	cpc	r19, r30
     5a2:	14 f4       	brge	.+4      	; 0x5a8 <_ZN14Communications13joystickR_msgEP7MessageRh+0x102>
     5a4:	2c e9       	ldi	r18, 0x9C	; 156
     5a6:	3f ef       	ldi	r19, 0xFF	; 255
     5a8:	1b 01       	movw	r2, r22
     5aa:	6c 39       	cpi	r22, 0x9C	; 156
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	34 f4       	brge	.+12     	; 0x5bc <_ZN14Communications13joystickR_msgEP7MessageRh+0x116>
     5b0:	0f 2e       	mov	r0, r31
     5b2:	fc e9       	ldi	r31, 0x9C	; 156
     5b4:	2f 2e       	mov	r2, r31
     5b6:	33 24       	eor	r3, r3
     5b8:	3a 94       	dec	r3
     5ba:	f0 2d       	mov	r31, r0
     5bc:	88 24       	eor	r8, r8
     5be:	99 24       	eor	r9, r9
     5c0:	84 18       	sub	r8, r4
     5c2:	95 08       	sbc	r9, r5
     5c4:	09 2c       	mov	r0, r9
     5c6:	00 0c       	add	r0, r0
     5c8:	aa 08       	sbc	r10, r10
     5ca:	bb 08       	sbc	r11, r11
     5cc:	05 2c       	mov	r0, r5
     5ce:	00 0c       	add	r0, r0
     5d0:	66 08       	sbc	r6, r6
     5d2:	77 08       	sbc	r7, r7
     5d4:	48 18       	sub	r4, r8
     5d6:	59 08       	sbc	r5, r9
     5d8:	6a 08       	sbc	r6, r10
     5da:	7b 08       	sbc	r7, r11
     5dc:	25 36       	cpi	r18, 0x65	; 101
     5de:	31 05       	cpc	r19, r1
     5e0:	14 f0       	brlt	.+4      	; 0x5e6 <_ZN14Communications13joystickR_msgEP7MessageRh+0x140>
     5e2:	24 e6       	ldi	r18, 0x64	; 100
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	c9 01       	movw	r24, r18
     5e8:	33 0f       	add	r19, r19
     5ea:	aa 0b       	sbc	r26, r26
     5ec:	bb 0b       	sbc	r27, r27
     5ee:	9c 01       	movw	r18, r24
     5f0:	ad 01       	movw	r20, r26
     5f2:	2c 59       	subi	r18, 0x9C	; 156
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	4f 4f       	sbci	r20, 0xFF	; 255
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	c3 01       	movw	r24, r6
     5fc:	b2 01       	movw	r22, r4
     5fe:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__mulsi3>
     602:	28 ec       	ldi	r18, 0xC8	; 200
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__divmodsi4>
     60e:	69 01       	movw	r12, r18
     610:	7a 01       	movw	r14, r20
     612:	c8 0c       	add	r12, r8
     614:	d9 1c       	adc	r13, r9
     616:	ea 1c       	adc	r14, r10
     618:	fb 1c       	adc	r15, r11
     61a:	da 82       	std	Y+2, r13	; 0x02
     61c:	c9 82       	std	Y+1, r12	; 0x01
     61e:	91 01       	movw	r18, r2
     620:	25 36       	cpi	r18, 0x65	; 101
     622:	31 05       	cpc	r19, r1
     624:	14 f0       	brlt	.+4      	; 0x62a <_ZN14Communications13joystickR_msgEP7MessageRh+0x184>
     626:	24 e6       	ldi	r18, 0x64	; 100
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	c9 01       	movw	r24, r18
     62c:	33 0f       	add	r19, r19
     62e:	aa 0b       	sbc	r26, r26
     630:	bb 0b       	sbc	r27, r27
     632:	9c 01       	movw	r18, r24
     634:	ad 01       	movw	r20, r26
     636:	2c 59       	subi	r18, 0x9C	; 156
     638:	3f 4f       	sbci	r19, 0xFF	; 255
     63a:	4f 4f       	sbci	r20, 0xFF	; 255
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	c3 01       	movw	r24, r6
     640:	b2 01       	movw	r22, r4
     642:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__mulsi3>
     646:	28 ec       	ldi	r18, 0xC8	; 200
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__divmodsi4>
     652:	82 0e       	add	r8, r18
     654:	93 1e       	adc	r9, r19
     656:	a4 1e       	adc	r10, r20
     658:	b5 1e       	adc	r11, r21
     65a:	c4 01       	movw	r24, r8
     65c:	29 81       	ldd	r18, Y+1	; 0x01
     65e:	3a 81       	ldd	r19, Y+2	; 0x02
     660:	33 23       	and	r19, r19
     662:	5c f4       	brge	.+22     	; 0x67a <_ZN14Communications13joystickR_msgEP7MessageRh+0x1d4>
     664:	96 01       	movw	r18, r12
     666:	dd 20       	and	r13, r13
     668:	24 f4       	brge	.+8      	; 0x672 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1cc>
     66a:	22 27       	eor	r18, r18
     66c:	33 27       	eor	r19, r19
     66e:	2c 19       	sub	r18, r12
     670:	3d 09       	sbc	r19, r13
     672:	cc 24       	eor	r12, r12
     674:	dd 24       	eor	r13, r13
     676:	c2 1a       	sub	r12, r18
     678:	d3 0a       	sbc	r13, r19
     67a:	99 23       	and	r25, r25
     67c:	5c f4       	brge	.+22     	; 0x694 <_ZN14Communications13joystickR_msgEP7MessageRh+0x1ee>
     67e:	94 01       	movw	r18, r8
     680:	99 20       	and	r9, r9
     682:	24 f4       	brge	.+8      	; 0x68c <_ZN14Communications13joystickR_msgEP7MessageRh+0x1e6>
     684:	22 27       	eor	r18, r18
     686:	33 27       	eor	r19, r19
     688:	28 19       	sub	r18, r8
     68a:	39 09       	sbc	r19, r9
     68c:	88 24       	eor	r8, r8
     68e:	99 24       	eor	r9, r9
     690:	82 1a       	sub	r8, r18
     692:	93 0a       	sbc	r9, r19
     694:	ed 81       	ldd	r30, Y+5	; 0x05
     696:	fe 81       	ldd	r31, Y+6	; 0x06
     698:	80 81       	ld	r24, Z
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	fc 01       	movw	r30, r24
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	8e 0f       	add	r24, r30
     6a4:	9f 1f       	adc	r25, r31
     6a6:	f8 01       	movw	r30, r16
     6a8:	e8 0f       	add	r30, r24
     6aa:	f9 1f       	adc	r31, r25
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 83       	st	Z, r24
     6b0:	ed 81       	ldd	r30, Y+5	; 0x05
     6b2:	fe 81       	ldd	r31, Y+6	; 0x06
     6b4:	80 81       	ld	r24, Z
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	8e 0f       	add	r24, r30
     6c0:	9f 1f       	adc	r25, r31
     6c2:	f8 01       	movw	r30, r16
     6c4:	e8 0f       	add	r30, r24
     6c6:	f9 1f       	adc	r31, r25
     6c8:	c1 82       	std	Z+1, r12	; 0x01
     6ca:	ed 81       	ldd	r30, Y+5	; 0x05
     6cc:	fe 81       	ldd	r31, Y+6	; 0x06
     6ce:	80 81       	ld	r24, Z
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fc 01       	movw	r30, r24
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	8e 0f       	add	r24, r30
     6da:	9f 1f       	adc	r25, r31
     6dc:	f8 01       	movw	r30, r16
     6de:	e8 0f       	add	r30, r24
     6e0:	f9 1f       	adc	r31, r25
     6e2:	d2 82       	std	Z+2, r13	; 0x02
     6e4:	ed 81       	ldd	r30, Y+5	; 0x05
     6e6:	fe 81       	ldd	r31, Y+6	; 0x06
     6e8:	80 81       	ld	r24, Z
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	80 83       	st	Z, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	ee 0f       	add	r30, r30
     6f4:	ff 1f       	adc	r31, r31
     6f6:	8e 0f       	add	r24, r30
     6f8:	9f 1f       	adc	r25, r31
     6fa:	f8 01       	movw	r30, r16
     6fc:	e8 0f       	add	r30, r24
     6fe:	f9 1f       	adc	r31, r25
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	80 83       	st	Z, r24
     704:	ed 81       	ldd	r30, Y+5	; 0x05
     706:	fe 81       	ldd	r31, Y+6	; 0x06
     708:	80 81       	ld	r24, Z
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	8e 0f       	add	r24, r30
     714:	9f 1f       	adc	r25, r31
     716:	f8 01       	movw	r30, r16
     718:	e8 0f       	add	r30, r24
     71a:	f9 1f       	adc	r31, r25
     71c:	81 82       	std	Z+1, r8	; 0x01
     71e:	ed 81       	ldd	r30, Y+5	; 0x05
     720:	fe 81       	ldd	r31, Y+6	; 0x06
     722:	80 81       	ld	r24, Z
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	9c 01       	movw	r18, r24
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	82 0f       	add	r24, r18
     72e:	93 1f       	adc	r25, r19
     730:	f8 01       	movw	r30, r16
     732:	e8 0f       	add	r30, r24
     734:	f9 1f       	adc	r31, r25
     736:	92 82       	std	Z+2, r9	; 0x02
     738:	ed 81       	ldd	r30, Y+5	; 0x05
     73a:	fe 81       	ldd	r31, Y+6	; 0x06
     73c:	80 81       	ld	r24, Z
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	80 83       	st	Z, r24
     742:	26 96       	adiw	r28, 0x06	; 6
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	7f 90       	pop	r7
     768:	6f 90       	pop	r6
     76a:	5f 90       	pop	r5
     76c:	4f 90       	pop	r4
     76e:	3f 90       	pop	r3
     770:	2f 90       	pop	r2
     772:	08 95       	ret

00000774 <_ZN14Communications13joystickL_msgEP7MessageRh>:
     774:	8f 92       	push	r8
     776:	9f 92       	push	r9
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	8b 01       	movw	r16, r22
     78e:	ea 01       	movw	r28, r20
     790:	83 e2       	ldi	r24, 0x23	; 35
     792:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     796:	9c 01       	movw	r18, r24
     798:	ad ec       	ldi	r26, 0xCD	; 205
     79a:	bc ec       	ldi	r27, 0xCC	; 204
     79c:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__umulhisi3>
     7a0:	96 95       	lsr	r25
     7a2:	87 95       	ror	r24
     7a4:	96 95       	lsr	r25
     7a6:	87 95       	ror	r24
     7a8:	7c 01       	movw	r14, r24
     7aa:	24 e6       	ldi	r18, 0x64	; 100
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f1 08       	sbc	r15, r1
     7b0:	84 e2       	ldi	r24, 0x24	; 36
     7b2:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     7b6:	25 e5       	ldi	r18, 0x55	; 85
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	dc 01       	movw	r26, r24
     7bc:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__usmulhisi3>
     7c0:	28 ee       	ldi	r18, 0xE8	; 232
     7c2:	33 e0       	ldi	r19, 0x03	; 3
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__divmodsi4>
     7cc:	49 01       	movw	r8, r18
     7ce:	5a 01       	movw	r10, r20
     7d0:	8f e0       	ldi	r24, 0x0F	; 15
     7d2:	88 0e       	add	r8, r24
     7d4:	91 1c       	adc	r9, r1
     7d6:	a1 1c       	adc	r10, r1
     7d8:	b1 1c       	adc	r11, r1
     7da:	c7 01       	movw	r24, r14
     7dc:	2c e9       	ldi	r18, 0x9C	; 156
     7de:	e2 16       	cp	r14, r18
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	f2 06       	cpc	r15, r18
     7e4:	14 f4       	brge	.+4      	; 0x7ea <_ZN14Communications13joystickL_msgEP7MessageRh+0x76>
     7e6:	8c e9       	ldi	r24, 0x9C	; 156
     7e8:	9f ef       	ldi	r25, 0xFF	; 255
     7ea:	cc 24       	eor	r12, r12
     7ec:	dd 24       	eor	r13, r13
     7ee:	c8 18       	sub	r12, r8
     7f0:	d9 08       	sbc	r13, r9
     7f2:	0d 2c       	mov	r0, r13
     7f4:	00 0c       	add	r0, r0
     7f6:	ee 08       	sbc	r14, r14
     7f8:	ff 08       	sbc	r15, r15
     7fa:	9c 01       	movw	r18, r24
     7fc:	85 36       	cpi	r24, 0x65	; 101
     7fe:	91 05       	cpc	r25, r1
     800:	14 f0       	brlt	.+4      	; 0x806 <_ZN14Communications13joystickL_msgEP7MessageRh+0x92>
     802:	24 e6       	ldi	r18, 0x64	; 100
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	c9 01       	movw	r24, r18
     808:	33 0f       	add	r19, r19
     80a:	aa 0b       	sbc	r26, r26
     80c:	bb 0b       	sbc	r27, r27
     80e:	9c 01       	movw	r18, r24
     810:	ad 01       	movw	r20, r26
     812:	2c 59       	subi	r18, 0x9C	; 156
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	4f 4f       	sbci	r20, 0xFF	; 255
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	c4 01       	movw	r24, r8
     81c:	99 0c       	add	r9, r9
     81e:	aa 0b       	sbc	r26, r26
     820:	bb 0b       	sbc	r27, r27
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	6c 19       	sub	r22, r12
     828:	7d 09       	sbc	r23, r13
     82a:	8e 09       	sbc	r24, r14
     82c:	9f 09       	sbc	r25, r15
     82e:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__mulsi3>
     832:	28 ec       	ldi	r18, 0xC8	; 200
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__divmodsi4>
     83e:	c2 0e       	add	r12, r18
     840:	d3 1e       	adc	r13, r19
     842:	e4 1e       	adc	r14, r20
     844:	f5 1e       	adc	r15, r21
     846:	88 81       	ld	r24, Y
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	fc 01       	movw	r30, r24
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	8e 0f       	add	r24, r30
     852:	9f 1f       	adc	r25, r31
     854:	f8 01       	movw	r30, r16
     856:	e8 0f       	add	r30, r24
     858:	f9 1f       	adc	r31, r25
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	80 83       	st	Z, r24
     85e:	88 81       	ld	r24, Y
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	fc 01       	movw	r30, r24
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	8e 0f       	add	r24, r30
     86a:	9f 1f       	adc	r25, r31
     86c:	f8 01       	movw	r30, r16
     86e:	e8 0f       	add	r30, r24
     870:	f9 1f       	adc	r31, r25
     872:	c1 82       	std	Z+1, r12	; 0x01
     874:	88 81       	ld	r24, Y
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	9c 01       	movw	r18, r24
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	f8 01       	movw	r30, r16
     884:	e8 0f       	add	r30, r24
     886:	f9 1f       	adc	r31, r25
     888:	d2 82       	std	Z+2, r13	; 0x02
     88a:	88 81       	ld	r24, Y
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	88 83       	st	Y, r24
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	df 90       	pop	r13
     89e:	cf 90       	pop	r12
     8a0:	bf 90       	pop	r11
     8a2:	af 90       	pop	r10
     8a4:	9f 90       	pop	r9
     8a6:	8f 90       	pop	r8
     8a8:	08 95       	ret

000008aa <_ZN14Communications3crcEPK7Messageh>:
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <_ZN14Communications3crcEPK7Messageh+0xc>
     8b6:	1f 92       	push	r1
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	44 23       	and	r20, r20
     8be:	61 f1       	breq	.+88     	; 0x918 <_ZN14Communications3crcEPK7Messageh+0x6e>
     8c0:	a6 2f       	mov	r26, r22
     8c2:	b7 2f       	mov	r27, r23
     8c4:	f1 2c       	mov	r15, r1
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	8e 01       	movw	r16, r28
     8ca:	0c 5f       	subi	r16, 0xFC	; 252
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
     8ce:	7c e8       	ldi	r23, 0x8C	; 140
     8d0:	8c 91       	ld	r24, X
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	11 96       	adiw	r26, 0x01	; 1
     8d6:	8c 91       	ld	r24, X
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	8a 83       	std	Y+2, r24	; 0x02
     8dc:	12 96       	adiw	r26, 0x02	; 2
     8de:	8c 91       	ld	r24, X
     8e0:	12 97       	sbiw	r26, 0x02	; 2
     8e2:	8b 83       	std	Y+3, r24	; 0x03
     8e4:	fe 01       	movw	r30, r28
     8e6:	31 96       	adiw	r30, 0x01	; 1
     8e8:	51 91       	ld	r21, Z+
     8ea:	38 e0       	ldi	r19, 0x08	; 8
     8ec:	62 2f       	mov	r22, r18
     8ee:	65 27       	eor	r22, r21
     8f0:	82 2f       	mov	r24, r18
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	95 95       	asr	r25
     8f6:	87 95       	ror	r24
     8f8:	28 2f       	mov	r18, r24
     8fa:	60 ff       	sbrs	r22, 0
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <_ZN14Communications3crcEPK7Messageh+0x58>
     8fe:	27 2f       	mov	r18, r23
     900:	28 27       	eor	r18, r24
     902:	56 95       	lsr	r21
     904:	31 50       	subi	r19, 0x01	; 1
     906:	91 f7       	brne	.-28     	; 0x8ec <_ZN14Communications3crcEPK7Messageh+0x42>
     908:	e0 17       	cp	r30, r16
     90a:	f1 07       	cpc	r31, r17
     90c:	69 f7       	brne	.-38     	; 0x8e8 <_ZN14Communications3crcEPK7Messageh+0x3e>
     90e:	f3 94       	inc	r15
     910:	13 96       	adiw	r26, 0x03	; 3
     912:	4f 11       	cpse	r20, r15
     914:	dd cf       	rjmp	.-70     	; 0x8d0 <_ZN14Communications3crcEPK7Messageh+0x26>
     916:	01 c0       	rjmp	.+2      	; 0x91a <_ZN14Communications3crcEPK7Messageh+0x70>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	82 2f       	mov	r24, r18
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	08 95       	ret

0000092e <_ZN14Communications4sendEPK7Messageh>:
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	7b 01       	movw	r14, r22
     93e:	14 2f       	mov	r17, r20
     940:	b4 df       	rcall	.-152    	; 0x8aa <_ZN14Communications3crcEPK7Messageh>
     942:	d8 2e       	mov	r13, r24
     944:	86 e0       	ldi	r24, 0x06	; 6
     946:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     94a:	85 e8       	ldi	r24, 0x85	; 133
     94c:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     95c:	81 2f       	mov	r24, r17
     95e:	88 0f       	add	r24, r24
     960:	81 0f       	add	r24, r17
     962:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     966:	11 23       	and	r17, r17
     968:	c1 f0       	breq	.+48     	; 0x99a <_ZN14Communications4sendEPK7Messageh+0x6c>
     96a:	e7 01       	movw	r28, r14
     96c:	41 2f       	mov	r20, r17
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	8a 01       	movw	r16, r20
     972:	00 0f       	add	r16, r16
     974:	11 1f       	adc	r17, r17
     976:	40 0f       	add	r20, r16
     978:	51 1f       	adc	r21, r17
     97a:	87 01       	movw	r16, r14
     97c:	04 0f       	add	r16, r20
     97e:	15 1f       	adc	r17, r21
     980:	88 81       	ld	r24, Y
     982:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     992:	23 96       	adiw	r28, 0x03	; 3
     994:	c0 17       	cp	r28, r16
     996:	d1 07       	cpc	r29, r17
     998:	99 f7       	brne	.-26     	; 0x980 <_ZN14Communications4sendEPK7Messageh+0x52>
     99a:	8d 2d       	mov	r24, r13
     99c:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_Z15uart1_send_byteh>
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	08 95       	ret

000009b0 <_ZN14Communications10ping_robotEv>:
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	1f 92       	push	r1
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	8c 01       	movw	r16, r24
     9c0:	86 ee       	ldi	r24, 0xE6	; 230
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_ZN6Clocks6isDoneEv>
     9c8:	88 23       	and	r24, r24
     9ca:	51 f0       	breq	.+20     	; 0x9e0 <_ZN14Communications10ping_robotEv+0x30>
     9cc:	19 82       	std	Y+1, r1	; 0x01
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	8a 83       	std	Y+2, r24	; 0x02
     9d2:	1b 82       	std	Y+3, r1	; 0x03
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	c8 01       	movw	r24, r16
     9de:	a7 df       	rcall	.-178    	; 0x92e <_ZN14Communications4sendEPK7Messageh>
     9e0:	0f 90       	pop	r0
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <_ZN14Communications21handle_manual_commandEv>:
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	60 97       	sbiw	r28, 0x10	; 16
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	8c 01       	movw	r16, r24
     a06:	18 8a       	std	Y+16, r1	; 0x10
     a08:	ae 01       	movw	r20, r28
     a0a:	40 5f       	subi	r20, 0xF0	; 240
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	be 01       	movw	r22, r28
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	48 dd       	rcall	.-1392   	; 0x4a6 <_ZN14Communications13joystickR_msgEP7MessageRh>
     a16:	ae 01       	movw	r20, r28
     a18:	40 5f       	subi	r20, 0xF0	; 240
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	c8 01       	movw	r24, r16
     a24:	a7 de       	rcall	.-690    	; 0x774 <_ZN14Communications13joystickL_msgEP7MessageRh>
     a26:	ae 01       	movw	r20, r28
     a28:	40 5f       	subi	r20, 0xF0	; 240
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	be 01       	movw	r22, r28
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	c8 01       	movw	r24, r16
     a34:	9e dc       	rcall	.-1732   	; 0x372 <_ZN14Communications24get_bucket_motor_commandEP7MessageRh>
     a36:	ae 01       	movw	r20, r28
     a38:	40 5f       	subi	r20, 0xF0	; 240
     a3a:	5f 4f       	sbci	r21, 0xFF	; 255
     a3c:	be 01       	movw	r22, r28
     a3e:	6f 5f       	subi	r22, 0xFF	; 255
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	c8 01       	movw	r24, r16
     a44:	f3 dc       	rcall	.-1562   	; 0x42c <_ZN14Communications22get_plow_motor_commandEP7MessageRh>
     a46:	45 e0       	ldi	r20, 0x05	; 5
     a48:	be 01       	movw	r22, r28
     a4a:	6f 5f       	subi	r22, 0xFF	; 255
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	c8 01       	movw	r24, r16
     a50:	6e df       	rcall	.-292    	; 0x92e <_ZN14Communications4sendEPK7Messageh>
     a52:	60 96       	adiw	r28, 0x10	; 16
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <_ZN14Communications5parseEh>:
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <_ZN14Communications5parseEh+0x12>
     a7a:	1f 92       	push	r1
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	6c 01       	movw	r12, r24
     a82:	7c 01       	movw	r14, r24
     a84:	8b e9       	ldi	r24, 0x9B	; 155
     a86:	e8 0e       	add	r14, r24
     a88:	f1 1c       	adc	r15, r1
     a8a:	c7 01       	movw	r24, r14
     a8c:	a4 d1       	rcall	.+840    	; 0xdd6 <_ZN18FastTransferParser4pushEh>
     a8e:	c7 01       	movw	r24, r14
     a90:	02 d2       	rcall	.+1028   	; 0xe96 <_ZNK18FastTransferParser14valid_messagesEv>
     a92:	88 23       	and	r24, r24
     a94:	d1 f0       	breq	.+52     	; 0xaca <_ZN14Communications5parseEh+0x62>
     a96:	c7 01       	movw	r24, r14
     a98:	15 d2       	rcall	.+1066   	; 0xec4 <_ZNK18FastTransferParser12num_messagesEv>
     a9a:	08 2f       	mov	r16, r24
     a9c:	88 23       	and	r24, r24
     a9e:	91 f0       	breq	.+36     	; 0xac4 <_ZN14Communications5parseEh+0x5c>
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	c8 0e       	add	r12, r24
     aa6:	d1 1c       	adc	r13, r1
     aa8:	61 2f       	mov	r22, r17
     aaa:	c7 01       	movw	r24, r14
     aac:	ad d1       	rcall	.+858    	; 0xe08 <_ZNK18FastTransferParser11get_messageEh>
     aae:	69 83       	std	Y+1, r22	; 0x01
     ab0:	7a 83       	std	Y+2, r23	; 0x02
     ab2:	8b 83       	std	Y+3, r24	; 0x03
     ab4:	be 01       	movw	r22, r28
     ab6:	6f 5f       	subi	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	c6 01       	movw	r24, r12
     abc:	3b d1       	rcall	.+630    	; 0xd34 <_ZN12MessageQueue4pushERK7Message>
     abe:	1f 5f       	subi	r17, 0xFF	; 255
     ac0:	01 13       	cpse	r16, r17
     ac2:	f2 cf       	rjmp	.-28     	; 0xaa8 <_ZN14Communications5parseEh+0x40>
     ac4:	c7 01       	movw	r24, r14
     ac6:	9d d1       	rcall	.+826    	; 0xe02 <_ZN18FastTransferParser5clearEv>
     ac8:	06 c0       	rjmp	.+12     	; 0xad6 <_ZN14Communications5parseEh+0x6e>
     aca:	c7 01       	movw	r24, r14
     acc:	92 d1       	rcall	.+804    	; 0xdf2 <_ZNK18FastTransferParser7is_fullEv>
     ace:	88 23       	and	r24, r24
     ad0:	11 f0       	breq	.+4      	; 0xad6 <_ZN14Communications5parseEh+0x6e>
     ad2:	c7 01       	movw	r24, r14
     ad4:	96 d1       	rcall	.+812    	; 0xe02 <_ZN18FastTransferParser5clearEv>
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret

00000aee <_ZN14Communications4readEv>:
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ec 01       	movw	r28, r24
     af4:	0e 94 43 18 	call	0x3086	; 0x3086 <_Z15uart1_read_bytev>
     af8:	9c 01       	movw	r18, r24
     afa:	22 27       	eor	r18, r18
     afc:	23 2b       	or	r18, r19
     afe:	49 f4       	brne	.+18     	; 0xb12 <_ZN14Communications4readEv+0x24>
     b00:	68 2f       	mov	r22, r24
     b02:	ce 01       	movw	r24, r28
     b04:	b1 df       	rcall	.-158    	; 0xa68 <_ZN14Communications5parseEh>
     b06:	0e 94 43 18 	call	0x3086	; 0x3086 <_Z15uart1_read_bytev>
     b0a:	9c 01       	movw	r18, r24
     b0c:	22 27       	eor	r18, r18
     b0e:	23 2b       	or	r18, r19
     b10:	b9 f3       	breq	.-18     	; 0xb00 <_ZN14Communications4readEv+0x12>
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <_ZN14Communications7receiveEv>:
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	7c 01       	movw	r14, r24
     b28:	e2 df       	rcall	.-60     	; 0xaee <_ZN14Communications4readEv>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	e8 0e       	add	r14, r24
     b2e:	f1 1c       	adc	r15, r1
     b30:	c7 01       	movw	r24, r14
     b32:	4b d1       	rcall	.+662    	; 0xdca <_ZNK12MessageQueue5countEv>
     b34:	88 23       	and	r24, r24
     b36:	01 f1       	breq	.+64     	; 0xb78 <_ZN14Communications7receiveEv+0x60>
     b38:	c7 01       	movw	r24, r14
     b3a:	27 d1       	rcall	.+590    	; 0xd8a <_ZN12MessageQueue3popEv>
     b3c:	16 2f       	mov	r17, r22
     b3e:	d7 2e       	mov	r13, r23
     b40:	c8 2f       	mov	r28, r24
     b42:	86 2f       	mov	r24, r22
     b44:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN6Memory13valid_addressEh>
     b48:	88 23       	and	r24, r24
     b4a:	91 f3       	breq	.-28     	; 0xb30 <_ZN14Communications7receiveEv+0x18>
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	dc 2f       	mov	r29, r28
     b50:	cc 27       	eor	r28, r28
     b52:	cd 0d       	add	r28, r13
     b54:	d1 1d       	adc	r29, r1
     b56:	11 30       	cpi	r17, 0x01	; 1
     b58:	51 f4       	brne	.+20     	; 0xb6e <_ZN14Communications7receiveEv+0x56>
     b5a:	20 97       	sbiw	r28, 0x00	; 0
     b5c:	41 f4       	brne	.+16     	; 0xb6e <_ZN14Communications7receiveEv+0x56>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	81 5c       	subi	r24, 0xC1	; 193
     b6a:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
     b6e:	be 01       	movw	r22, r28
     b70:	81 2f       	mov	r24, r17
     b72:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
     b76:	dc cf       	rjmp	.-72     	; 0xb30 <_ZN14Communications7receiveEv+0x18>
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	08 95       	ret

00000b88 <_ZN14Communications21handle_emergency_stopEv>:
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	65 97       	sbiw	r28, 0x15	; 21
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8c 01       	movw	r16, r24
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	1a 82       	std	Y+2, r1	; 0x02
     ba8:	1b 82       	std	Y+3, r1	; 0x03
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	8c 83       	std	Y+4, r24	; 0x04
     bae:	1d 82       	std	Y+5, r1	; 0x05
     bb0:	1e 82       	std	Y+6, r1	; 0x06
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	8f 83       	std	Y+7, r24	; 0x07
     bb6:	18 86       	std	Y+8, r1	; 0x08
     bb8:	19 86       	std	Y+9, r1	; 0x09
     bba:	84 e0       	ldi	r24, 0x04	; 4
     bbc:	8a 87       	std	Y+10, r24	; 0x0a
     bbe:	1b 86       	std	Y+11, r1	; 0x0b
     bc0:	1c 86       	std	Y+12, r1	; 0x0c
     bc2:	85 e0       	ldi	r24, 0x05	; 5
     bc4:	8d 87       	std	Y+13, r24	; 0x0d
     bc6:	1e 86       	std	Y+14, r1	; 0x0e
     bc8:	1f 86       	std	Y+15, r1	; 0x0f
     bca:	88 e0       	ldi	r24, 0x08	; 8
     bcc:	88 8b       	std	Y+16, r24	; 0x10
     bce:	19 8a       	std	Y+17, r1	; 0x11
     bd0:	1a 8a       	std	Y+18, r1	; 0x12
     bd2:	89 e0       	ldi	r24, 0x09	; 9
     bd4:	8b 8b       	std	Y+19, r24	; 0x13
     bd6:	1c 8a       	std	Y+20, r1	; 0x14
     bd8:	1d 8a       	std	Y+21, r1	; 0x15
     bda:	47 e0       	ldi	r20, 0x07	; 7
     bdc:	be 01       	movw	r22, r28
     bde:	6f 5f       	subi	r22, 0xFF	; 255
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	c8 01       	movw	r24, r16
     be4:	a4 de       	rcall	.-696    	; 0x92e <_ZN14Communications4sendEPK7Messageh>
     be6:	c8 01       	movw	r24, r16
     be8:	97 df       	rcall	.-210    	; 0xb18 <_ZN14Communications7receiveEv>
     bea:	65 96       	adiw	r28, 0x15	; 21
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <_ZN14Communications20handle_macro_requestEh>:
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	00 d0       	rcall	.+0      	; 0xc0a <_ZN14Communications20handle_macro_requestEh+0xa>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <_ZN14Communications20handle_macro_requestEh+0xc>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <_ZN14Communications20handle_macro_requestEh+0xe>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	8c 01       	movw	r16, r24
     c14:	88 e0       	ldi	r24, 0x08	; 8
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	6a 83       	std	Y+2, r22	; 0x02
     c1a:	1b 82       	std	Y+3, r1	; 0x03
     c1c:	89 e0       	ldi	r24, 0x09	; 9
     c1e:	8c 83       	std	Y+4, r24	; 0x04
     c20:	1d 82       	std	Y+5, r1	; 0x05
     c22:	1e 82       	std	Y+6, r1	; 0x06
     c24:	c8 01       	movw	r24, r16
     c26:	82 53       	subi	r24, 0x32	; 50
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	0e 94 56 15 	call	0x2aac	; 0x2aac <_ZN6Clocks5resetEv>
     c2e:	42 e0       	ldi	r20, 0x02	; 2
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	c8 01       	movw	r24, r16
     c38:	7a de       	rcall	.-780    	; 0x92e <_ZN14Communications4sendEPK7Messageh>
     c3a:	c8 01       	movw	r24, r16
     c3c:	6d df       	rcall	.-294    	; 0xb18 <_ZN14Communications7receiveEv>
     c3e:	26 96       	adiw	r28, 0x06	; 6
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	08 95       	ret

00000c54 <_ZN14Communications8transmitEv>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	8c 01       	movw	r16, r24
     c5e:	5c df       	rcall	.-328    	; 0xb18 <_ZN14Communications7receiveEv>
     c60:	c8 01       	movw	r24, r16
     c62:	a6 de       	rcall	.-692    	; 0x9b0 <_ZN14Communications10ping_robotEv>
     c64:	c8 01       	movw	r24, r16
     c66:	6b db       	rcall	.-2346   	; 0x33e <_ZN14Communications25is_emergency_stop_pressedEv>
     c68:	81 11       	cpse	r24, r1
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <_ZN14Communications8transmitEv+0x20>
     c6c:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <E_StopPressed>
     c70:	88 23       	and	r24, r24
     c72:	b1 f0       	breq	.+44     	; 0xca0 <_ZN14Communications8transmitEv+0x4c>
     c74:	c8 01       	movw	r24, r16
     c76:	88 df       	rcall	.-240    	; 0xb88 <_ZN14Communications21handle_emergency_stopEv>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     c7e:	89 2b       	or	r24, r25
     c80:	21 f0       	breq	.+8      	; 0xc8a <_ZN14Communications8transmitEv+0x36>
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <E_StopPressed>
     c88:	32 c0       	rjmp	.+100    	; 0xcee <_ZN14Communications8transmitEv+0x9a>
     c8a:	c0 e4       	ldi	r28, 0x40	; 64
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	8c 2f       	mov	r24, r28
     c92:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
     c96:	cf 5f       	subi	r28, 0xFF	; 255
     c98:	c0 35       	cpi	r28, 0x50	; 80
     c9a:	c1 f7       	brne	.-16     	; 0xc8c <_ZN14Communications8transmitEv+0x38>
     c9c:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <E_StopPressed>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     ca6:	89 2b       	or	r24, r25
     ca8:	11 f5       	brne	.+68     	; 0xcee <_ZN14Communications8transmitEv+0x9a>
     caa:	82 ec       	ldi	r24, 0xC2	; 194
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_ZN6Clocks6isDoneEv>
     cb2:	88 23       	and	r24, r24
     cb4:	11 f0       	breq	.+4      	; 0xcba <_ZN14Communications8transmitEv+0x66>
     cb6:	c8 01       	movw	r24, r16
     cb8:	99 de       	rcall	.-718    	; 0x9ec <_ZN14Communications21handle_manual_commandEv>
     cba:	c8 01       	movw	r24, r16
     cbc:	49 db       	rcall	.-2414   	; 0x350 <_ZN14Communications19get_requested_macroEv>
     cbe:	c8 2f       	mov	r28, r24
     cc0:	88 0f       	add	r24, r24
     cc2:	dd 0b       	sbc	r29, r29
     cc4:	cf 3f       	cpi	r28, 0xFF	; 255
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	d8 07       	cpc	r29, r24
     cca:	89 f0       	breq	.+34     	; 0xcee <_ZN14Communications8transmitEv+0x9a>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
     cd2:	c8 17       	cp	r28, r24
     cd4:	d9 07       	cpc	r29, r25
     cd6:	59 f0       	breq	.+22     	; 0xcee <_ZN14Communications8transmitEv+0x9a>
     cd8:	82 ef       	ldi	r24, 0xF2	; 242
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_ZN6Clocks6isDoneEv>
     ce0:	88 23       	and	r24, r24
     ce2:	29 f0       	breq	.+10     	; 0xcee <_ZN14Communications8transmitEv+0x9a>
     ce4:	c8 01       	movw	r24, r16
     ce6:	34 db       	rcall	.-2456   	; 0x350 <_ZN14Communications19get_requested_macroEv>
     ce8:	68 2f       	mov	r22, r24
     cea:	c8 01       	movw	r24, r16
     cec:	89 df       	rcall	.-238    	; 0xc00 <_ZN14Communications20handle_macro_requestEh>
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	08 95       	ret

00000cf8 <_GLOBAL__sub_I_MACRO_RE_SEND_TIMER>:
#define when break;case
#define otherwise break;default

const UART_MODULE uart = UART_1;

Clocks MACRO_RE_SEND_TIMER, ROBOT_PING_TIMER;
     cf8:	82 ef       	ldi	r24, 0xF2	; 242
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN6ClocksC1Ev>
     d00:	86 ee       	ldi	r24, 0xE6	; 230
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN6ClocksC1Ev>
Clocks ROBOT_CONNECTED_TIMEOUT, CONNECTED_TIME;
     d08:	8a ed       	ldi	r24, 0xDA	; 218
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN6ClocksC1Ev>
     d10:	8e ec       	ldi	r24, 0xCE	; 206
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN6ClocksC1Ev>
		memory->write(CONNECTED_TIME_ELAP,0);
	}
}

// Talking to the Robot
static Clocks TransmitPeriodTimer(100);
     d18:	44 e6       	ldi	r20, 0x64	; 100
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	82 ec       	ldi	r24, 0xC2	; 194
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <_ZN6ClocksC1El>
     d28:	08 95       	ret

00000d2a <_ZN12MessageQueueC1Ev>:
}

bool MessageQueue::full () const
{
  return message_count >= SIZE;
}
     d2a:	fc 01       	movw	r30, r24
     d2c:	10 82       	st	Z, r1
     d2e:	11 82       	std	Z+1, r1	; 0x01
     d30:	12 82       	std	Z+2, r1	; 0x02
     d32:	08 95       	ret

00000d34 <_ZN12MessageQueue4pushERK7Message>:
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	dc 01       	movw	r26, r24
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	2c 91       	ld	r18, X
     d3e:	11 97       	sbiw	r26, 0x01	; 1
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	82 0f       	add	r24, r18
     d44:	11 96       	adiw	r26, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	11 97       	sbiw	r26, 0x01	; 1
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	f9 01       	movw	r30, r18
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	2e 0f       	add	r18, r30
     d58:	3f 1f       	adc	r19, r31
     d5a:	fd 01       	movw	r30, r26
     d5c:	e2 0f       	add	r30, r18
     d5e:	f3 1f       	adc	r31, r19
     d60:	eb 01       	movw	r28, r22
     d62:	28 81       	ld	r18, Y
     d64:	39 81       	ldd	r19, Y+1	; 0x01
     d66:	4a 81       	ldd	r20, Y+2	; 0x02
     d68:	20 83       	st	Z, r18
     d6a:	31 83       	std	Z+1, r19	; 0x01
     d6c:	42 83       	std	Z+2, r20	; 0x02
     d6e:	82 33       	cpi	r24, 0x32	; 50
     d70:	18 f0       	brcs	.+6      	; 0xd78 <_ZN12MessageQueue4pushERK7Message+0x44>
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	1c 92       	st	X, r1
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	12 96       	adiw	r26, 0x02	; 2
     d7a:	8c 91       	ld	r24, X
     d7c:	12 97       	sbiw	r26, 0x02	; 2
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	12 96       	adiw	r26, 0x02	; 2
     d82:	8c 93       	st	X, r24
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <_ZN12MessageQueue3popEv>:
     d8a:	dc 01       	movw	r26, r24
     d8c:	9c 91       	ld	r25, X
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	89 0f       	add	r24, r25
     d92:	29 2f       	mov	r18, r25
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	82 33       	cpi	r24, 0x32	; 50
     d98:	10 f4       	brcc	.+4      	; 0xd9e <_ZN12MessageQueue3popEv+0x14>
     d9a:	8c 93       	st	X, r24
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <_ZN12MessageQueue3popEv+0x16>
     d9e:	1c 92       	st	X, r1
     da0:	12 96       	adiw	r26, 0x02	; 2
     da2:	8c 91       	ld	r24, X
     da4:	12 97       	sbiw	r26, 0x02	; 2
     da6:	81 50       	subi	r24, 0x01	; 1
     da8:	12 96       	adiw	r26, 0x02	; 2
     daa:	8c 93       	st	X, r24
     dac:	12 97       	sbiw	r26, 0x02	; 2
     dae:	2f 5f       	subi	r18, 0xFF	; 255
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	f9 01       	movw	r30, r18
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	2e 0f       	add	r18, r30
     dba:	3f 1f       	adc	r19, r31
     dbc:	fd 01       	movw	r30, r26
     dbe:	e2 0f       	add	r30, r18
     dc0:	f3 1f       	adc	r31, r19
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	08 95       	ret

00000dca <_ZNK12MessageQueue5countEv>:

uint8_t MessageQueue::count () const
{
  return message_count;
     dca:	fc 01       	movw	r30, r24
     dcc:	82 81       	ldd	r24, Z+2	; 0x02
     dce:	08 95       	ret

00000dd0 <_ZN18FastTransferParserC1Ev>:


uint8_t FastTransferParser::size () const
{
	return index;
}
     dd0:	fc 01       	movw	r30, r24
     dd2:	12 aa       	std	Z+50, r1	; 0x32
     dd4:	08 95       	ret

00000dd6 <_ZN18FastTransferParser4pushEh>:
     dd6:	fc 01       	movw	r30, r24
     dd8:	22 a9       	ldd	r18, Z+50	; 0x32
     dda:	21 11       	cpse	r18, r1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <_ZN18FastTransferParser4pushEh+0xc>
     dde:	66 30       	cpi	r22, 0x06	; 6
     de0:	39 f4       	brne	.+14     	; 0xdf0 <_ZN18FastTransferParser4pushEh+0x1a>
     de2:	31 e0       	ldi	r19, 0x01	; 1
     de4:	32 0f       	add	r19, r18
     de6:	fc 01       	movw	r30, r24
     de8:	32 ab       	std	Z+50, r19	; 0x32
     dea:	e2 0f       	add	r30, r18
     dec:	f1 1d       	adc	r31, r1
     dee:	60 83       	st	Z, r22
     df0:	08 95       	ret

00000df2 <_ZNK18FastTransferParser7is_fullEv>:
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	fc 01       	movw	r30, r24
     df6:	82 a9       	ldd	r24, Z+50	; 0x32
     df8:	82 33       	cpi	r24, 0x32	; 50
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <_ZNK18FastTransferParser7is_fullEv+0xc>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	82 2f       	mov	r24, r18
     e00:	08 95       	ret

00000e02 <_ZN18FastTransferParser5clearEv>:

void FastTransferParser::clear ()
{
	index = 0;
     e02:	fc 01       	movw	r30, r24
     e04:	12 aa       	std	Z+50, r1	; 0x32
     e06:	08 95       	ret

00000e08 <_ZNK18FastTransferParser11get_messageEh>:

Message FastTransferParser::get_message (uint8_t i) const
{
	uint8_t index = Message::DATA_INDEX + i * Message::LENGTH;
	Message msg;
	msg.address = buffer[index];
     e08:	26 2f       	mov	r18, r22
     e0a:	22 0f       	add	r18, r18
     e0c:	62 0f       	add	r22, r18
     e0e:	6b 5f       	subi	r22, 0xFB	; 251
	msg.first = buffer[index + 1];
     e10:	fc 01       	movw	r30, r24
     e12:	e6 0f       	add	r30, r22
     e14:	f1 1d       	adc	r31, r1
     e16:	71 81       	ldd	r23, Z+1	; 0x01
	msg.second = buffer[index + 2];
	return msg;
     e18:	60 81       	ld	r22, Z
}
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	08 95       	ret

00000e1e <_ZNK18FastTransferParser10verify_crcEv>:
		return 0;
	return buffer[Message::COUNT_INDEX] / Message::LENGTH;
}

bool FastTransferParser::verify_crc () const
{
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	7c 01       	movw	r14, r24
}


uint8_t FastTransferParser::size () const
{
	return index;
     e2c:	fc 01       	movw	r30, r24
     e2e:	c2 a9       	ldd	r28, Z+50	; 0x32

bool FastTransferParser::verify_crc () const
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
     e30:	0c 2f       	mov	r16, r28
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	01 50       	subi	r16, 0x01	; 1
     e36:	11 09       	sbc	r17, r1
     e38:	06 30       	cpi	r16, 0x06	; 6
     e3a:	11 05       	cpc	r17, r1
     e3c:	ec f0       	brlt	.+58     	; 0xe78 <_ZNK18FastTransferParser10verify_crcEv+0x5a>
     e3e:	dc 01       	movw	r26, r24
     e40:	15 96       	adiw	r26, 0x05	; 5
     e42:	e8 01       	movw	r28, r16
     e44:	c8 0f       	add	r28, r24
     e46:	d9 1f       	adc	r29, r25
     e48:	90 e0       	ldi	r25, 0x00	; 0
		for (int j = 0; j < 8; ++j)
		{
			uint8_t sum = (crc ^ data) & 0x01;
			crc >>= 1;
			if (sum)
				crc ^= CRC_POLYNOMIAL;
     e4a:	ec e8       	ldi	r30, 0x8C	; 140
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
	{
		uint8_t data = buffer[i];
     e4c:	6d 91       	ld	r22, X+
     e4e:	48 e0       	ldi	r20, 0x08	; 8
     e50:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 0; j < 8; ++j)
		{
			uint8_t sum = (crc ^ data) & 0x01;
     e52:	79 2f       	mov	r23, r25
     e54:	76 27       	eor	r23, r22
			crc >>= 1;
     e56:	29 2f       	mov	r18, r25
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	35 95       	asr	r19
     e5c:	27 95       	ror	r18
     e5e:	92 2f       	mov	r25, r18
			if (sum)
     e60:	70 ff       	sbrs	r23, 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <_ZNK18FastTransferParser10verify_crcEv+0x4a>
				crc ^= CRC_POLYNOMIAL;
     e64:	9e 2f       	mov	r25, r30
     e66:	92 27       	eor	r25, r18
			data >>= 1;
     e68:	66 95       	lsr	r22
     e6a:	41 50       	subi	r20, 0x01	; 1
     e6c:	51 09       	sbc	r21, r1
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
	{
		uint8_t data = buffer[i];
		for (int j = 0; j < 8; ++j)
     e6e:	89 f7       	brne	.-30     	; 0xe52 <_ZNK18FastTransferParser10verify_crcEv+0x34>

bool FastTransferParser::verify_crc () const
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
	for (int i = 5; i < size() - 1; ++i)
     e70:	ca 17       	cp	r28, r26
     e72:	db 07       	cpc	r29, r27
     e74:	59 f7       	brne	.-42     	; 0xe4c <_ZNK18FastTransferParser10verify_crcEv+0x2e>
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <_ZNK18FastTransferParser10verify_crcEv+0x5c>
}

bool FastTransferParser::verify_crc () const
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t crc = 0;
     e78:	90 e0       	ldi	r25, 0x00	; 0
			if (sum)
				crc ^= CRC_POLYNOMIAL;
			data >>= 1;
		}
	}
	return crc == buffer[size() - 1];
     e7a:	f7 01       	movw	r30, r14
     e7c:	e0 0f       	add	r30, r16
     e7e:	f1 1f       	adc	r31, r17
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	20 81       	ld	r18, Z
     e84:	29 13       	cpse	r18, r25
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	08 95       	ret

00000e96 <_ZNK18FastTransferParser14valid_messagesEv>:
}


uint8_t FastTransferParser::size () const
{
	return index;
     e96:	fc 01       	movw	r30, r24
     e98:	22 a9       	ldd	r18, Z+50	; 0x32

bool FastTransferParser::valid_messages () const
{

	// Verify that the size is at least the minimum
	if (size() < MINIMUM_SIZE)
     e9a:	26 30       	cpi	r18, 0x06	; 6
     e9c:	68 f0       	brcs	.+26     	; 0xeb8 <_ZNK18FastTransferParser14valid_messagesEv+0x22>
		return false;

	// Verify that the receiver address matches argument
	if (buffer[2] != 0x01)
     e9e:	32 81       	ldd	r19, Z+2	; 0x02
     ea0:	31 30       	cpi	r19, 0x01	; 1
     ea2:	61 f4       	brne	.+24     	; 0xebc <_ZNK18FastTransferParser14valid_messagesEv+0x26>
		return false;

	// Verify that the overall size makes sense according to the packet size
	if (buffer[4] + MINIMUM_SIZE != size())
     ea4:	44 81       	ldd	r20, Z+4	; 0x04
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	4a 5f       	subi	r20, 0xFA	; 250
     eaa:	5f 4f       	sbci	r21, 0xFF	; 255
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	42 17       	cp	r20, r18
     eb0:	53 07       	cpc	r21, r19
     eb2:	31 f4       	brne	.+12     	; 0xec0 <_ZNK18FastTransferParser14valid_messagesEv+0x2a>
		return false;

	return verify_crc();
     eb4:	b4 cf       	rjmp	.-152    	; 0xe1e <_ZNK18FastTransferParser10verify_crcEv>
     eb6:	08 95       	ret
bool FastTransferParser::valid_messages () const
{

	// Verify that the size is at least the minimum
	if (size() < MINIMUM_SIZE)
		return false;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	08 95       	ret

	// Verify that the receiver address matches argument
	if (buffer[2] != 0x01)
		return false;
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	08 95       	ret

	// Verify that the overall size makes sense according to the packet size
	if (buffer[4] + MINIMUM_SIZE != size())
		return false;
     ec0:	80 e0       	ldi	r24, 0x00	; 0

	return verify_crc();
}
     ec2:	08 95       	ret

00000ec4 <_ZNK18FastTransferParser12num_messagesEv>:
	msg.second = buffer[index + 2];
	return msg;
}

uint8_t FastTransferParser::num_messages () const
{
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	ec 01       	movw	r28, r24
	if (!valid_messages())
     eca:	e5 df       	rcall	.-54     	; 0xe96 <_ZNK18FastTransferParser14valid_messagesEv>
     ecc:	88 23       	and	r24, r24
     ece:	39 f0       	breq	.+14     	; 0xede <_ZNK18FastTransferParser12num_messagesEv+0x1a>
		return 0;
	return buffer[Message::COUNT_INDEX] / Message::LENGTH;
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	9b ea       	ldi	r25, 0xAB	; 171
     ed4:	89 9f       	mul	r24, r25
     ed6:	81 2d       	mov	r24, r1
     ed8:	11 24       	eor	r1, r1
     eda:	86 95       	lsr	r24
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <_ZNK18FastTransferParser12num_messagesEv+0x1c>
}

uint8_t FastTransferParser::num_messages () const
{
	if (!valid_messages())
		return 0;
     ede:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[Message::COUNT_INDEX] / Message::LENGTH;
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <_ZN16ControlBoxEngine10initializeEv>:
#include <avr/interrupt.h>
#include "timer/Clock.hpp"
#include "digital_io/digital_pin.hpp"
#include "uart/uart_2.hpp"
void ControlBoxEngine::initialize ()
{
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
	sei();
     eec:	78 94       	sei
	uart2_initialize(UART2_BAUD_SELECT(115200UL, 16000000UL));  // For printf
     eee:	88 e0       	ldi	r24, 0x08	; 8
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_Z16uart2_initializej>
	memory.initialize();
     ef6:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN6Memory10initializeEv>
	inputs.initialize(&memory);
     efa:	be 01       	movw	r22, r28
     efc:	ce 01       	movw	r24, r28
     efe:	85 52       	subi	r24, 0x25	; 37
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	fe d2       	rcall	.+1532   	; 0x1500 <_ZN12InputHandler10initializeEP6Memory>
	outputs.initialize(&memory);
     f04:	be 01       	movw	r22, r28
     f06:	ce 01       	movw	r24, r28
     f08:	82 59       	subi	r24, 0x92	; 146
     f0a:	9e 4f       	sbci	r25, 0xFE	; 254
     f0c:	41 d6       	rcall	.+3202   	; 0x1b90 <_ZN13OutputHandler10initializeEP6Memory>
	communications.initialize(UART_1, &memory);
     f0e:	ae 01       	movw	r20, r28
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	b6 d9       	rcall	.-3220   	; 0x286 <_ZN14Communications10initializeEjP6Memory>


}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <_ZN16ControlBoxEngine4loopEv>:
void ControlBoxEngine::loop ()
{
     f20:	8c 01       	movw	r16, r24
	outputs.startup();
     f22:	7c 01       	movw	r14, r24
     f24:	82 e9       	ldi	r24, 0x92	; 146
     f26:	e8 1a       	sub	r14, r24
     f28:	8e ef       	ldi	r24, 0xFE	; 254
     f2a:	f8 0a       	sbc	r15, r24
     f2c:	c7 01       	movw	r24, r14
     f2e:	94 d5       	rcall	.+2856   	; 0x1a58 <_ZN13OutputHandler7startupEv>

	while (1)
	{
		communications.check_connection();
     f30:	e8 01       	movw	r28, r16
     f32:	21 96       	adiw	r28, 0x01	; 1
		inputs.poll();
     f34:	05 52       	subi	r16, 0x25	; 37
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
{
	outputs.startup();

	while (1)
	{
		communications.check_connection();
     f38:	ce 01       	movw	r24, r28
     f3a:	cd d9       	rcall	.-3174   	; 0x2d6 <_ZN14Communications16check_connectionEv>
		inputs.poll();
     f3c:	c8 01       	movw	r24, r16
     f3e:	6a d3       	rcall	.+1748   	; 0x1614 <_ZN12InputHandler4pollEv>
		communications.transmit();
     f40:	ce 01       	movw	r24, r28
     f42:	88 de       	rcall	.-752    	; 0xc54 <_ZN14Communications8transmitEv>
		outputs.refresh();
     f44:	c7 01       	movw	r24, r14
     f46:	f6 d4       	rcall	.+2540   	; 0x1934 <_ZN13OutputHandler7refreshEv>
     f48:	ce 01       	movw	r24, r28
		communications.receive();
     f4a:	e6 dd       	rcall	.-1076   	; 0xb18 <_ZN14Communications7receiveEv>
     f4c:	f5 cf       	rjmp	.-22     	; 0xf38 <_ZN16ControlBoxEngine4loopEv+0x18>

00000f4e <_ZL12DDR_REGISTER4Port>:
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	8b 30       	cpi	r24, 0x0B	; 11
}

bool DigitalPin::is_high ()
{
  return read();
}
     f52:	91 05       	cpc	r25, r1
     f54:	18 f5       	brcc	.+70     	; 0xf9c <_ZL12DDR_REGISTER4Port+0x4e>
     f56:	fc 01       	movw	r30, r24
     f58:	ee 58       	subi	r30, 0x8E	; 142
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__tablejump2__>
     f60:	84 e2       	ldi	r24, 0x24	; 36
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	08 95       	ret
     f66:	87 e2       	ldi	r24, 0x27	; 39
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	08 95       	ret
     f6c:	8a e2       	ldi	r24, 0x2A	; 42
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	08 95       	ret
     f72:	8d e2       	ldi	r24, 0x2D	; 45
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	08 95       	ret
     f78:	80 e3       	ldi	r24, 0x30	; 48
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	08 95       	ret
     f7e:	83 e3       	ldi	r24, 0x33	; 51
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	08 95       	ret
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	08 95       	ret
     f8a:	84 e0       	ldi	r24, 0x04	; 4
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	08 95       	ret
     f90:	87 e0       	ldi	r24, 0x07	; 7
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	08 95       	ret
     f96:	8a e0       	ldi	r24, 0x0A	; 10
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	08 95       	ret
     f9c:	8e ef       	ldi	r24, 0xFE	; 254
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	08 95       	ret
     fa2:	81 e2       	ldi	r24, 0x21	; 33
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	08 95       	ret

00000fa8 <_ZL13PORT_REGISTER4Port>:
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	8b 30       	cpi	r24, 0x0B	; 11
     fac:	91 05       	cpc	r25, r1
     fae:	18 f5       	brcc	.+70     	; 0xff6 <_ZL13PORT_REGISTER4Port+0x4e>
     fb0:	fc 01       	movw	r30, r24
     fb2:	e3 58       	subi	r30, 0x83	; 131
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__tablejump2__>
     fba:	85 e2       	ldi	r24, 0x25	; 37
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	08 95       	ret
     fc0:	88 e2       	ldi	r24, 0x28	; 40
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	08 95       	ret
     fc6:	8b e2       	ldi	r24, 0x2B	; 43
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	08 95       	ret
     fcc:	8e e2       	ldi	r24, 0x2E	; 46
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	08 95       	ret
     fd2:	81 e3       	ldi	r24, 0x31	; 49
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	08 95       	ret
     fd8:	84 e3       	ldi	r24, 0x34	; 52
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	08 95       	ret
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	08 95       	ret
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	08 95       	ret
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	08 95       	ret
     ff0:	8b e0       	ldi	r24, 0x0B	; 11
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	08 95       	ret
     ff6:	8e ef       	ldi	r24, 0xFE	; 254
     ff8:	92 e0       	ldi	r25, 0x02	; 2
     ffa:	08 95       	ret
     ffc:	82 e2       	ldi	r24, 0x22	; 34
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	08 95       	ret

00001002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>:
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	fc 01       	movw	r30, r24
    100c:	c6 2f       	mov	r28, r22
    100e:	d4 2f       	mov	r29, r20
    1010:	60 83       	st	Z, r22
    1012:	41 83       	std	Z+1, r20	; 0x01
    1014:	22 83       	std	Z+2, r18	; 0x02
    1016:	21 11       	cpse	r18, r1
    1018:	16 c0       	rjmp	.+44     	; 0x1046 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x44>
    101a:	86 2f       	mov	r24, r22
    101c:	98 df       	rcall	.-208    	; 0xf4e <_ZL12DDR_REGISTER4Port>
    101e:	fc 01       	movw	r30, r24
    1020:	90 81       	ld	r25, Z
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x2a>
    1028:	22 0f       	add	r18, r18
    102a:	33 1f       	adc	r19, r19
    102c:	da 95       	dec	r29
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x26>
    1030:	d2 2f       	mov	r29, r18
    1032:	d0 95       	com	r29
    1034:	9d 23       	and	r25, r29
    1036:	90 83       	st	Z, r25
    1038:	8c 2f       	mov	r24, r28
    103a:	b6 df       	rcall	.-148    	; 0xfa8 <_ZL13PORT_REGISTER4Port>
    103c:	fc 01       	movw	r30, r24
    103e:	20 81       	ld	r18, Z
    1040:	2d 23       	and	r18, r29
    1042:	20 83       	st	Z, r18
    1044:	25 c0       	rjmp	.+74     	; 0x1090 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	b1 f4       	brne	.+44     	; 0x1076 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x74>
    104a:	86 2f       	mov	r24, r22
    104c:	80 df       	rcall	.-256    	; 0xf4e <_ZL12DDR_REGISTER4Port>
    104e:	fc 01       	movw	r30, r24
    1050:	90 81       	ld	r25, Z
    1052:	01 e0       	ldi	r16, 0x01	; 1
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x5a>
    1058:	00 0f       	add	r16, r16
    105a:	11 1f       	adc	r17, r17
    105c:	da 95       	dec	r29
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x56>
    1060:	80 2f       	mov	r24, r16
    1062:	80 95       	com	r24
    1064:	98 23       	and	r25, r24
    1066:	90 83       	st	Z, r25
    1068:	8c 2f       	mov	r24, r28
    106a:	9e df       	rcall	.-196    	; 0xfa8 <_ZL13PORT_REGISTER4Port>
    106c:	fc 01       	movw	r30, r24
    106e:	20 81       	ld	r18, Z
    1070:	02 2b       	or	r16, r18
    1072:	00 83       	st	Z, r16
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
    1076:	86 2f       	mov	r24, r22
    1078:	6a df       	rcall	.-300    	; 0xf4e <_ZL12DDR_REGISTER4Port>
    107a:	fc 01       	movw	r30, r24
    107c:	40 81       	ld	r20, Z
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x86>
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	da 95       	dec	r29
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x82>
    108c:	24 2b       	or	r18, r20
    108e:	20 83       	st	Z, r18
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <_ZN10DigitalPin5writeEb>:
    109a:	cf 93       	push	r28
    109c:	fc 01       	movw	r30, r24
    109e:	c1 81       	ldd	r28, Z+1	; 0x01
    10a0:	80 81       	ld	r24, Z
    10a2:	66 23       	and	r22, r22
    10a4:	69 f0       	breq	.+26     	; 0x10c0 <_ZN10DigitalPin5writeEb+0x26>
    10a6:	80 df       	rcall	.-256    	; 0xfa8 <_ZL13PORT_REGISTER4Port>
    10a8:	fc 01       	movw	r30, r24
    10aa:	40 81       	ld	r20, Z
    10ac:	21 e0       	ldi	r18, 0x01	; 1
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <_ZN10DigitalPin5writeEb+0x1c>
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	ca 95       	dec	r28
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <_ZN10DigitalPin5writeEb+0x18>
    10ba:	24 2b       	or	r18, r20
    10bc:	20 83       	st	Z, r18
    10be:	0d c0       	rjmp	.+26     	; 0x10da <_ZN10DigitalPin5writeEb+0x40>
    10c0:	73 df       	rcall	.-282    	; 0xfa8 <_ZL13PORT_REGISTER4Port>
    10c2:	fc 01       	movw	r30, r24
    10c4:	90 81       	ld	r25, Z
    10c6:	21 e0       	ldi	r18, 0x01	; 1
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <_ZN10DigitalPin5writeEb+0x36>
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	ca 95       	dec	r28
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <_ZN10DigitalPin5writeEb+0x32>
    10d4:	20 95       	com	r18
    10d6:	29 23       	and	r18, r25
    10d8:	20 83       	st	Z, r18
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <_ZN10DigitalPin4readEv>:
    10de:	dc 01       	movw	r26, r24
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	2c 91       	ld	r18, X
    10e4:	11 97       	sbiw	r26, 0x01	; 1
    10e6:	ec 91       	ld	r30, X
    10e8:	8e 2f       	mov	r24, r30
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	8b 30       	cpi	r24, 0x0B	; 11
    10ee:	91 05       	cpc	r25, r1
    10f0:	18 f5       	brcc	.+70     	; 0x1138 <_ZN10DigitalPin4readEv+0x5a>
    10f2:	fc 01       	movw	r30, r24
    10f4:	e8 57       	subi	r30, 0x78	; 120
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__tablejump2__>
    10fc:	e3 e2       	ldi	r30, 0x23	; 35
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	20 c0       	rjmp	.+64     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    1102:	e6 e2       	ldi	r30, 0x26	; 38
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	1d c0       	rjmp	.+58     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    1108:	e9 e2       	ldi	r30, 0x29	; 41
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	1a c0       	rjmp	.+52     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    110e:	ec e2       	ldi	r30, 0x2C	; 44
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	17 c0       	rjmp	.+46     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    1114:	ef e2       	ldi	r30, 0x2F	; 47
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    111a:	e2 e3       	ldi	r30, 0x32	; 50
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	11 c0       	rjmp	.+34     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    1120:	e0 e0       	ldi	r30, 0x00	; 0
    1122:	f1 e0       	ldi	r31, 0x01	; 1
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    1126:	e3 e0       	ldi	r30, 0x03	; 3
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	0b c0       	rjmp	.+22     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    112c:	e6 e0       	ldi	r30, 0x06	; 6
    112e:	f1 e0       	ldi	r31, 0x01	; 1
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    1132:	e9 e0       	ldi	r30, 0x09	; 9
    1134:	f1 e0       	ldi	r31, 0x01	; 1
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    1138:	ee ef       	ldi	r30, 0xFE	; 254
    113a:	f2 e0       	ldi	r31, 0x02	; 2
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <_ZN10DigitalPin4readEv+0x64>
    113e:	e0 e2       	ldi	r30, 0x20	; 32
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 c0       	rjmp	.+4      	; 0x114c <_ZN10DigitalPin4readEv+0x6e>
    1148:	95 95       	asr	r25
    114a:	87 95       	ror	r24
    114c:	2a 95       	dec	r18
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <_ZN10DigitalPin4readEv+0x6a>
    1150:	81 70       	andi	r24, 0x01	; 1
    1152:	08 95       	ret

00001154 <_ZN10DigitalPin6is_lowEv>:

bool DigitalPin::is_low ()
{
  return !read();
    1154:	c4 df       	rcall	.-120    	; 0x10de <_ZN10DigitalPin4readEv>
}
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	89 27       	eor	r24, r25
    115a:	08 95       	ret

0000115c <_ZN8Expander11set_addressEh>:
#include "expander.hpp"

void Expander::set_address (uint8_t address)
{
  this->address = address;
    115c:	fc 01       	movw	r30, r24
    115e:	61 93       	st	Z+, r22
    1160:	cf 01       	movw	r24, r30
  i2c.set_address(address);
    1162:	61 c5       	rjmp	.+2754   	; 0x1c26 <_ZN3I2C11set_addressEh>
    1164:	08 95       	ret

00001166 <_ZN8Expander14write_registerEhh>:
}

void Expander::write_register (uint8_t reg_addr, uint8_t value)
{
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	00 d0       	rcall	.+0      	; 0x1174 <_ZN8Expander14write_registerEhh+0xe>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	e6 2e       	mov	r14, r22
    117a:	f4 2e       	mov	r15, r20
  i2c.set_address(address);
    117c:	8c 01       	movw	r16, r24
    117e:	0f 5f       	subi	r16, 0xFF	; 255
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	fc 01       	movw	r30, r24
    1184:	60 81       	ld	r22, Z
    1186:	c8 01       	movw	r24, r16
    1188:	4e d5       	rcall	.+2716   	; 0x1c26 <_ZN3I2C11set_addressEh>
  uint8_t msg [] = {reg_addr, value};
    118a:	e9 82       	std	Y+1, r14	; 0x01
    118c:	fa 82       	std	Y+2, r15	; 0x02
  i2c.write(msg, 2);
    118e:	42 e0       	ldi	r20, 0x02	; 2
    1190:	be 01       	movw	r22, r28
    1192:	6f 5f       	subi	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	c8 01       	movw	r24, r16
    1198:	ca d5       	rcall	.+2964   	; 0x1d2e <_ZN3I2C5writeEPhh>
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	08 95       	ret

000011ac <_ZN8Expander13read_registerEh>:

uint8_t Expander::read_register (uint8_t reg_addr)
{
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <_ZN8Expander13read_registerEh+0xa>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	6a 83       	std	Y+2, r22	; 0x02
  i2c.set_address(address);
    11bc:	8c 01       	movw	r16, r24
    11be:	0f 5f       	subi	r16, 0xFF	; 255
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	fc 01       	movw	r30, r24
    11c4:	60 81       	ld	r22, Z
    11c6:	c8 01       	movw	r24, r16
    11c8:	2e d5       	rcall	.+2652   	; 0x1c26 <_ZN3I2C11set_addressEh>
  i2c.write(&reg_addr, 1);
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	be 01       	movw	r22, r28
    11ce:	6e 5f       	subi	r22, 0xFE	; 254
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	c8 01       	movw	r24, r16
    11d4:	ac d5       	rcall	.+2904   	; 0x1d2e <_ZN3I2C5writeEPhh>
  uint8_t value;
  i2c.read(&value, 1);
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	be 01       	movw	r22, r28
    11da:	6f 5f       	subi	r22, 0xFF	; 255
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	c8 01       	movw	r24, r16
    11e0:	46 d6       	rcall	.+3212   	; 0x1e6e <_ZN3I2C4readEPhh>
  return value;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	08 95       	ret

000011f2 <_ZN11ExpanderPin4readEv>:
  this->pin = pin;
  set_mode(mode);
}

bool ExpanderPin::read ()
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
  uint8_t reg_addr = (port == A) ? GPIOA : GPIOB;
    11f8:	88 81       	ld	r24, Y
    11fa:	88 23       	and	r24, r24
    11fc:	11 f0       	breq	.+4      	; 0x1202 <_ZN11ExpanderPin4readEv+0x10>
    11fe:	63 e1       	ldi	r22, 0x13	; 19
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <_ZN11ExpanderPin4readEv+0x12>
    1202:	62 e1       	ldi	r22, 0x12	; 18
  return expander->read_register(reg_addr) & (1 << pin);
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	d1 df       	rcall	.-94     	; 0x11ac <_ZN8Expander13read_registerEh>
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	09 80       	ldd	r0, Y+1	; 0x01
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <_ZN11ExpanderPin4readEv+0x22>
    1210:	95 95       	asr	r25
    1212:	87 95       	ror	r24
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <_ZN11ExpanderPin4readEv+0x1e>
}
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <_ZN11ExpanderPin5writeEb>:

void ExpanderPin::write (bool value)
{
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
  uint8_t reg_addr = (port == A) ? GPIOA : GPIOB;
    1228:	88 81       	ld	r24, Y
    122a:	88 23       	and	r24, r24
    122c:	11 f0       	breq	.+4      	; 0x1232 <_ZN11ExpanderPin5writeEb+0x12>
    122e:	13 e1       	ldi	r17, 0x13	; 19
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <_ZN11ExpanderPin5writeEb+0x14>
    1232:	12 e1       	ldi	r17, 0x12	; 18
  if (value)
    1234:	66 23       	and	r22, r22
    1236:	91 f0       	breq	.+36     	; 0x125c <_ZN11ExpanderPin5writeEb+0x3c>
    expander->write_register(reg_addr, expander->read_register(reg_addr) | (1 << pin));
    1238:	61 2f       	mov	r22, r17
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	b6 df       	rcall	.-148    	; 0x11ac <_ZN8Expander13read_registerEh>
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	09 80       	ldd	r0, Y+1	; 0x01
    1246:	02 c0       	rjmp	.+4      	; 0x124c <_ZN11ExpanderPin5writeEb+0x2c>
    1248:	44 0f       	add	r20, r20
    124a:	55 1f       	adc	r21, r21
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <_ZN11ExpanderPin5writeEb+0x28>
    1250:	48 2b       	or	r20, r24
    1252:	61 2f       	mov	r22, r17
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	86 df       	rcall	.-244    	; 0x1166 <_ZN8Expander14write_registerEhh>
    125a:	12 c0       	rjmp	.+36     	; 0x1280 <_ZN11ExpanderPin5writeEb+0x60>
  else
    expander->write_register(reg_addr, expander->read_register(reg_addr) & ~(1 << pin));
    125c:	61 2f       	mov	r22, r17
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	a4 df       	rcall	.-184    	; 0x11ac <_ZN8Expander13read_registerEh>
    1264:	41 e0       	ldi	r20, 0x01	; 1
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	09 80       	ldd	r0, Y+1	; 0x01
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <_ZN11ExpanderPin5writeEb+0x50>
    126c:	44 0f       	add	r20, r20
    126e:	55 1f       	adc	r21, r21
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <_ZN11ExpanderPin5writeEb+0x4c>
    1274:	40 95       	com	r20
    1276:	48 23       	and	r20, r24
    1278:	61 2f       	mov	r22, r17
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	73 df       	rcall	.-282    	; 0x1166 <_ZN8Expander14write_registerEhh>
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	08 95       	ret

00001288 <_ZN11ExpanderPin8set_modeE4Mode>:

void ExpanderPin::set_mode (Mode mode)
{
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
  this->mode = mode;
    1290:	6a 83       	std	Y+2, r22	; 0x02
  uint8_t addr = (port == A) ? IODIRA : IODIRB;
    1292:	11 e0       	ldi	r17, 0x01	; 1
    1294:	88 81       	ld	r24, Y
    1296:	81 11       	cpse	r24, r1
    1298:	01 c0       	rjmp	.+2      	; 0x129c <_ZN11ExpanderPin8set_modeE4Mode+0x14>
    129a:	10 e0       	ldi	r17, 0x00	; 0
  if (mode == INPUT)
    129c:	61 11       	cpse	r22, r1
    129e:	12 c0       	rjmp	.+36     	; 0x12c4 <_ZN11ExpanderPin8set_modeE4Mode+0x3c>
    expander->write_register(addr, expander->read_register(addr) | (1 << pin));
    12a0:	61 2f       	mov	r22, r17
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	82 df       	rcall	.-252    	; 0x11ac <_ZN8Expander13read_registerEh>
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	09 80       	ldd	r0, Y+1	; 0x01
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <_ZN11ExpanderPin8set_modeE4Mode+0x2c>
    12b0:	44 0f       	add	r20, r20
    12b2:	55 1f       	adc	r21, r21
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <_ZN11ExpanderPin8set_modeE4Mode+0x28>
    12b8:	48 2b       	or	r20, r24
    12ba:	61 2f       	mov	r22, r17
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	52 df       	rcall	.-348    	; 0x1166 <_ZN8Expander14write_registerEhh>
    12c2:	12 c0       	rjmp	.+36     	; 0x12e8 <_ZN11ExpanderPin8set_modeE4Mode+0x60>
  else
    expander->write_register(addr, expander->read_register(addr) & ~(1 << pin));
    12c4:	61 2f       	mov	r22, r17
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	70 df       	rcall	.-288    	; 0x11ac <_ZN8Expander13read_registerEh>
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	09 80       	ldd	r0, Y+1	; 0x01
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <_ZN11ExpanderPin8set_modeE4Mode+0x50>
    12d4:	44 0f       	add	r20, r20
    12d6:	55 1f       	adc	r21, r21
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <_ZN11ExpanderPin8set_modeE4Mode+0x4c>
    12dc:	40 95       	com	r20
    12de:	48 23       	and	r20, r24
    12e0:	61 2f       	mov	r22, r17
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	3f df       	rcall	.-386    	; 0x1166 <_ZN8Expander14write_registerEhh>
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	08 95       	ret

000012f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>:
const uint8_t IODIRB = 0x01;
const uint8_t GPIOA  = 0x12;
const uint8_t GPIOB  = 0x13;

void ExpanderPin::initialize (Expander * expander, Port port, Pin pin, Mode mode)
{
    12f0:	0f 93       	push	r16
  this->expander = expander;
    12f2:	fc 01       	movw	r30, r24
    12f4:	74 83       	std	Z+4, r23	; 0x04
    12f6:	63 83       	std	Z+3, r22	; 0x03
  this->port = port;
    12f8:	40 83       	st	Z, r20
  this->pin = pin;
    12fa:	21 83       	std	Z+1, r18	; 0x01
  set_mode(mode);
    12fc:	60 2f       	mov	r22, r16
    12fe:	c4 df       	rcall	.-120    	; 0x1288 <_ZN11ExpanderPin8set_modeE4Mode>
}
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <_ZN12InputHandler20initialize_expandersEv>:
	memory->write(SLIDER_LEFT, 0);
	memory->write(SLIDER_RIGHT, 0);
}

void InputHandler::initialize_expanders ()
{
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	ec 01       	movw	r28, r24
	expander_left.set_address(0x20);
    130a:	60 e2       	ldi	r22, 0x20	; 32
    130c:	02 96       	adiw	r24, 0x02	; 2
    130e:	26 df       	rcall	.-436    	; 0x115c <_ZN8Expander11set_addressEh>
	expander_right.set_address(0x27);
    1310:	67 e2       	ldi	r22, 0x27	; 39
    1312:	ce 01       	movw	r24, r28
    1314:	42 96       	adiw	r24, 0x12	; 18
    1316:	22 df       	rcall	.-444    	; 0x115c <_ZN8Expander11set_addressEh>
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <_ZN12InputHandler23initialize_push_buttonsEv>:

void InputHandler::initialize_push_buttons ()
{
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	ec 01       	movw	r28, r24
	push_buttons[0].initialize(&expander_left, A, ZERO, INPUT);
    132a:	7c 01       	movw	r14, r24
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	e8 0e       	add	r14, r24
    1330:	f1 1c       	adc	r15, r1
    1332:	00 e0       	ldi	r16, 0x00	; 0
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	b7 01       	movw	r22, r14
    133a:	ce 01       	movw	r24, r28
    133c:	82 96       	adiw	r24, 0x22	; 34
    133e:	d8 df       	rcall	.-80     	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[1].initialize(&expander_left, A, TWO,  INPUT);
    1340:	22 e0       	ldi	r18, 0x02	; 2
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	b7 01       	movw	r22, r14
    1346:	ce 01       	movw	r24, r28
    1348:	87 96       	adiw	r24, 0x27	; 39
    134a:	d2 df       	rcall	.-92     	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[2].initialize(&expander_left, A, FOUR, INPUT);
    134c:	24 e0       	ldi	r18, 0x04	; 4
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	b7 01       	movw	r22, r14
    1352:	ce 01       	movw	r24, r28
    1354:	8c 96       	adiw	r24, 0x2c	; 44
    1356:	cc df       	rcall	.-104    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[3].initialize(&expander_left, A, SIX,  INPUT);
    1358:	26 e0       	ldi	r18, 0x06	; 6
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	b7 01       	movw	r22, r14
    135e:	ce 01       	movw	r24, r28
    1360:	c1 96       	adiw	r24, 0x31	; 49
    1362:	c6 df       	rcall	.-116    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[4].initialize(&expander_left, B, ZERO, INPUT);
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	b7 01       	movw	r22, r14
    136a:	ce 01       	movw	r24, r28
    136c:	c6 96       	adiw	r24, 0x36	; 54
    136e:	c0 df       	rcall	.-128    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[5].initialize(&expander_left, B, TWO,  INPUT);
    1370:	22 e0       	ldi	r18, 0x02	; 2
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	b7 01       	movw	r22, r14
    1376:	ce 01       	movw	r24, r28
    1378:	cb 96       	adiw	r24, 0x3b	; 59
    137a:	ba df       	rcall	.-140    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[6].initialize(&expander_left, B, FOUR, INPUT);
    137c:	24 e0       	ldi	r18, 0x04	; 4
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	b7 01       	movw	r22, r14
    1382:	ce 01       	movw	r24, r28
    1384:	80 5c       	subi	r24, 0xC0	; 192
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	b3 df       	rcall	.-154    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[7].initialize(&expander_left, B, SIX,  INPUT);
    138a:	26 e0       	ldi	r18, 0x06	; 6
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	b7 01       	movw	r22, r14
    1390:	ce 01       	movw	r24, r28
    1392:	8b 5b       	subi	r24, 0xBB	; 187
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	ac df       	rcall	.-168    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1398:	7e 01       	movw	r14, r28
	push_buttons[8].initialize(&expander_right, A, ZERO, INPUT);
    139a:	82 e1       	ldi	r24, 0x12	; 18
    139c:	e8 0e       	add	r14, r24
    139e:	f1 1c       	adc	r15, r1
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	b7 01       	movw	r22, r14
    13a6:	ce 01       	movw	r24, r28
    13a8:	86 5b       	subi	r24, 0xB6	; 182
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	a1 df       	rcall	.-190    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[9].initialize(&expander_right, A, TWO,  INPUT);
    13ae:	22 e0       	ldi	r18, 0x02	; 2
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	b7 01       	movw	r22, r14
    13b4:	ce 01       	movw	r24, r28
    13b6:	81 5b       	subi	r24, 0xB1	; 177
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	9a df       	rcall	.-204    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[10].initialize(&expander_right, A, FOUR, INPUT);
    13bc:	24 e0       	ldi	r18, 0x04	; 4
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	b7 01       	movw	r22, r14
    13c2:	ce 01       	movw	r24, r28
    13c4:	8c 5a       	subi	r24, 0xAC	; 172
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	93 df       	rcall	.-218    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[11].initialize(&expander_right, A, SIX,  INPUT);
    13ca:	26 e0       	ldi	r18, 0x06	; 6
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	b7 01       	movw	r22, r14
    13d0:	ce 01       	movw	r24, r28
    13d2:	87 5a       	subi	r24, 0xA7	; 167
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	8c df       	rcall	.-232    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[12].initialize(&expander_right, B, ZERO, INPUT);
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	b7 01       	movw	r22, r14
    13de:	ce 01       	movw	r24, r28
    13e0:	82 5a       	subi	r24, 0xA2	; 162
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	85 df       	rcall	.-246    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[13].initialize(&expander_right, B, TWO,  INPUT);
    13e6:	22 e0       	ldi	r18, 0x02	; 2
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	b7 01       	movw	r22, r14
    13ec:	ce 01       	movw	r24, r28
    13ee:	8d 59       	subi	r24, 0x9D	; 157
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	7e df       	rcall	.-260    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
	push_buttons[14].initialize(&expander_right, B, FOUR, INPUT);
    13f4:	24 e0       	ldi	r18, 0x04	; 4
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	b7 01       	movw	r22, r14
    13fa:	ce 01       	movw	r24, r28
    13fc:	88 59       	subi	r24, 0x98	; 152
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	77 df       	rcall	.-274    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1402:	26 e0       	ldi	r18, 0x06	; 6
	push_buttons[15].initialize(&expander_right, B, SIX,  INPUT);
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	b7 01       	movw	r22, r14
    1408:	ce 01       	movw	r24, r28
    140a:	83 59       	subi	r24, 0x93	; 147
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	70 df       	rcall	.-288    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
}
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	08 95       	ret

0000141c <_ZN12InputHandler25initialize_arcade_buttonsEv>:
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29

void InputHandler::initialize_arcade_buttons ()
{
    1420:	ec 01       	movw	r28, r24
	arcade_buttons[0].initialize(K, TWO, INPUT_PULLUP);   // emergency stop
    1422:	22 e0       	ldi	r18, 0x02	; 2
    1424:	42 e0       	ldi	r20, 0x02	; 2
    1426:	69 e0       	ldi	r22, 0x09	; 9
    1428:	8e 58       	subi	r24, 0x8E	; 142
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	ea dd       	rcall	.-1068   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[1].initialize(B, SIX, INPUT_PULLUP);   // n/a
    142e:	22 e0       	ldi	r18, 0x02	; 2
    1430:	46 e0       	ldi	r20, 0x06	; 6
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	ce 01       	movw	r24, r28
    1436:	8b 58       	subi	r24, 0x8B	; 139
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	e3 dd       	rcall	.-1082   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[2].initialize(B, FOUR, INPUT_PULLUP);  // n/a
    143c:	22 e0       	ldi	r18, 0x02	; 2
    143e:	44 e0       	ldi	r20, 0x04	; 4
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	ce 01       	movw	r24, r28
    1444:	88 58       	subi	r24, 0x88	; 136
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	dc dd       	rcall	.-1096   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[3].initialize(B, ZERO, INPUT_PULLUP);  // arm up
    144a:	22 e0       	ldi	r18, 0x02	; 2
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	ce 01       	movw	r24, r28
    1452:	85 58       	subi	r24, 0x85	; 133
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	d5 dd       	rcall	.-1110   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[4].initialize(E, FOUR, INPUT_PULLUP);  // lower bucket
    1458:	22 e0       	ldi	r18, 0x02	; 2
    145a:	44 e0       	ldi	r20, 0x04	; 4
    145c:	64 e0       	ldi	r22, 0x04	; 4
    145e:	ce 01       	movw	r24, r28
    1460:	82 58       	subi	r24, 0x82	; 130
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	ce dd       	rcall	.-1124   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[5].initialize(B, FIVE, INPUT_PULLUP);  // raise bucket
    1466:	22 e0       	ldi	r18, 0x02	; 2
    1468:	45 e0       	ldi	r20, 0x05	; 5
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	ce 01       	movw	r24, r28
    146e:	8f 57       	subi	r24, 0x7F	; 127
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	c7 dd       	rcall	.-1138   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[6].initialize(E, SIX, INPUT_PULLUP);   // arm down
    1474:	22 e0       	ldi	r18, 0x02	; 2
    1476:	46 e0       	ldi	r20, 0x06	; 6
    1478:	64 e0       	ldi	r22, 0x04	; 4
    147a:	ce 01       	movw	r24, r28
    147c:	8c 57       	subi	r24, 0x7C	; 124
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	c0 dd       	rcall	.-1152   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[7].initialize(E, SEVEN, INPUT_PULLUP); // plow up
    1482:	22 e0       	ldi	r18, 0x02	; 2
    1484:	47 e0       	ldi	r20, 0x07	; 7
    1486:	64 e0       	ldi	r22, 0x04	; 4
    1488:	ce 01       	movw	r24, r28
    148a:	89 57       	subi	r24, 0x79	; 121
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	b9 dd       	rcall	.-1166   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
	arcade_buttons[8].initialize(E, FIVE, INPUT_PULLUP);  // plow down
    1490:	22 e0       	ldi	r18, 0x02	; 2
    1492:	45 e0       	ldi	r20, 0x05	; 5
    1494:	64 e0       	ldi	r22, 0x04	; 4
    1496:	ce 01       	movw	r24, r28
    1498:	86 57       	subi	r24, 0x76	; 118
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	b2 dd       	rcall	.-1180   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    149e:	df 91       	pop	r29
}
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <_ZN12InputHandler20initialize_joysticksEv>:
    14a4:	cf 93       	push	r28

void InputHandler::initialize_joysticks ()
{
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
	joystick_left_y.initialize(CHANNEL_ZERO);
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	82 57       	subi	r24, 0x72	; 114
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_left_x.initialize(CHANNEL_ONE);
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	ce 01       	movw	r24, r28
    14b8:	83 57       	subi	r24, 0x73	; 115
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_right_x.initialize(CHANNEL_SIX);
    14c0:	66 e0       	ldi	r22, 0x06	; 6
    14c2:	ce 01       	movw	r24, r28
    14c4:	81 57       	subi	r24, 0x71	; 113
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	joystick_right_y.initialize(CHANNEL_SEVEN);
    14cc:	67 e0       	ldi	r22, 0x07	; 7
    14ce:	ce 01       	movw	r24, r28
    14d0:	80 57       	subi	r24, 0x70	; 112
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <_ZN12InputHandler25initialize_potentiometersEv>:

void InputHandler::initialize_potentiometers ()
{
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	ec 01       	movw	r28, r24
	potentiometer_left.initialize(CHANNEL_TWO);
    14e4:	62 e0       	ldi	r22, 0x02	; 2
    14e6:	8f 56       	subi	r24, 0x6F	; 111
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
	potentiometer_right.initialize(CHANNEL_FIVE);
    14ee:	65 e0       	ldi	r22, 0x05	; 5
    14f0:	ce 01       	movw	r24, r28
    14f2:	8e 56       	subi	r24, 0x6E	; 110
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	0e 94 10 01 	call	0x220	; 0x220 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <_ZN12InputHandler10initializeEP6Memory>:

Clocks RESET_TIMER(250);

Clocks PollInputs(100);
void InputHandler::initialize (Memory * memory)
{
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	ec 01       	movw	r28, r24
    150a:	8b 01       	movw	r16, r22
	PollInputs.setInterval(100);
    150c:	44 e6       	ldi	r20, 0x64	; 100
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN6Clocks11setIntervalEl>
	this->memory = memory;
    151c:	19 83       	std	Y+1, r17	; 0x01
    151e:	08 83       	st	Y, r16
	initialize_expanders();
    1520:	ce 01       	movw	r24, r28
    1522:	f0 de       	rcall	.-544    	; 0x1304 <_ZN12InputHandler20initialize_expandersEv>
	initialize_push_buttons();
    1524:	ce 01       	movw	r24, r28
    1526:	fb de       	rcall	.-522    	; 0x131e <_ZN12InputHandler23initialize_push_buttonsEv>
	initialize_arcade_buttons();
    1528:	ce 01       	movw	r24, r28
    152a:	78 df       	rcall	.-272    	; 0x141c <_ZN12InputHandler25initialize_arcade_buttonsEv>
	initialize_joysticks();
    152c:	ce 01       	movw	r24, r28
    152e:	ba df       	rcall	.-140    	; 0x14a4 <_ZN12InputHandler20initialize_joysticksEv>
	initialize_potentiometers();
    1530:	ce 01       	movw	r24, r28
    1532:	d5 df       	rcall	.-86     	; 0x14de <_ZN12InputHandler25initialize_potentiometersEv>
    1534:	df 91       	pop	r29
}
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <_ZN12InputHandler19poll_arcade_buttonsEv>:
    153e:	0f 93       	push	r16
	potentiometer_left.initialize(CHANNEL_TWO);
	potentiometer_right.initialize(CHANNEL_FIVE);
}

void InputHandler::poll_arcade_buttons ()
{
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	8c 01       	movw	r16, r24
    1546:	0e 58       	subi	r16, 0x8E	; 142
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	c0 e3       	ldi	r28, 0x30	; 48
	for (uint8_t i = 0; i < NUM_ARCADE_BUTTONS; ++i)
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
    154c:	c8 01       	movw	r24, r16
    154e:	02 de       	rcall	.-1020   	; 0x1154 <_ZN10DigitalPin6is_lowEv>
    1550:	68 2f       	mov	r22, r24
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	8c 2f       	mov	r24, r28
    1556:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
    155a:	0d 5f       	subi	r16, 0xFD	; 253
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	cf 5f       	subi	r28, 0xFF	; 255
	potentiometer_right.initialize(CHANNEL_FIVE);
}

void InputHandler::poll_arcade_buttons ()
{
	for (uint8_t i = 0; i < NUM_ARCADE_BUTTONS; ++i)
    1560:	c9 33       	cpi	r28, 0x39	; 57
    1562:	a1 f7       	brne	.-24     	; 0x154c <_ZN12InputHandler19poll_arcade_buttonsEv+0xe>
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
}
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <_ZN12InputHandler17poll_push_buttonsEv>:

void InputHandler::poll_push_buttons ()
{
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	8c 01       	movw	r16, r24
    1574:	0e 5d       	subi	r16, 0xDE	; 222
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	c0 e4       	ldi	r28, 0x40	; 64
	for (uint8_t i = 0; i < NUM_PUSH_BUTTONS; ++i)
	{

		if (!push_buttons[i].read()) {
    157a:	c8 01       	movw	r24, r16
    157c:	3a de       	rcall	.-908    	; 0x11f2 <_ZN11ExpanderPin4readEv>
    157e:	81 11       	cpse	r24, r1
    1580:	05 c0       	rjmp	.+10     	; 0x158c <_ZN12InputHandler17poll_push_buttonsEv+0x20>
			memory->write(PUSH_BUTTON_0_FLAG + i, 1);
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	8c 2f       	mov	r24, r28
    1588:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
    158c:	0b 5f       	subi	r16, 0xFB	; 251
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	cf 5f       	subi	r28, 0xFF	; 255
		memory->write(ARCADE_BUTTON_0_FLAG + i, arcade_buttons[i].is_low() ? 1 : 0);
}

void InputHandler::poll_push_buttons ()
{
	for (uint8_t i = 0; i < NUM_PUSH_BUTTONS; ++i)
    1592:	c0 35       	cpi	r28, 0x50	; 80
    1594:	91 f7       	brne	.-28     	; 0x157a <_ZN12InputHandler17poll_push_buttonsEv+0xe>
//    else {
//      if(RESET_TIMER.isDone_NoReset())
//        memory->write(PUSH_BUTTON_0_FLAG + i, 0);
//    }
	}
}
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <_ZN12InputHandler18poll_analog_inputsEv>:

void InputHandler::poll_analog_inputs ()
{
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
	memory->write(JOYSTICK_LEFT_X,  joystick_left_x.read());
    15a4:	83 57       	subi	r24, 0x73	; 115
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    15ac:	bc 01       	movw	r22, r24
    15ae:	80 e2       	ldi	r24, 0x20	; 32
    15b0:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_LEFT_Y,  joystick_left_y.read());
    15b4:	ce 01       	movw	r24, r28
    15b6:	82 57       	subi	r24, 0x72	; 114
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    15be:	bc 01       	movw	r22, r24
    15c0:	81 e2       	ldi	r24, 0x21	; 33
    15c2:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_RIGHT_X, joystick_right_x.read());
    15c6:	ce 01       	movw	r24, r28
    15c8:	81 57       	subi	r24, 0x71	; 113
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    15d0:	bc 01       	movw	r22, r24
    15d2:	82 e2       	ldi	r24, 0x22	; 34
    15d4:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
	memory->write(JOYSTICK_RIGHT_Y, joystick_right_y.read());
    15d8:	ce 01       	movw	r24, r28
    15da:	80 57       	subi	r24, 0x70	; 112
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    15e2:	bc 01       	movw	r22, r24
    15e4:	83 e2       	ldi	r24, 0x23	; 35
    15e6:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
	memory->write(SLIDER_LEFT,      potentiometer_left.read());
    15ea:	ce 01       	movw	r24, r28
    15ec:	8f 56       	subi	r24, 0x6F	; 111
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    15f4:	bc 01       	movw	r22, r24
    15f6:	84 e2       	ldi	r24, 0x24	; 36
    15f8:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
	memory->write(SLIDER_RIGHT,     potentiometer_right.read());
    15fc:	ce 01       	movw	r24, r28
    15fe:	8e 56       	subi	r24, 0x6E	; 110
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11AnalogInput4readEv>
    1606:	bc 01       	movw	r22, r24
    1608:	85 e2       	ldi	r24, 0x25	; 37
    160a:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <_ZN12InputHandler4pollEv>:
	initialize_joysticks();
	initialize_potentiometers();
}

void InputHandler::poll ()
{
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
	if(PollInputs.isDone()) {
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_ZN6Clocks6isDoneEv>
    1622:	88 23       	and	r24, r24
    1624:	31 f0       	breq	.+12     	; 0x1632 <_ZN12InputHandler4pollEv+0x1e>
		poll_arcade_buttons();
    1626:	ce 01       	movw	r24, r28
    1628:	8a df       	rcall	.-236    	; 0x153e <_ZN12InputHandler19poll_arcade_buttonsEv>
		poll_push_buttons();
    162a:	ce 01       	movw	r24, r28
    162c:	9f df       	rcall	.-194    	; 0x156c <_ZN12InputHandler17poll_push_buttonsEv>
		poll_analog_inputs();
    162e:	ce 01       	movw	r24, r28
    1630:	b6 df       	rcall	.-148    	; 0x159e <_ZN12InputHandler18poll_analog_inputsEv>
    1632:	df 91       	pop	r29
	}
}
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <_GLOBAL__sub_I_RESET_TIMER>:
    1638:	4a ef       	ldi	r20, 0xFA	; 250
#include "../memory/memory_variables.hpp"
#include "../timer/Clock.hpp"
static const int NUM_ARCADE_BUTTONS = 9;
static const int NUM_PUSH_BUTTONS = 16;

Clocks RESET_TIMER(250);
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	8b e0       	ldi	r24, 0x0B	; 11
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 81 15 	call	0x2b02	; 0x2b02 <_ZN6ClocksC1El>

Clocks PollInputs(100);
    1648:	44 e6       	ldi	r20, 0x64	; 100
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <_ZN6ClocksC1El>
    1658:	08 95       	ret

0000165a <_ZN13OutputHandler20initialize_expandersEv>:
		push_button_leds[inner[j]].write(0);
	_delay_ms(pause);
	for (int j = 0; j < 12; ++j)
		push_button_leds[outer[j]].write(0);
	_delay_ms(pause);
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	ec 01       	movw	r28, r24
    1660:	60 e2       	ldi	r22, 0x20	; 32
    1662:	88 5f       	subi	r24, 0xF8	; 248
    1664:	9e 4f       	sbci	r25, 0xFE	; 254
    1666:	7a dd       	rcall	.-1292   	; 0x115c <_ZN8Expander11set_addressEh>
    1668:	67 e2       	ldi	r22, 0x27	; 39
    166a:	ce 01       	movw	r24, r28
    166c:	88 5e       	subi	r24, 0xE8	; 232
    166e:	9e 4f       	sbci	r25, 0xFE	; 254
    1670:	75 dd       	rcall	.-1302   	; 0x115c <_ZN8Expander11set_addressEh>
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <_ZN13OutputHandler27initialize_push_button_ledsEv>:
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	ec 01       	movw	r28, r24
    1684:	7c 01       	movw	r14, r24
    1686:	88 ef       	ldi	r24, 0xF8	; 248
    1688:	e8 1a       	sub	r14, r24
    168a:	8e ef       	ldi	r24, 0xFE	; 254
    168c:	f8 0a       	sbc	r15, r24
    168e:	01 e0       	ldi	r16, 0x01	; 1
    1690:	21 e0       	ldi	r18, 0x01	; 1
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	b7 01       	movw	r22, r14
    1696:	ce 01       	movw	r24, r28
    1698:	88 5d       	subi	r24, 0xD8	; 216
    169a:	9e 4f       	sbci	r25, 0xFE	; 254
    169c:	29 de       	rcall	.-942    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    169e:	23 e0       	ldi	r18, 0x03	; 3
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	b7 01       	movw	r22, r14
    16a4:	ce 01       	movw	r24, r28
    16a6:	83 5d       	subi	r24, 0xD3	; 211
    16a8:	9e 4f       	sbci	r25, 0xFE	; 254
    16aa:	22 de       	rcall	.-956    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16ac:	25 e0       	ldi	r18, 0x05	; 5
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	b7 01       	movw	r22, r14
    16b2:	ce 01       	movw	r24, r28
    16b4:	8e 5c       	subi	r24, 0xCE	; 206
    16b6:	9e 4f       	sbci	r25, 0xFE	; 254
    16b8:	1b de       	rcall	.-970    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16ba:	27 e0       	ldi	r18, 0x07	; 7
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	b7 01       	movw	r22, r14
    16c0:	ce 01       	movw	r24, r28
    16c2:	89 5c       	subi	r24, 0xC9	; 201
    16c4:	9e 4f       	sbci	r25, 0xFE	; 254
    16c6:	14 de       	rcall	.-984    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16c8:	21 e0       	ldi	r18, 0x01	; 1
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	b7 01       	movw	r22, r14
    16ce:	ce 01       	movw	r24, r28
    16d0:	84 5c       	subi	r24, 0xC4	; 196
    16d2:	9e 4f       	sbci	r25, 0xFE	; 254
    16d4:	0d de       	rcall	.-998    	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16d6:	23 e0       	ldi	r18, 0x03	; 3
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	b7 01       	movw	r22, r14
    16dc:	ce 01       	movw	r24, r28
    16de:	8f 5b       	subi	r24, 0xBF	; 191
    16e0:	9e 4f       	sbci	r25, 0xFE	; 254
    16e2:	06 de       	rcall	.-1012   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16e4:	25 e0       	ldi	r18, 0x05	; 5
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	b7 01       	movw	r22, r14
    16ea:	ce 01       	movw	r24, r28
    16ec:	8a 5b       	subi	r24, 0xBA	; 186
    16ee:	9e 4f       	sbci	r25, 0xFE	; 254
    16f0:	ff dd       	rcall	.-1026   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    16f2:	27 e0       	ldi	r18, 0x07	; 7
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	b7 01       	movw	r22, r14
    16f8:	ce 01       	movw	r24, r28
    16fa:	85 5b       	subi	r24, 0xB5	; 181
    16fc:	9e 4f       	sbci	r25, 0xFE	; 254
    16fe:	f8 dd       	rcall	.-1040   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1700:	7e 01       	movw	r14, r28
    1702:	88 ee       	ldi	r24, 0xE8	; 232
    1704:	e8 1a       	sub	r14, r24
    1706:	8e ef       	ldi	r24, 0xFE	; 254
    1708:	f8 0a       	sbc	r15, r24
    170a:	21 e0       	ldi	r18, 0x01	; 1
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	b7 01       	movw	r22, r14
    1710:	ce 01       	movw	r24, r28
    1712:	80 5b       	subi	r24, 0xB0	; 176
    1714:	9e 4f       	sbci	r25, 0xFE	; 254
    1716:	ec dd       	rcall	.-1064   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1718:	23 e0       	ldi	r18, 0x03	; 3
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	b7 01       	movw	r22, r14
    171e:	ce 01       	movw	r24, r28
    1720:	8b 5a       	subi	r24, 0xAB	; 171
    1722:	9e 4f       	sbci	r25, 0xFE	; 254
    1724:	e5 dd       	rcall	.-1078   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1726:	25 e0       	ldi	r18, 0x05	; 5
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	b7 01       	movw	r22, r14
    172c:	ce 01       	movw	r24, r28
    172e:	86 5a       	subi	r24, 0xA6	; 166
    1730:	9e 4f       	sbci	r25, 0xFE	; 254
    1732:	de dd       	rcall	.-1092   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1734:	27 e0       	ldi	r18, 0x07	; 7
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	b7 01       	movw	r22, r14
    173a:	ce 01       	movw	r24, r28
    173c:	81 5a       	subi	r24, 0xA1	; 161
    173e:	9e 4f       	sbci	r25, 0xFE	; 254
    1740:	d7 dd       	rcall	.-1106   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	b7 01       	movw	r22, r14
    1748:	ce 01       	movw	r24, r28
    174a:	8c 59       	subi	r24, 0x9C	; 156
    174c:	9e 4f       	sbci	r25, 0xFE	; 254
    174e:	d0 dd       	rcall	.-1120   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    1750:	23 e0       	ldi	r18, 0x03	; 3
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	b7 01       	movw	r22, r14
    1756:	ce 01       	movw	r24, r28
    1758:	87 59       	subi	r24, 0x97	; 151
    175a:	9e 4f       	sbci	r25, 0xFE	; 254
    175c:	c9 dd       	rcall	.-1134   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    175e:	25 e0       	ldi	r18, 0x05	; 5
    1760:	41 e0       	ldi	r20, 0x01	; 1
    1762:	b7 01       	movw	r22, r14
    1764:	ce 01       	movw	r24, r28
    1766:	82 59       	subi	r24, 0x92	; 146
    1768:	9e 4f       	sbci	r25, 0xFE	; 254
    176a:	c2 dd       	rcall	.-1148   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    176c:	27 e0       	ldi	r18, 0x07	; 7
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	b7 01       	movw	r22, r14
    1772:	ce 01       	movw	r24, r28
    1774:	8d 58       	subi	r24, 0x8D	; 141
    1776:	9e 4f       	sbci	r25, 0xFE	; 254
    1778:	bb dd       	rcall	.-1162   	; 0x12f0 <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	08 95       	ret

00001786 <_ZN13OutputHandler21initialize_panel_ledsEv>:
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	8c 01       	movw	r16, r24
    1790:	ec 01       	movw	r28, r24
    1792:	c8 58       	subi	r28, 0x88	; 136
    1794:	de 4f       	sbci	r29, 0xFE	; 254
    1796:	21 e0       	ldi	r18, 0x01	; 1
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	ce 01       	movw	r24, r28
    179e:	31 dc       	rcall	.-1950   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	62 e0       	ldi	r22, 0x02	; 2
    17a6:	c8 01       	movw	r24, r16
    17a8:	85 58       	subi	r24, 0x85	; 133
    17aa:	9e 4f       	sbci	r25, 0xFE	; 254
    17ac:	2a dc       	rcall	.-1964   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	42 e0       	ldi	r20, 0x02	; 2
    17b2:	62 e0       	ldi	r22, 0x02	; 2
    17b4:	c8 01       	movw	r24, r16
    17b6:	82 58       	subi	r24, 0x82	; 130
    17b8:	9e 4f       	sbci	r25, 0xFE	; 254
    17ba:	23 dc       	rcall	.-1978   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	43 e0       	ldi	r20, 0x03	; 3
    17c0:	62 e0       	ldi	r22, 0x02	; 2
    17c2:	c8 01       	movw	r24, r16
    17c4:	8f 57       	subi	r24, 0x7F	; 127
    17c6:	9e 4f       	sbci	r25, 0xFE	; 254
    17c8:	1c dc       	rcall	.-1992   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    17ca:	21 e0       	ldi	r18, 0x01	; 1
    17cc:	44 e0       	ldi	r20, 0x04	; 4
    17ce:	62 e0       	ldi	r22, 0x02	; 2
    17d0:	c8 01       	movw	r24, r16
    17d2:	8c 57       	subi	r24, 0x7C	; 124
    17d4:	9e 4f       	sbci	r25, 0xFE	; 254
    17d6:	15 dc       	rcall	.-2006   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    17d8:	21 e0       	ldi	r18, 0x01	; 1
    17da:	45 e0       	ldi	r20, 0x05	; 5
    17dc:	62 e0       	ldi	r22, 0x02	; 2
    17de:	c8 01       	movw	r24, r16
    17e0:	89 57       	subi	r24, 0x79	; 121
    17e2:	9e 4f       	sbci	r25, 0xFE	; 254
    17e4:	0e dc       	rcall	.-2020   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	46 e0       	ldi	r20, 0x06	; 6
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	c8 01       	movw	r24, r16
    17ee:	86 57       	subi	r24, 0x76	; 118
    17f0:	9e 4f       	sbci	r25, 0xFE	; 254
    17f2:	07 dc       	rcall	.-2034   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	47 e0       	ldi	r20, 0x07	; 7
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	c8 01       	movw	r24, r16
    17fc:	83 57       	subi	r24, 0x73	; 115
    17fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1800:	00 dc       	rcall	.-2048   	; 0x1002 <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    1802:	00 57       	subi	r16, 0x70	; 112
    1804:	1e 4f       	sbci	r17, 0xFE	; 254
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	ce 01       	movw	r24, r28
    180a:	47 dc       	rcall	.-1906   	; 0x109a <_ZN10DigitalPin5writeEb>
    180c:	23 96       	adiw	r28, 0x03	; 3
    180e:	c0 17       	cp	r28, r16
    1810:	d1 07       	cpc	r29, r17
    1812:	c9 f7       	brne	.-14     	; 0x1806 <_ZN13OutputHandler21initialize_panel_ledsEv+0x80>
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <_ZN13OutputHandler24refresh_push_button_ledsEv>:
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	8c 01       	movw	r16, r24
    1826:	08 5d       	subi	r16, 0xD8	; 216
    1828:	1e 4f       	sbci	r17, 0xFE	; 254
    182a:	c0 e4       	ldi	r28, 0x40	; 64
    182c:	8c 2f       	mov	r24, r28
    182e:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
    1832:	89 2b       	or	r24, r25
    1834:	d1 f0       	breq	.+52     	; 0x186a <_ZN13OutputHandler24refresh_push_button_ledsEv+0x4c>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
    183c:	89 2b       	or	r24, r25
    183e:	21 f0       	breq	.+8      	; 0x1848 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x2a>
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	c8 01       	movw	r24, r16
    1844:	ed dc       	rcall	.-1574   	; 0x1220 <_ZN11ExpanderPin5writeEb>
    1846:	19 c0       	rjmp	.+50     	; 0x187a <_ZN13OutputHandler24refresh_push_button_ledsEv+0x5c>
    1848:	88 e1       	ldi	r24, 0x18	; 24
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_ZN6Clocks6isDoneEv>
    1850:	88 23       	and	r24, r24
    1852:	99 f0       	breq	.+38     	; 0x187a <_ZN13OutputHandler24refresh_push_button_ledsEv+0x5c>
    1854:	60 91 17 03 	lds	r22, 0x0317	; 0x800317 <blinkState>
    1858:	c8 01       	movw	r24, r16
    185a:	e2 dc       	rcall	.-1596   	; 0x1220 <_ZN11ExpanderPin5writeEb>
    185c:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <blinkState>
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 27       	eor	r24, r25
    1864:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <blinkState>
    1868:	08 c0       	rjmp	.+16     	; 0x187a <_ZN13OutputHandler24refresh_push_button_ledsEv+0x5c>
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	8c 2f       	mov	r24, r28
    1870:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN6Memory5writeEhj>
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	c8 01       	movw	r24, r16
    1878:	d3 dc       	rcall	.-1626   	; 0x1220 <_ZN11ExpanderPin5writeEb>
    187a:	cf 5f       	subi	r28, 0xFF	; 255
    187c:	0b 5f       	subi	r16, 0xFB	; 251
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	c0 35       	cpi	r28, 0x50	; 80
    1882:	a1 f6       	brne	.-88     	; 0x182c <_ZN13OutputHandler24refresh_push_button_ledsEv+0xe>
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <_ZN13OutputHandler18refresh_panel_ledsEv>:
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	ec 01       	movw	r28, r24
    1892:	84 e0       	ldi	r24, 0x04	; 4
    1894:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
    1898:	89 2b       	or	r24, r25
    189a:	59 f0       	breq	.+22     	; 0x18b2 <_ZN13OutputHandler18refresh_panel_ledsEv+0x26>
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	ce 01       	movw	r24, r28
    18a0:	88 58       	subi	r24, 0x88	; 136
    18a2:	9e 4f       	sbci	r25, 0xFE	; 254
    18a4:	fa db       	rcall	.-2060   	; 0x109a <_ZN10DigitalPin5writeEb>
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	ce 01       	movw	r24, r28
    18aa:	8c 57       	subi	r24, 0x7C	; 124
    18ac:	9e 4f       	sbci	r25, 0xFE	; 254
    18ae:	f5 db       	rcall	.-2070   	; 0x109a <_ZN10DigitalPin5writeEb>
    18b0:	0a c0       	rjmp	.+20     	; 0x18c6 <_ZN13OutputHandler18refresh_panel_ledsEv+0x3a>
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	ce 01       	movw	r24, r28
    18b6:	88 58       	subi	r24, 0x88	; 136
    18b8:	9e 4f       	sbci	r25, 0xFE	; 254
    18ba:	ef db       	rcall	.-2082   	; 0x109a <_ZN10DigitalPin5writeEb>
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	ce 01       	movw	r24, r28
    18c0:	8c 57       	subi	r24, 0x7C	; 124
    18c2:	9e 4f       	sbci	r25, 0xFE	; 254
    18c4:	ea db       	rcall	.-2092   	; 0x109a <_ZN10DigitalPin5writeEb>
    18c6:	87 e0       	ldi	r24, 0x07	; 7
    18c8:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
    18cc:	89 2b       	or	r24, r25
    18ce:	59 f0       	breq	.+22     	; 0x18e6 <_ZN13OutputHandler18refresh_panel_ledsEv+0x5a>
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	ce 01       	movw	r24, r28
    18d4:	8f 57       	subi	r24, 0x7F	; 127
    18d6:	9e 4f       	sbci	r25, 0xFE	; 254
    18d8:	e0 db       	rcall	.-2112   	; 0x109a <_ZN10DigitalPin5writeEb>
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	ce 01       	movw	r24, r28
    18de:	83 57       	subi	r24, 0x73	; 115
    18e0:	9e 4f       	sbci	r25, 0xFE	; 254
    18e2:	db db       	rcall	.-2122   	; 0x109a <_ZN10DigitalPin5writeEb>
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <_ZN13OutputHandler18refresh_panel_ledsEv+0x6e>
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	ce 01       	movw	r24, r28
    18ea:	8f 57       	subi	r24, 0x7F	; 127
    18ec:	9e 4f       	sbci	r25, 0xFE	; 254
    18ee:	d5 db       	rcall	.-2134   	; 0x109a <_ZN10DigitalPin5writeEb>
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	ce 01       	movw	r24, r28
    18f4:	83 57       	subi	r24, 0x73	; 115
    18f6:	9e 4f       	sbci	r25, 0xFE	; 254
    18f8:	d0 db       	rcall	.-2144   	; 0x109a <_ZN10DigitalPin5writeEb>
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
    1900:	89 2b       	or	r24, r25
    1902:	59 f0       	breq	.+22     	; 0x191a <_ZN13OutputHandler18refresh_panel_ledsEv+0x8e>
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	ce 01       	movw	r24, r28
    1908:	82 58       	subi	r24, 0x82	; 130
    190a:	9e 4f       	sbci	r25, 0xFE	; 254
    190c:	c6 db       	rcall	.-2164   	; 0x109a <_ZN10DigitalPin5writeEb>
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	ce 01       	movw	r24, r28
    1912:	86 57       	subi	r24, 0x76	; 118
    1914:	9e 4f       	sbci	r25, 0xFE	; 254
    1916:	c1 db       	rcall	.-2174   	; 0x109a <_ZN10DigitalPin5writeEb>
    1918:	0a c0       	rjmp	.+20     	; 0x192e <_ZN13OutputHandler18refresh_panel_ledsEv+0xa2>
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	ce 01       	movw	r24, r28
    191e:	82 58       	subi	r24, 0x82	; 130
    1920:	9e 4f       	sbci	r25, 0xFE	; 254
    1922:	bb db       	rcall	.-2186   	; 0x109a <_ZN10DigitalPin5writeEb>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	ce 01       	movw	r24, r28
    1928:	86 57       	subi	r24, 0x76	; 118
    192a:	9e 4f       	sbci	r25, 0xFE	; 254
    192c:	b6 db       	rcall	.-2196   	; 0x109a <_ZN10DigitalPin5writeEb>
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <_ZN13OutputHandler7refreshEv>:
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
    193a:	71 df       	rcall	.-286    	; 0x181e <_ZN13OutputHandler24refresh_push_button_ledsEv>
    193c:	ce 01       	movw	r24, r28
    193e:	a6 df       	rcall	.-180    	; 0x188c <_ZN13OutputHandler18refresh_panel_ledsEv>
    1940:	ce 01       	movw	r24, r28
    1942:	02 96       	adiw	r24, 0x02	; 2
    1944:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_ZNK11TouchScreen7refreshEv>
    1948:	8a e0       	ldi	r24, 0x0A	; 10
    194a:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
    194e:	4a e0       	ldi	r20, 0x0A	; 10
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	bc 01       	movw	r22, r24
    1954:	8b e7       	ldi	r24, 0x7B	; 123
    1956:	93 e0       	ldi	r25, 0x03	; 3
    1958:	b0 d7       	rcall	.+3936   	; 0x28ba <_ZN17Adafruit_7segment5printEji>
    195a:	8b e7       	ldi	r24, 0x7B	; 123
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	8c d5       	rcall	.+2840   	; 0x2478 <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
    1960:	80 e5       	ldi	r24, 0x50	; 80
    1962:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN6Memory4readEh>
    1966:	4a e0       	ldi	r20, 0x0A	; 10
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	bc 01       	movw	r22, r24
    196c:	8a e3       	ldi	r24, 0x3A	; 58
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	a4 d7       	rcall	.+3912   	; 0x28ba <_ZN17Adafruit_7segment5printEji>
    1972:	8a e3       	ldi	r24, 0x3A	; 58
    1974:	93 e0       	ldi	r25, 0x03	; 3
    1976:	80 d5       	rcall	.+2816   	; 0x2478 <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <_ZN13OutputHandler6spiralEv>:
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	a0 97       	sbiw	r28, 0x20	; 32
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	6c 01       	movw	r12, r24
    19a4:	20 e2       	ldi	r18, 0x20	; 32
    19a6:	e6 e0       	ldi	r30, 0x06	; 6
    19a8:	f2 e0       	ldi	r31, 0x02	; 2
    19aa:	ce 01       	movw	r24, r28
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	dc 01       	movw	r26, r24
    19b0:	01 90       	ld	r0, Z+
    19b2:	0d 92       	st	X+, r0
    19b4:	2a 95       	dec	r18
    19b6:	e1 f7       	brne	.-8      	; 0x19b0 <_ZN13OutputHandler6spiralEv+0x32>
    19b8:	8e 01       	movw	r16, r28
    19ba:	0f 5d       	subi	r16, 0xDF	; 223
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	7c 01       	movw	r14, r24
    19c0:	58 01       	movw	r10, r16
    19c2:	f5 01       	movw	r30, r10
    19c4:	92 91       	ld	r25, -Z
    19c6:	82 91       	ld	r24, -Z
    19c8:	5f 01       	movw	r10, r30
    19ca:	9c 01       	movw	r18, r24
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	82 0f       	add	r24, r18
    19d6:	93 1f       	adc	r25, r19
    19d8:	88 5d       	subi	r24, 0xD8	; 216
    19da:	9e 4f       	sbci	r25, 0xFE	; 254
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	8c 0d       	add	r24, r12
    19e0:	9d 1d       	adc	r25, r13
    19e2:	1e dc       	rcall	.-1988   	; 0x1220 <_ZN11ExpanderPin5writeEb>
    19e4:	ff ef       	ldi	r31, 0xFF	; 255
    19e6:	20 e7       	ldi	r18, 0x70	; 112
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	f1 50       	subi	r31, 0x01	; 1
    19ec:	20 40       	sbci	r18, 0x00	; 0
    19ee:	80 40       	sbci	r24, 0x00	; 0
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <_ZN13OutputHandler6spiralEv+0x6c>
    19f2:	00 c0       	rjmp	.+0      	; 0x19f4 <_ZN13OutputHandler6spiralEv+0x76>
    19f4:	00 00       	nop
    19f6:	ea 14       	cp	r14, r10
    19f8:	fb 04       	cpc	r15, r11
    19fa:	19 f7       	brne	.-58     	; 0x19c2 <_ZN13OutputHandler6spiralEv+0x44>
    19fc:	f8 01       	movw	r30, r16
    19fe:	92 91       	ld	r25, -Z
    1a00:	82 91       	ld	r24, -Z
    1a02:	8f 01       	movw	r16, r30
    1a04:	9c 01       	movw	r18, r24
    1a06:	22 0f       	add	r18, r18
    1a08:	33 1f       	adc	r19, r19
    1a0a:	22 0f       	add	r18, r18
    1a0c:	33 1f       	adc	r19, r19
    1a0e:	82 0f       	add	r24, r18
    1a10:	93 1f       	adc	r25, r19
    1a12:	88 5d       	subi	r24, 0xD8	; 216
    1a14:	9e 4f       	sbci	r25, 0xFE	; 254
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	8c 0d       	add	r24, r12
    1a1a:	9d 1d       	adc	r25, r13
    1a1c:	01 dc       	rcall	.-2046   	; 0x1220 <_ZN11ExpanderPin5writeEb>
    1a1e:	ff ef       	ldi	r31, 0xFF	; 255
    1a20:	20 e7       	ldi	r18, 0x70	; 112
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	f1 50       	subi	r31, 0x01	; 1
    1a26:	20 40       	sbci	r18, 0x00	; 0
    1a28:	80 40       	sbci	r24, 0x00	; 0
    1a2a:	e1 f7       	brne	.-8      	; 0x1a24 <_ZN13OutputHandler6spiralEv+0xa6>
    1a2c:	00 c0       	rjmp	.+0      	; 0x1a2e <_ZN13OutputHandler6spiralEv+0xb0>
    1a2e:	00 00       	nop
    1a30:	0e 15       	cp	r16, r14
    1a32:	1f 05       	cpc	r17, r15
    1a34:	19 f7       	brne	.-58     	; 0x19fc <_ZN13OutputHandler6spiralEv+0x7e>
    1a36:	a0 96       	adiw	r28, 0x20	; 32
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	bf 90       	pop	r11
    1a54:	af 90       	pop	r10
    1a56:	08 95       	ret

00001a58 <_ZN13OutputHandler7startupEv>:
    1a58:	6f 92       	push	r6
    1a5a:	7f 92       	push	r7
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	7c 01       	movw	r14, r24
    1a76:	61 2c       	mov	r6, r1
    1a78:	71 2c       	mov	r7, r1
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f3 e0       	ldi	r31, 0x03	; 3
    1a7e:	af 2e       	mov	r10, r31
    1a80:	b1 2c       	mov	r11, r1
    1a82:	f0 2d       	mov	r31, r0
    1a84:	81 2c       	mov	r8, r1
    1a86:	91 2c       	mov	r9, r1
    1a88:	63 01       	movw	r12, r6
    1a8a:	21 e0       	ldi	r18, 0x01	; 1
    1a8c:	c2 22       	and	r12, r18
    1a8e:	dd 24       	eor	r13, r13
    1a90:	c1 14       	cp	r12, r1
    1a92:	d1 04       	cpc	r13, r1
    1a94:	21 f0       	breq	.+8      	; 0x1a9e <_ZN13OutputHandler7startupEv+0x46>
    1a96:	e5 01       	movw	r28, r10
    1a98:	c8 19       	sub	r28, r8
    1a9a:	d9 09       	sbc	r29, r9
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <_ZN13OutputHandler7startupEv+0x48>
    1a9e:	e4 01       	movw	r28, r8
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	00 0f       	add	r16, r16
    1aa4:	11 1f       	adc	r17, r17
    1aa6:	0c 0f       	add	r16, r28
    1aa8:	1d 1f       	adc	r17, r29
    1aaa:	08 58       	subi	r16, 0x88	; 136
    1aac:	1e 4f       	sbci	r17, 0xFE	; 254
    1aae:	0e 0d       	add	r16, r14
    1ab0:	1f 1d       	adc	r17, r15
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	f1 da       	rcall	.-2590   	; 0x109a <_ZN10DigitalPin5writeEb>
    1ab8:	24 96       	adiw	r28, 0x04	; 4
    1aba:	ce 01       	movw	r24, r28
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	c8 0f       	add	r28, r24
    1ac2:	d9 1f       	adc	r29, r25
    1ac4:	c8 58       	subi	r28, 0x88	; 136
    1ac6:	de 4f       	sbci	r29, 0xFE	; 254
    1ac8:	ce 0d       	add	r28, r14
    1aca:	df 1d       	adc	r29, r15
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	ce 01       	movw	r24, r28
    1ad0:	e4 da       	rcall	.-2616   	; 0x109a <_ZN10DigitalPin5writeEb>
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	90 e7       	ldi	r25, 0x70	; 112
    1ad6:	22 e0       	ldi	r18, 0x02	; 2
    1ad8:	81 50       	subi	r24, 0x01	; 1
    1ada:	90 40       	sbci	r25, 0x00	; 0
    1adc:	20 40       	sbci	r18, 0x00	; 0
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <_ZN13OutputHandler7startupEv+0x80>
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <_ZN13OutputHandler7startupEv+0x8a>
    1ae2:	00 00       	nop
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	d8 da       	rcall	.-2640   	; 0x109a <_ZN10DigitalPin5writeEb>
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	ce 01       	movw	r24, r28
    1aee:	d5 da       	rcall	.-2646   	; 0x109a <_ZN10DigitalPin5writeEb>
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	88 1a       	sub	r8, r24
    1af4:	98 0a       	sbc	r9, r24
    1af6:	94 e0       	ldi	r25, 0x04	; 4
    1af8:	89 16       	cp	r8, r25
    1afa:	91 04       	cpc	r9, r1
    1afc:	49 f6       	brne	.-110    	; 0x1a90 <_ZN13OutputHandler7startupEv+0x38>
    1afe:	2f ef       	ldi	r18, 0xFF	; 255
    1b00:	62 1a       	sub	r6, r18
    1b02:	72 0a       	sbc	r7, r18
    1b04:	84 e0       	ldi	r24, 0x04	; 4
    1b06:	68 16       	cp	r6, r24
    1b08:	71 04       	cpc	r7, r1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <_ZN13OutputHandler7startupEv+0xb6>
    1b0c:	bb cf       	rjmp	.-138    	; 0x1a84 <_ZN13OutputHandler7startupEv+0x2c>
    1b0e:	c7 01       	movw	r24, r14
    1b10:	36 df       	rcall	.-404    	; 0x197e <_ZN13OutputHandler6spiralEv>
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	cf 90       	pop	r12
    1b22:	bf 90       	pop	r11
    1b24:	af 90       	pop	r10
    1b26:	9f 90       	pop	r9
    1b28:	8f 90       	pop	r8
    1b2a:	7f 90       	pop	r7
    1b2c:	6f 90       	pop	r6
    1b2e:	08 95       	ret

00001b30 <_GLOBAL__sub_I_LsevenSeg>:
    1b30:	8f 92       	push	r8
    1b32:	af 92       	push	r10
    1b34:	cf 92       	push	r12
    1b36:	ef 92       	push	r14
    1b38:	0f 93       	push	r16
#include "../i2c/LiquidCrystal_I2C.hpp"
#include <stdio.h>

#define F_CPU 16000000UL
#include <util/delay.h>
Adafruit_7segment LsevenSeg(0x70);
    1b3a:	60 e7       	ldi	r22, 0x70	; 112
    1b3c:	8b e7       	ldi	r24, 0x7B	; 123
    1b3e:	93 e0       	ldi	r25, 0x03	; 3
    1b40:	b3 d4       	rcall	.+2406   	; 0x24a8 <_ZN17Adafruit_7segmentC1Eh>
Adafruit_7segment RsevenSeg(0x71);
    1b42:	61 e7       	ldi	r22, 0x71	; 113
    1b44:	8a e3       	ldi	r24, 0x3A	; 58
    1b46:	93 e0       	ldi	r25, 0x03	; 3
    1b48:	af d4       	rcall	.+2398   	; 0x24a8 <_ZN17Adafruit_7segmentC1Eh>
LiquidCrystal_I2C lcd(0x3F, 2, 1, 0, 4, 5, 6, 7);
    1b4a:	0f 2e       	mov	r0, r31
    1b4c:	f7 e0       	ldi	r31, 0x07	; 7
    1b4e:	8f 2e       	mov	r8, r31
    1b50:	f0 2d       	mov	r31, r0
    1b52:	0f 2e       	mov	r0, r31
    1b54:	f6 e0       	ldi	r31, 0x06	; 6
    1b56:	af 2e       	mov	r10, r31
    1b58:	f0 2d       	mov	r31, r0
    1b5a:	0f 2e       	mov	r0, r31
    1b5c:	f5 e0       	ldi	r31, 0x05	; 5
    1b5e:	cf 2e       	mov	r12, r31
    1b60:	f0 2d       	mov	r31, r0
    1b62:	68 94       	set
    1b64:	ee 24       	eor	r14, r14
    1b66:	e2 f8       	bld	r14, 2
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	21 e0       	ldi	r18, 0x01	; 1
    1b6c:	42 e0       	ldi	r20, 0x02	; 2
    1b6e:	6f e3       	ldi	r22, 0x3F	; 63
    1b70:	84 e2       	ldi	r24, 0x24	; 36
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	6e d3       	rcall	.+1756   	; 0x2252 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
	panel_leds[6].initialize(C, SIX, OUTPUT);
	panel_leds[7].initialize(C, SEVEN, OUTPUT);
	for (int i = 0; i < 8; ++i)
		panel_leds[i].write(0);
}
Clocks blinkTimer(500);
    1b76:	44 ef       	ldi	r20, 0xF4	; 244
    1b78:	51 e0       	ldi	r21, 0x01	; 1
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	88 e1       	ldi	r24, 0x18	; 24
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	bf d7       	rcall	.+3966   	; 0x2b02 <_ZN6ClocksC1El>
		push_button_leds[inner[j]].write(0);
	_delay_ms(pause);
	for (int j = 0; j < 12; ++j)
		push_button_leds[outer[j]].write(0);
	_delay_ms(pause);
    1b84:	0f 91       	pop	r16
    1b86:	ef 90       	pop	r14
    1b88:	cf 90       	pop	r12
    1b8a:	af 90       	pop	r10
    1b8c:	8f 90       	pop	r8
    1b8e:	08 95       	ret

00001b90 <_ZN13OutputHandler10initializeEP6Memory>:
Adafruit_7segment LsevenSeg(0x70);
Adafruit_7segment RsevenSeg(0x71);
LiquidCrystal_I2C lcd(0x3F, 2, 1, 0, 4, 5, 6, 7);

void OutputHandler::initialize (Memory * memory)
{
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
    1b9a:	8b 01       	movw	r16, r22
	this->memory = memory;
    1b9c:	79 83       	std	Y+1, r23	; 0x01
    1b9e:	68 83       	st	Y, r22
	initialize_expanders();
    1ba0:	5c dd       	rcall	.-1352   	; 0x165a <_ZN13OutputHandler20initialize_expandersEv>
	initialize_push_button_leds();
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	69 dd       	rcall	.-1326   	; 0x1678 <_ZN13OutputHandler27initialize_push_button_ledsEv>
	initialize_panel_leds();
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	ee dd       	rcall	.-1060   	; 0x1786 <_ZN13OutputHandler21initialize_panel_ledsEv>
    1baa:	43 e0       	ldi	r20, 0x03	; 3

	screen.initialize(memory, UART_3);
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	b8 01       	movw	r22, r16
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	02 96       	adiw	r24, 0x02	; 2
    1bb4:	08 d7       	rcall	.+3600   	; 0x29c6 <_ZN11TouchScreen10initializeEP6Memoryj>
    1bb6:	20 e0       	ldi	r18, 0x00	; 0

	lcd.begin (20, 4); // 16 x 2 LCD module
    1bb8:	44 e0       	ldi	r20, 0x04	; 4
    1bba:	64 e1       	ldi	r22, 0x14	; 20
    1bbc:	84 e2       	ldi	r24, 0x24	; 36
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	15 d4       	rcall	.+2090   	; 0x23ec <_ZN17LiquidCrystal_I2C5beginEhhh>
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
	lcd.setBacklightPin(3, POSITIVE); // BL, BL_POL
    1bc4:	63 e0       	ldi	r22, 0x03	; 3
    1bc6:	84 e2       	ldi	r24, 0x24	; 36
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	19 d3       	rcall	.+1586   	; 0x21fe <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol>
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
	lcd.setBacklight(1);
    1bce:	84 e2       	ldi	r24, 0x24	; 36
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	29 d3       	rcall	.+1618   	; 0x2226 <_ZN17LiquidCrystal_I2C12setBacklightEh>
    1bd4:	66 e4       	ldi	r22, 0x46	; 70
	lcd.print("NASA Robotics");
    1bd6:	72 e0       	ldi	r23, 0x02	; 2
    1bd8:	84 e2       	ldi	r24, 0x24	; 36
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	da d2       	rcall	.+1460   	; 0x2192 <_ZN3LCD5printEPKc>
    1bde:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0, 1);
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	84 e2       	ldi	r24, 0x24	; 36
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	fe d1       	rcall	.+1020   	; 0x1fe4 <_ZN3LCD9setCursorEhh>
    1be8:	64 e5       	ldi	r22, 0x54	; 84
	lcd.print("Control Box: V2.3");
    1bea:	72 e0       	ldi	r23, 0x02	; 2
    1bec:	84 e2       	ldi	r24, 0x24	; 36
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	d0 d2       	rcall	.+1440   	; 0x2192 <_ZN3LCD5printEPKc>
    1bf2:	60 e7       	ldi	r22, 0x70	; 112
	LsevenSeg.begin(0x70);
    1bf4:	8b e7       	ldi	r24, 0x7B	; 123
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	29 d4       	rcall	.+2130   	; 0x244c <_ZN20Adafruit_LEDBackpack5beginEh>
    1bfa:	61 e7       	ldi	r22, 0x71	; 113
    1bfc:	8a e3       	ldi	r24, 0x3A	; 58
	RsevenSeg.begin(0x71);
    1bfe:	93 e0       	ldi	r25, 0x03	; 3
    1c00:	25 d4       	rcall	.+2122   	; 0x244c <_ZN20Adafruit_LEDBackpack5beginEh>
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
}
    1c08:	0f 91       	pop	r16
    1c0a:	08 95       	ret

00001c0c <_Z10copy_rangePhS_h>:
    1c0c:	44 23       	and	r20, r20
    1c0e:	51 f0       	breq	.+20     	; 0x1c24 <_Z10copy_rangePhS_h+0x18>
    1c10:	a8 2f       	mov	r26, r24
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
	state = DONE;
    1c12:	b9 2f       	mov	r27, r25
    1c14:	fb 01       	movw	r30, r22
    1c16:	64 0f       	add	r22, r20
    1c18:	71 1d       	adc	r23, r1
    1c1a:	8d 91       	ld	r24, X+
    1c1c:	81 93       	st	Z+, r24
    1c1e:	e6 17       	cp	r30, r22
    1c20:	f7 07       	cpc	r31, r23
    1c22:	d9 f7       	brne	.-10     	; 0x1c1a <_Z10copy_rangePhS_h+0xe>
    1c24:	08 95       	ret

00001c26 <_ZN3I2C11set_addressEh>:
    1c26:	66 0f       	add	r22, r22
    1c28:	fc 01       	movw	r30, r24
    1c2a:	61 83       	std	Z+1, r22	; 0x01
    1c2c:	08 95       	ret

00001c2e <_ZN3I2C12send_addressENS_9DirectionE>:
    1c2e:	fc 01       	movw	r30, r24
    1c30:	61 11       	cpse	r22, r1
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <_ZN3I2C12send_addressENS_9DirectionE+0xe>
    1c34:	81 81       	ldd	r24, Z+1	; 0x01
    1c36:	81 60       	ori	r24, 0x01	; 1
    1c38:	81 83       	std	Z+1, r24	; 0x01
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <_ZN3I2C12send_addressENS_9DirectionE+0x14>
    1c3c:	81 81       	ldd	r24, Z+1	; 0x01
    1c3e:	8e 7f       	andi	r24, 0xFE	; 254
    1c40:	81 83       	std	Z+1, r24	; 0x01
    1c42:	81 81       	ldd	r24, Z+1	; 0x01
    1c44:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c48:	84 e8       	ldi	r24, 0x84	; 132
    1c4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	80 83       	st	Z, r24
    1c52:	08 95       	ret

00001c54 <_ZN3I2C14read_data_byteEv>:
    1c54:	fc 01       	movw	r30, r24
    1c56:	84 85       	ldd	r24, Z+12	; 0x0c
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	25 85       	ldd	r18, Z+13	; 0x0d
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	21 50       	subi	r18, 0x01	; 1
    1c60:	31 09       	sbc	r19, r1
    1c62:	82 17       	cp	r24, r18
    1c64:	93 07       	cpc	r25, r19
    1c66:	31 f4       	brne	.+12     	; 0x1c74 <_ZN3I2C14read_data_byteEv+0x20>
    1c68:	ac eb       	ldi	r26, 0xBC	; 188
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	9c 91       	ld	r25, X
    1c6e:	80 e4       	ldi	r24, 0x40	; 64
    1c70:	89 27       	eor	r24, r25
    1c72:	8c 93       	st	X, r24
    1c74:	84 e8       	ldi	r24, 0x84	; 132
    1c76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c7a:	86 e0       	ldi	r24, 0x06	; 6
    1c7c:	80 83       	st	Z, r24
    1c7e:	08 95       	ret

00001c80 <_ZN3I2C4failEv>:
}

void I2C::fail ()
{
    1c80:	fc 01       	movw	r30, r24
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1c82:	84 e9       	ldi	r24, 0x94	; 148
    1c84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	index = 0;
    1c88:	14 86       	std	Z+12, r1	; 0x0c
	state = START;
    1c8a:	10 82       	st	Z, r1
	++fail_count;
    1c8c:	86 85       	ldd	r24, Z+14	; 0x0e
    1c8e:	8f 5f       	subi	r24, 0xFF	; 255
    1c90:	86 87       	std	Z+14, r24	; 0x0e
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c92:	85 e3       	ldi	r24, 0x35	; 53
    1c94:	8a 95       	dec	r24
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <_ZN3I2C4failEv+0x14>
    1c98:	00 00       	nop
    1c9a:	08 95       	ret

00001c9c <_ZN3I2C12verify_startEv>:
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
	state = VERIFY_START;
}

void I2C::verify_start ()
{
    1c9c:	fc 01       	movw	r30, r24
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1c9e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_START;
}

void I2C::verify_start ()
{
	if (!interrupt_flag_set())
    1ca2:	99 23       	and	r25, r25
    1ca4:	54 f4       	brge	.+20     	; 0x1cba <_ZN3I2C12verify_startEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1ca6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_start ()
{
	if (!interrupt_flag_set())
		return;
	if (check_status(TW_START))
    1caa:	88 7f       	andi	r24, 0xF8	; 248
    1cac:	88 30       	cpi	r24, 0x08	; 8
    1cae:	19 f4       	brne	.+6      	; 0x1cb6 <_ZN3I2C12verify_startEv+0x1a>
		state = SEND_ADDRESS;
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	80 83       	st	Z, r24
    1cb4:	08 95       	ret
    1cb6:	cf 01       	movw	r24, r30
	else
		fail();
    1cb8:	e3 cf       	rjmp	.-58     	; 0x1c80 <_ZN3I2C4failEv>
    1cba:	08 95       	ret

00001cbc <_ZN3I2C25verify_write_address_sentEv>:
	TWCR = (1 << TWINT) | (1 << TWEN);
	state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
    1cbc:	fc 01       	movw	r30, r24
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1cbe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
	if (interrupt_flag_set())
    1cc2:	99 23       	and	r25, r25
    1cc4:	54 f4       	brge	.+20     	; 0x1cda <_ZN3I2C25verify_write_address_sentEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1cc6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_write_address_sent ()
{
	if (interrupt_flag_set())
	{
		if (check_status(TW_MT_SLA_ACK))
    1cca:	88 7f       	andi	r24, 0xF8	; 248
    1ccc:	88 31       	cpi	r24, 0x18	; 24
    1cce:	19 f4       	brne	.+6      	; 0x1cd6 <_ZN3I2C25verify_write_address_sentEv+0x1a>
			state = SEND_BYTE;
    1cd0:	84 e0       	ldi	r24, 0x04	; 4
    1cd2:	80 83       	st	Z, r24
    1cd4:	08 95       	ret
    1cd6:	cf 01       	movw	r24, r30
		else
			fail();
    1cd8:	d3 cf       	rjmp	.-90     	; 0x1c80 <_ZN3I2C4failEv>
    1cda:	08 95       	ret

00001cdc <_ZN3I2C24verify_read_address_sentEv>:
	}
}

void I2C::verify_read_address_sent ()
{
    1cdc:	fc 01       	movw	r30, r24
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1cde:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}
}

void I2C::verify_read_address_sent ()
{
	if (interrupt_flag_set())
    1ce2:	99 23       	and	r25, r25
    1ce4:	54 f4       	brge	.+20     	; 0x1cfa <_ZN3I2C24verify_read_address_sentEv+0x1e>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1ce6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_read_address_sent ()
{
	if (interrupt_flag_set())
	{
		if (check_status(TW_MR_SLA_ACK))
    1cea:	88 7f       	andi	r24, 0xF8	; 248
    1cec:	80 34       	cpi	r24, 0x40	; 64
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <_ZN3I2C24verify_read_address_sentEv+0x1a>
			state = READ_BYTE;
    1cf0:	85 e0       	ldi	r24, 0x05	; 5
    1cf2:	80 83       	st	Z, r24
    1cf4:	08 95       	ret
    1cf6:	cf 01       	movw	r24, r30
		else
			fail();
    1cf8:	c3 cf       	rjmp	.-122    	; 0x1c80 <_ZN3I2C4failEv>
    1cfa:	08 95       	ret

00001cfc <_ZN3I2C16verify_data_sentEv>:
		*dest++ = *src++;
}

bool interrupt_flag_set ()
{
	return TWCR & (1 << TWINT);
    1cfc:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = VERIFY_DATA;
}

void I2C::verify_data_sent ()
{
	if (!interrupt_flag_set())
    1d00:	22 23       	and	r18, r18
    1d02:	a4 f4       	brge	.+40     	; 0x1d2c <_ZN3I2C16verify_data_sentEv+0x30>
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1d04:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

void I2C::verify_data_sent ()
{
	if (!interrupt_flag_set())
		return;
	if (check_status(TW_MT_DATA_ACK))
    1d08:	28 7f       	andi	r18, 0xF8	; 248
    1d0a:	28 32       	cpi	r18, 0x28	; 40
    1d0c:	71 f4       	brne	.+28     	; 0x1d2a <_ZN3I2C16verify_data_sentEv+0x2e>
	{
		if (++index < size)
    1d0e:	fc 01       	movw	r30, r24
    1d10:	24 85       	ldd	r18, Z+12	; 0x0c
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	24 87       	std	Z+12, r18	; 0x0c
    1d16:	35 85       	ldd	r19, Z+13	; 0x0d
    1d18:	23 17       	cp	r18, r19
    1d1a:	18 f4       	brcc	.+6      	; 0x1d22 <_ZN3I2C16verify_data_sentEv+0x26>
			state = SEND_BYTE;
    1d1c:	24 e0       	ldi	r18, 0x04	; 4
    1d1e:	20 83       	st	Z, r18
    1d20:	08 95       	ret
		else
			state = STOP;
    1d22:	27 e0       	ldi	r18, 0x07	; 7
    1d24:	fc 01       	movw	r30, r24
    1d26:	20 83       	st	Z, r18
    1d28:	08 95       	ret
	}
	else
		fail();
    1d2a:	aa cf       	rjmp	.-172    	; 0x1c80 <_ZN3I2C4failEv>
    1d2c:	08 95       	ret

00001d2e <_ZN3I2C5writeEPhh>:
{
	this->address = _address << 1;
}

int I2C::write (uint8_t * data, uint8_t size)
{
    1d2e:	9f 92       	push	r9
    1d30:	af 92       	push	r10
    1d32:	bf 92       	push	r11
    1d34:	cf 92       	push	r12
    1d36:	df 92       	push	r13
    1d38:	ef 92       	push	r14
    1d3a:	ff 92       	push	r15
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	ec 01       	movw	r28, r24
    1d46:	7b 01       	movw	r14, r22
    1d48:	14 2f       	mov	r17, r20

	copy_range(data, buffer, size);
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	6e 5f       	subi	r22, 0xFE	; 254
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d50:	c7 01       	movw	r24, r14
    1d52:	5c df       	rcall	.-328    	; 0x1c0c <_Z10copy_rangePhS_h>

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
	TWBR = (uint8_t)TWBR_VALUE;
    1d54:	88 e4       	ldi	r24, 0x48	; 72
    1d56:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	this->size = size;
    1d5a:	1d 87       	std	Y+13, r17	; 0x0d
	index = 0;
    1d5c:	1c 86       	std	Y+12, r1	; 0x0c
	fail_count = 0;
    1d5e:	1e 86       	std	Y+14, r1	; 0x0e
	state = START;
    1d60:	18 82       	st	Y, r1
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1d62:	e0 e0       	ldi	r30, 0x00	; 0
	}
}

void I2C::send_data_byte (uint8_t data)
{
	TWDR = data;
    1d64:	0f 2e       	mov	r0, r31
    1d66:	fb eb       	ldi	r31, 0xBB	; 187
    1d68:	cf 2e       	mov	r12, r31
    1d6a:	d1 2c       	mov	r13, r1
    1d6c:	f0 2d       	mov	r31, r0
	TWCR = (1 << TWINT) | (1 << TWEN);
    1d6e:	0c eb       	ldi	r16, 0xBC	; 188
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	0f 2e       	mov	r0, r31
    1d74:	f4 e8       	ldi	r31, 0x84	; 132
    1d76:	9f 2e       	mov	r9, r31
    1d78:	f0 2d       	mov	r31, r0
	state = VERIFY_DATA;
    1d7a:	0f 2e       	mov	r0, r31
    1d7c:	f6 e0       	ldi	r31, 0x06	; 6
    1d7e:	af 2e       	mov	r10, r31
    1d80:	f0 2d       	mov	r31, r0
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1d82:	0f 2e       	mov	r0, r31
    1d84:	f4 ee       	ldi	r31, 0xE4	; 228
    1d86:	bf 2e       	mov	r11, r31
    1d88:	f0 2d       	mov	r31, r0
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <_ZN3I2C5writeEPhh+0x64>
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1d8c:	e8 81       	ld	r30, Y
    1d8e:	e8 30       	cpi	r30, 0x08	; 8
    1d90:	99 f1       	breq	.+102    	; 0x1df8 <_ZN3I2C5writeEPhh+0xca>
	{
		if (fail_count >= MAX_FAIL_COUNT)
    1d92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d94:	85 30       	cpi	r24, 0x05	; 5
    1d96:	98 f5       	brcc	.+102    	; 0x1dfe <_ZN3I2C5writeEPhh+0xd0>
			return I2C_FAILURE;
		switch (state)
    1d98:	8e 2f       	mov	r24, r30
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	88 30       	cpi	r24, 0x08	; 8
    1d9e:	91 05       	cpc	r25, r1
    1da0:	40 f5       	brcc	.+80     	; 0x1df2 <_ZN3I2C5writeEPhh+0xc4>
    1da2:	fc 01       	movw	r30, r24
    1da4:	ed 56       	subi	r30, 0x6D	; 109
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__tablejump2__>
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1dac:	f8 01       	movw	r30, r16
    1dae:	b0 82       	st	Z, r11
	state = VERIFY_START;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	88 83       	st	Y, r24
    1db4:	2a c0       	rjmp	.+84     	; 0x1e0a <_ZN3I2C5writeEPhh+0xdc>
		switch (state)
		{
		case START:
			start();
when VERIFY_START:
			verify_start();
    1db6:	ce 01       	movw	r24, r28
    1db8:	71 df       	rcall	.-286    	; 0x1c9c <_ZN3I2C12verify_startEv>
when SEND_ADDRESS:
    1dba:	e8 cf       	rjmp	.-48     	; 0x1d8c <_ZN3I2C5writeEPhh+0x5e>
			send_address(WRITE);
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	36 df       	rcall	.-404    	; 0x1c2e <_ZN3I2C12send_addressENS_9DirectionE>
when VERIFY_ADDRESS:
    1dc2:	e4 cf       	rjmp	.-56     	; 0x1d8c <_ZN3I2C5writeEPhh+0x5e>
			verify_write_address_sent();
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	7a df       	rcall	.-268    	; 0x1cbc <_ZN3I2C25verify_write_address_sentEv>
    1dc8:	e1 cf       	rjmp	.-62     	; 0x1d8c <_ZN3I2C5writeEPhh+0x5e>
when SEND_BYTE:
    1dca:	8c 85       	ldd	r24, Y+12	; 0x0c
			send_data_byte(data[index]);
    1dcc:	f7 01       	movw	r30, r14
    1dce:	e8 0f       	add	r30, r24
    1dd0:	f1 1d       	adc	r31, r1
    1dd2:	80 81       	ld	r24, Z
    1dd4:	f6 01       	movw	r30, r12
	}
}

void I2C::send_data_byte (uint8_t data)
{
	TWDR = data;
    1dd6:	80 83       	st	Z, r24
    1dd8:	f8 01       	movw	r30, r16
	TWCR = (1 << TWINT) | (1 << TWEN);
    1dda:	90 82       	st	Z, r9
	state = VERIFY_DATA;
    1ddc:	a8 82       	st	Y, r10
    1dde:	15 c0       	rjmp	.+42     	; 0x1e0a <_ZN3I2C5writeEPhh+0xdc>
when VERIFY_ADDRESS:
			verify_write_address_sent();
when SEND_BYTE:
			send_data_byte(data[index]);
when VERIFY_DATA:
			verify_data_sent();
    1de0:	ce 01       	movw	r24, r28
    1de2:	8c df       	rcall	.-232    	; 0x1cfc <_ZN3I2C16verify_data_sentEv>
    1de4:	d3 cf       	rjmp	.-90     	; 0x1d8c <_ZN3I2C5writeEPhh+0x5e>
when STOP:
    1de6:	84 e9       	ldi	r24, 0x94	; 148
		fail();
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1de8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1dec:	88 e0       	ldi	r24, 0x08	; 8
	state = DONE;
    1dee:	88 83       	st	Y, r24
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <_ZN3I2C5writeEPhh+0xd6>
    1df2:	88 e0       	ldi	r24, 0x08	; 8
when VERIFY_DATA:
			verify_data_sent();
when STOP:
			stop();
otherwise:
			state = DONE;
    1df4:	88 83       	st	Y, r24
    1df6:	06 c0       	rjmp	.+12     	; 0x1e04 <_ZN3I2C5writeEPhh+0xd6>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return I2C_SUCCESS;
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	08 c0       	rjmp	.+16     	; 0x1e0e <_ZN3I2C5writeEPhh+0xe0>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
	{
		if (fail_count >= MAX_FAIL_COUNT)
			return I2C_FAILURE;
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	05 c0       	rjmp	.+10     	; 0x1e0e <_ZN3I2C5writeEPhh+0xe0>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
			stop();
otherwise:
			state = DONE;
		}
	}
	return I2C_SUCCESS;
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <_ZN3I2C5writeEPhh+0xe0>
    1e0a:	e8 81       	ld	r30, Y
int I2C::write (uint8_t * data, uint8_t size)
{

	copy_range(data, buffer, size);
	reset(size);
	while (state != DONE)
    1e0c:	c2 cf       	rjmp	.-124    	; 0x1d92 <_ZN3I2C5writeEPhh+0x64>
    1e0e:	df 91       	pop	r29
otherwise:
			state = DONE;
		}
	}
	return I2C_SUCCESS;
}
    1e10:	cf 91       	pop	r28
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	ef 90       	pop	r14
    1e1a:	df 90       	pop	r13
    1e1c:	cf 90       	pop	r12
    1e1e:	bf 90       	pop	r11
    1e20:	af 90       	pop	r10
    1e22:	9f 90       	pop	r9
    1e24:	08 95       	ret

00001e26 <_ZN3I2C16verify_data_readEv>:
    1e26:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		fail();
}

void I2C::verify_data_read ()
{
	if (!interrupt_flag_set())
    1e2a:	22 23       	and	r18, r18
    1e2c:	fc f4       	brge	.+62     	; 0x1e6c <_ZN3I2C16verify_data_readEv+0x46>
		return;
	bool last_byte = !(TWCR & (1 << TWEA));
    1e2e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1e32:	26 ff       	sbrs	r18, 6
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <_ZN3I2C16verify_data_readEv+0x16>
    1e36:	40 e5       	ldi	r20, 0x50	; 80
	State next_state = last_byte ? STOP : READ_BYTE;
    1e38:	65 e0       	ldi	r22, 0x05	; 5
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <_ZN3I2C16verify_data_readEv+0x1a>
void I2C::verify_data_read ()
{
	if (!interrupt_flag_set())
		return;
	bool last_byte = !(TWCR & (1 << TWEA));
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1e3c:	48 e5       	ldi	r20, 0x58	; 88
	State next_state = last_byte ? STOP : READ_BYTE;
    1e3e:	67 e0       	ldi	r22, 0x07	; 7
	return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
	return (TWSR & 0xF8) == status;
    1e40:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	if (!interrupt_flag_set())
		return;
	bool last_byte = !(TWCR & (1 << TWEA));
	uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
	State next_state = last_byte ? STOP : READ_BYTE;
	if (check_status(status))
    1e44:	28 7f       	andi	r18, 0xF8	; 248
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	50 e0       	ldi	r21, 0x00	; 0
    1e4a:	24 17       	cp	r18, r20
    1e4c:	35 07       	cpc	r19, r21
    1e4e:	69 f4       	brne	.+26     	; 0x1e6a <_ZN3I2C16verify_data_readEv+0x44>
	{
		buffer[index++] = TWDR;
    1e50:	fc 01       	movw	r30, r24
    1e52:	24 85       	ldd	r18, Z+12	; 0x0c
    1e54:	31 e0       	ldi	r19, 0x01	; 1
    1e56:	32 0f       	add	r19, r18
    1e58:	34 87       	std	Z+12, r19	; 0x0c
    1e5a:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f1 1d       	adc	r31, r1
    1e62:	32 83       	std	Z+2, r19	; 0x02
		state = next_state;
    1e64:	fc 01       	movw	r30, r24
    1e66:	60 83       	st	Z, r22
    1e68:	08 95       	ret
	}
	else
		fail();
    1e6a:	0a cf       	rjmp	.-492    	; 0x1c80 <_ZN3I2C4failEv>
    1e6c:	08 95       	ret

00001e6e <_ZN3I2C4readEPhh>:
	}
	return I2C_SUCCESS;
}

int I2C::read (uint8_t * data, uint8_t size)
{
    1e6e:	bf 92       	push	r11
    1e70:	cf 92       	push	r12
    1e72:	df 92       	push	r13
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	ec 01       	movw	r28, r24
    1e82:	7b 01       	movw	r14, r22
    1e84:	c4 2e       	mov	r12, r20

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
	TWBR = (uint8_t)TWBR_VALUE;
    1e86:	88 e4       	ldi	r24, 0x48	; 72
    1e88:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	this->size = size;
    1e8c:	4d 87       	std	Y+13, r20	; 0x0d
	index = 0;
    1e8e:	1c 86       	std	Y+12, r1	; 0x0c
	fail_count = 0;
    1e90:	1e 86       	std	Y+14, r1	; 0x0e
	state = START;
    1e92:	18 82       	st	Y, r1
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    1e94:	e0 e0       	ldi	r30, 0x00	; 0
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e96:	0c eb       	ldi	r16, 0xBC	; 188
    1e98:	10 e0       	ldi	r17, 0x00	; 0
    1e9a:	0f 2e       	mov	r0, r31
    1e9c:	f4 ee       	ldi	r31, 0xE4	; 228
    1e9e:	bf 2e       	mov	r11, r31
    1ea0:	f0 2d       	mov	r31, r0
	state = VERIFY_START;
    1ea2:	dd 24       	eor	r13, r13
    1ea4:	d3 94       	inc	r13
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <_ZN3I2C4readEPhh+0x40>
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    1ea8:	e8 81       	ld	r30, Y
    1eaa:	e8 30       	cpi	r30, 0x08	; 8
    1eac:	51 f1       	breq	.+84     	; 0x1f02 <_ZN3I2C4readEPhh+0x94>
	{
		if (fail_count >= MAX_FAIL_COUNT)
    1eae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eb0:	85 30       	cpi	r24, 0x05	; 5
    1eb2:	78 f5       	brcc	.+94     	; 0x1f12 <_ZN3I2C4readEPhh+0xa4>
			return I2C_FAILURE;
		switch (state)
    1eb4:	8e 2f       	mov	r24, r30
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	91 05       	cpc	r25, r1
    1ebc:	00 f5       	brcc	.+64     	; 0x1efe <_ZN3I2C4readEPhh+0x90>
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e5 56       	subi	r30, 0x65	; 101
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__tablejump2__>
	state = START;
}

void I2C::start ()
{
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1ec8:	f8 01       	movw	r30, r16
    1eca:	b0 82       	st	Z, r11
	state = VERIFY_START;
    1ecc:	d8 82       	st	Y, r13
}

int I2C::read (uint8_t * data, uint8_t size)
{
	reset(size);
	while (state != DONE)
    1ece:	ed 2d       	mov	r30, r13
    1ed0:	ee cf       	rjmp	.-36     	; 0x1eae <_ZN3I2C4readEPhh+0x40>
		switch (state)
		{
		case START:
			start();
when VERIFY_START:
			verify_start();
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	e3 de       	rcall	.-570    	; 0x1c9c <_ZN3I2C12verify_startEv>
when SEND_ADDRESS:
    1ed6:	e8 cf       	rjmp	.-48     	; 0x1ea8 <_ZN3I2C4readEPhh+0x3a>
			send_address(READ);
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	ce 01       	movw	r24, r28
    1edc:	a8 de       	rcall	.-688    	; 0x1c2e <_ZN3I2C12send_addressENS_9DirectionE>
when VERIFY_ADDRESS:
			verify_read_address_sent();
    1ede:	e4 cf       	rjmp	.-56     	; 0x1ea8 <_ZN3I2C4readEPhh+0x3a>
    1ee0:	ce 01       	movw	r24, r28
when READ_BYTE:
    1ee2:	fc de       	rcall	.-520    	; 0x1cdc <_ZN3I2C24verify_read_address_sentEv>
			read_data_byte();
    1ee4:	e1 cf       	rjmp	.-62     	; 0x1ea8 <_ZN3I2C4readEPhh+0x3a>
    1ee6:	ce 01       	movw	r24, r28
when VERIFY_DATA:
    1ee8:	b5 de       	rcall	.-662    	; 0x1c54 <_ZN3I2C14read_data_byteEv>
			verify_data_read();
    1eea:	de cf       	rjmp	.-68     	; 0x1ea8 <_ZN3I2C4readEPhh+0x3a>
    1eec:	ce 01       	movw	r24, r28
    1eee:	9b df       	rcall	.-202    	; 0x1e26 <_ZN3I2C16verify_data_readEv>
when STOP:
    1ef0:	db cf       	rjmp	.-74     	; 0x1ea8 <_ZN3I2C4readEPhh+0x3a>
		fail();
}

void I2C::stop ()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ef2:	84 e9       	ldi	r24, 0x94	; 148
    1ef4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	state = DONE;
    1ef8:	88 e0       	ldi	r24, 0x08	; 8
    1efa:	88 83       	st	Y, r24
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <_ZN3I2C4readEPhh+0x94>
when VERIFY_DATA:
			verify_data_read();
when STOP:
			stop();
otherwise:
			state = DONE;
    1efe:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
	copy_range(buffer, data, size);
    1f00:	88 83       	st	Y, r24
    1f02:	4c 2d       	mov	r20, r12
    1f04:	b7 01       	movw	r22, r14
    1f06:	ce 01       	movw	r24, r28
    1f08:	02 96       	adiw	r24, 0x02	; 2
    1f0a:	80 de       	rcall	.-768    	; 0x1c0c <_Z10copy_rangePhS_h>
	return I2C_SUCCESS;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <_ZN3I2C4readEPhh+0xa8>
{
	reset(size);
	while (state != DONE)
	{
		if (fail_count >= MAX_FAIL_COUNT)
			return I2C_FAILURE;
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
			state = DONE;
		}
	}
	copy_range(buffer, data, size);
	return I2C_SUCCESS;
}
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	bf 90       	pop	r11
    1f28:	08 95       	ret

00001f2a <_ZN5I2CIOC1Ev>:
	Wire.read (&receivedVal,1 );
	retVal = ( _dirMask &  receivedVal);

//	}
	return ( retVal );
}
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	12 82       	std	Z+2, r1	; 0x02
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	81 83       	std	Z+1, r24	; 0x01
    1f32:	10 82       	st	Z, r1
    1f34:	13 82       	std	Z+3, r1	; 0x03
    1f36:	08 95       	ret

00001f38 <_ZN5I2CIO5beginEh>:
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	ec 01       	movw	r28, r24
    1f3e:	6a 83       	std	Y+2, r22	; 0x02
    1f40:	8c eb       	ldi	r24, 0xBC	; 188
    1f42:	93 e0       	ldi	r25, 0x03	; 3
    1f44:	70 de       	rcall	.-800    	; 0x1c26 <_ZN3I2C11set_addressEh>
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	be 01       	movw	r22, r28
    1f4a:	8c eb       	ldi	r24, 0xBC	; 188
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	8f df       	rcall	.-226    	; 0x1e6e <_ZN3I2C4readEPhh>
    1f50:	88 83       	st	Y, r24
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <_ZN5I2CIO8portModeEh>:
    1f5c:	61 11       	cpse	r22, r1
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <_ZN5I2CIO8portModeEh+0xc>
    1f60:	2f ef       	ldi	r18, 0xFF	; 255
    1f62:	fc 01       	movw	r30, r24
    1f64:	21 83       	std	Z+1, r18	; 0x01
    1f66:	08 95       	ret
    1f68:	fc 01       	movw	r30, r24
    1f6a:	11 82       	std	Z+1, r1	; 0x01
    1f6c:	08 95       	ret

00001f6e <_ZN5I2CIO5writeEh>:
	// outputs updating the output shadow of the device

	//
	// 15-FEB-2018 - fix, all I/Os initialized as input must be written as HIGH
	//    _shadow = ( value & ~(_dirMask) );
	_shadow = ( value | _dirMask );
    1f6e:	fc 01       	movw	r30, r24
    1f70:	21 81       	ldd	r18, Z+1	; 0x01
    1f72:	62 2b       	or	r22, r18
    1f74:	60 83       	st	Z, r22


	Wire.write ( &_shadow,1 );
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	bc 01       	movw	r22, r24
    1f7a:	8c eb       	ldi	r24, 0xBC	; 188
    1f7c:	93 e0       	ldi	r25, 0x03	; 3
    1f7e:	d7 de       	rcall	.-594    	; 0x1d2e <_ZN3I2C5writeEPhh>

//	}
	return ( (status == 0) );
}
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	08 95       	ret

00001f86 <_ZN3LCD15setBacklightPinEh14t_backlightPol>:
	for (uint8_t i = 0; i < 8; i++)
	{
		write(pgm_read_byte_near(charmap++));
		_delay_us(40);
	}
}
    1f86:	08 95       	ret

00001f88 <_ZN3LCD12setBacklightEh>:
    1f88:	08 95       	ret

00001f8a <_ZN3LCD4sendEhh>:
    1f8a:	08 95       	ret

00001f8c <_ZN3LCD5writeEh>:
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	ed 91       	ld	r30, X+
    1f90:	fc 91       	ld	r31, X
    1f92:	00 84       	ldd	r0, Z+8	; 0x08
    1f94:	f1 85       	ldd	r31, Z+9	; 0x09
    1f96:	e0 2d       	mov	r30, r0
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	09 95       	icall
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	08 95       	ret

00001fa2 <_ZN3LCDC1Ev>:
    1fa2:	28 e7       	ldi	r18, 0x78	; 120
    1fa4:	32 e0       	ldi	r19, 0x02	; 2
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	31 83       	std	Z+1, r19	; 0x01
    1faa:	20 83       	st	Z, r18
    1fac:	08 95       	ret

00001fae <_ZN3LCD9backlightEv>:
    1fae:	dc 01       	movw	r26, r24
    1fb0:	ed 91       	ld	r30, X+
    1fb2:	fc 91       	ld	r31, X
    1fb4:	04 80       	ldd	r0, Z+4	; 0x04
    1fb6:	f5 81       	ldd	r31, Z+5	; 0x05
    1fb8:	e0 2d       	mov	r30, r0
    1fba:	6f ef       	ldi	r22, 0xFF	; 255
    1fbc:	09 95       	icall
    1fbe:	08 95       	ret

00001fc0 <_ZN3LCD7commandEh>:
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	ed 91       	ld	r30, X+
    1fc4:	fc 91       	ld	r31, X
    1fc6:	00 84       	ldd	r0, Z+8	; 0x08
    1fc8:	f1 85       	ldd	r31, Z+9	; 0x09
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	09 95       	icall
    1fd0:	08 95       	ret

00001fd2 <_ZN3LCD5clearEv>:
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	f5 df       	rcall	.-22     	; 0x1fc0 <_ZN3LCD7commandEh>
    1fd6:	8f e3       	ldi	r24, 0x3F	; 63
    1fd8:	9f e1       	ldi	r25, 0x1F	; 31
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <_ZN3LCD5clearEv+0x8>
    1fde:	00 c0       	rjmp	.+0      	; 0x1fe0 <_ZN3LCD5clearEv+0xe>
    1fe0:	00 00       	nop
    1fe2:	08 95       	ret

00001fe4 <_ZN3LCD9setCursorEhh>:
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	28 97       	sbiw	r28, 0x08	; 8
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	19 82       	std	Y+1, r1	; 0x01
    1ffc:	80 e4       	ldi	r24, 0x40	; 64
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	94 e1       	ldi	r25, 0x14	; 20
    2002:	9b 83       	std	Y+3, r25	; 0x03
    2004:	94 e5       	ldi	r25, 0x54	; 84
    2006:	9c 83       	std	Y+4, r25	; 0x04
    2008:	1d 82       	std	Y+5, r1	; 0x05
    200a:	8e 83       	std	Y+6, r24	; 0x06
    200c:	80 e1       	ldi	r24, 0x10	; 16
    200e:	8f 83       	std	Y+7, r24	; 0x07
    2010:	80 e5       	ldi	r24, 0x50	; 80
    2012:	88 87       	std	Y+8, r24	; 0x08
    2014:	85 81       	ldd	r24, Z+5	; 0x05
    2016:	48 17       	cp	r20, r24
    2018:	10 f0       	brcs	.+4      	; 0x201e <_ZN3LCD9setCursorEhh+0x3a>
    201a:	4f ef       	ldi	r20, 0xFF	; 255
    201c:	48 0f       	add	r20, r24
    201e:	96 81       	ldd	r25, Z+6	; 0x06
    2020:	90 31       	cpi	r25, 0x10	; 16
    2022:	61 f4       	brne	.+24     	; 0x203c <_ZN3LCD9setCursorEhh+0x58>
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	51 f4       	brne	.+20     	; 0x203c <_ZN3LCD9setCursorEhh+0x58>
    2028:	de 01       	movw	r26, r28
    202a:	a4 0f       	add	r26, r20
    202c:	b1 1d       	adc	r27, r1
    202e:	15 96       	adiw	r26, 0x05	; 5
    2030:	8c 91       	ld	r24, X
    2032:	68 0f       	add	r22, r24
    2034:	60 68       	ori	r22, 0x80	; 128
    2036:	cf 01       	movw	r24, r30
    2038:	c3 df       	rcall	.-122    	; 0x1fc0 <_ZN3LCD7commandEh>
    203a:	09 c0       	rjmp	.+18     	; 0x204e <_ZN3LCD9setCursorEhh+0x6a>
    203c:	de 01       	movw	r26, r28
    203e:	a4 0f       	add	r26, r20
    2040:	b1 1d       	adc	r27, r1
    2042:	11 96       	adiw	r26, 0x01	; 1
    2044:	9c 91       	ld	r25, X
    2046:	69 0f       	add	r22, r25
    2048:	60 68       	ori	r22, 0x80	; 128
    204a:	cf 01       	movw	r24, r30
    204c:	b9 df       	rcall	.-142    	; 0x1fc0 <_ZN3LCD7commandEh>
    204e:	28 96       	adiw	r28, 0x08	; 8
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <_ZN3LCD7displayEv>:
    2060:	fc 01       	movw	r30, r24
    2062:	63 81       	ldd	r22, Z+3	; 0x03
    2064:	26 2f       	mov	r18, r22
    2066:	24 60       	ori	r18, 0x04	; 4
    2068:	23 83       	std	Z+3, r18	; 0x03
    206a:	6c 60       	ori	r22, 0x0C	; 12
    206c:	a9 cf       	rjmp	.-174    	; 0x1fc0 <_ZN3LCD7commandEh>
    206e:	08 95       	ret

00002070 <_ZN3LCD5beginEhhh>:
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	ec 01       	movw	r28, r24
    2076:	42 30       	cpi	r20, 0x02	; 2
    2078:	18 f0       	brcs	.+6      	; 0x2080 <_ZN3LCD5beginEhhh+0x10>
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	88 60       	ori	r24, 0x08	; 8
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	4d 83       	std	Y+5, r20	; 0x05
    2082:	6e 83       	std	Y+6, r22	; 0x06
    2084:	22 23       	and	r18, r18
    2086:	29 f0       	breq	.+10     	; 0x2092 <_ZN3LCD5beginEhhh+0x22>
    2088:	41 30       	cpi	r20, 0x01	; 1
    208a:	19 f4       	brne	.+6      	; 0x2092 <_ZN3LCD5beginEhhh+0x22>
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	2f ef       	ldi	r18, 0xFF	; 255
    2094:	81 ee       	ldi	r24, 0xE1	; 225
    2096:	94 e0       	ldi	r25, 0x04	; 4
    2098:	21 50       	subi	r18, 0x01	; 1
    209a:	80 40       	sbci	r24, 0x00	; 0
    209c:	90 40       	sbci	r25, 0x00	; 0
    209e:	e1 f7       	brne	.-8      	; 0x2098 <_ZN3LCD5beginEhhh+0x28>
    20a0:	00 c0       	rjmp	.+0      	; 0x20a2 <_ZN3LCD5beginEhhh+0x32>
    20a2:	00 00       	nop
    20a4:	6a 81       	ldd	r22, Y+2	; 0x02
    20a6:	64 fd       	sbrc	r22, 4
    20a8:	3d c0       	rjmp	.+122    	; 0x2124 <_ZN3LCD5beginEhhh+0xb4>
    20aa:	e8 81       	ld	r30, Y
    20ac:	f9 81       	ldd	r31, Y+1	; 0x01
    20ae:	00 84       	ldd	r0, Z+8	; 0x08
    20b0:	f1 85       	ldd	r31, Z+9	; 0x09
    20b2:	e0 2d       	mov	r30, r0
    20b4:	42 e0       	ldi	r20, 0x02	; 2
    20b6:	63 e0       	ldi	r22, 0x03	; 3
    20b8:	ce 01       	movw	r24, r28
    20ba:	09 95       	icall
    20bc:	8f e4       	ldi	r24, 0x4F	; 79
    20be:	96 e4       	ldi	r25, 0x46	; 70
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <_ZN3LCD5beginEhhh+0x50>
    20c4:	00 c0       	rjmp	.+0      	; 0x20c6 <_ZN3LCD5beginEhhh+0x56>
    20c6:	00 00       	nop
    20c8:	e8 81       	ld	r30, Y
    20ca:	f9 81       	ldd	r31, Y+1	; 0x01
    20cc:	00 84       	ldd	r0, Z+8	; 0x08
    20ce:	f1 85       	ldd	r31, Z+9	; 0x09
    20d0:	e0 2d       	mov	r30, r0
    20d2:	42 e0       	ldi	r20, 0x02	; 2
    20d4:	63 e0       	ldi	r22, 0x03	; 3
    20d6:	ce 01       	movw	r24, r28
    20d8:	09 95       	icall
    20da:	87 e5       	ldi	r24, 0x57	; 87
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <_ZN3LCD5beginEhhh+0x6e>
    20e2:	00 c0       	rjmp	.+0      	; 0x20e4 <_ZN3LCD5beginEhhh+0x74>
    20e4:	00 00       	nop
    20e6:	e8 81       	ld	r30, Y
    20e8:	f9 81       	ldd	r31, Y+1	; 0x01
    20ea:	00 84       	ldd	r0, Z+8	; 0x08
    20ec:	f1 85       	ldd	r31, Z+9	; 0x09
    20ee:	e0 2d       	mov	r30, r0
    20f0:	42 e0       	ldi	r20, 0x02	; 2
    20f2:	63 e0       	ldi	r22, 0x03	; 3
    20f4:	ce 01       	movw	r24, r28
    20f6:	09 95       	icall
    20f8:	87 e5       	ldi	r24, 0x57	; 87
    20fa:	92 e0       	ldi	r25, 0x02	; 2
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <_ZN3LCD5beginEhhh+0x8c>
    2100:	00 c0       	rjmp	.+0      	; 0x2102 <_ZN3LCD5beginEhhh+0x92>
    2102:	00 00       	nop
    2104:	e8 81       	ld	r30, Y
    2106:	f9 81       	ldd	r31, Y+1	; 0x01
    2108:	00 84       	ldd	r0, Z+8	; 0x08
    210a:	f1 85       	ldd	r31, Z+9	; 0x09
    210c:	e0 2d       	mov	r30, r0
    210e:	42 e0       	ldi	r20, 0x02	; 2
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	ce 01       	movw	r24, r28
    2114:	09 95       	icall
    2116:	87 e5       	ldi	r24, 0x57	; 87
    2118:	92 e0       	ldi	r25, 0x02	; 2
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <_ZN3LCD5beginEhhh+0xaa>
    211e:	00 c0       	rjmp	.+0      	; 0x2120 <_ZN3LCD5beginEhhh+0xb0>
    2120:	00 00       	nop
    2122:	1d c0       	rjmp	.+58     	; 0x215e <_ZN3LCD5beginEhhh+0xee>
    2124:	60 62       	ori	r22, 0x20	; 32
    2126:	ce 01       	movw	r24, r28
    2128:	4b df       	rcall	.-362    	; 0x1fc0 <_ZN3LCD7commandEh>
    212a:	8f e4       	ldi	r24, 0x4F	; 79
    212c:	96 e4       	ldi	r25, 0x46	; 70
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <_ZN3LCD5beginEhhh+0xbe>
    2132:	00 c0       	rjmp	.+0      	; 0x2134 <_ZN3LCD5beginEhhh+0xc4>
    2134:	00 00       	nop
    2136:	6a 81       	ldd	r22, Y+2	; 0x02
    2138:	60 62       	ori	r22, 0x20	; 32
    213a:	ce 01       	movw	r24, r28
    213c:	41 df       	rcall	.-382    	; 0x1fc0 <_ZN3LCD7commandEh>
    213e:	87 e5       	ldi	r24, 0x57	; 87
    2140:	92 e0       	ldi	r25, 0x02	; 2
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <_ZN3LCD5beginEhhh+0xd2>
    2146:	00 c0       	rjmp	.+0      	; 0x2148 <_ZN3LCD5beginEhhh+0xd8>
    2148:	00 00       	nop
    214a:	6a 81       	ldd	r22, Y+2	; 0x02
    214c:	60 62       	ori	r22, 0x20	; 32
    214e:	ce 01       	movw	r24, r28
    2150:	37 df       	rcall	.-402    	; 0x1fc0 <_ZN3LCD7commandEh>
    2152:	87 e5       	ldi	r24, 0x57	; 87
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <_ZN3LCD5beginEhhh+0xe6>
    215a:	00 c0       	rjmp	.+0      	; 0x215c <_ZN3LCD5beginEhhh+0xec>
    215c:	00 00       	nop
    215e:	6a 81       	ldd	r22, Y+2	; 0x02
    2160:	60 62       	ori	r22, 0x20	; 32
    2162:	ce 01       	movw	r24, r28
    2164:	2d df       	rcall	.-422    	; 0x1fc0 <_ZN3LCD7commandEh>
    2166:	8f ee       	ldi	r24, 0xEF	; 239
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <_ZN3LCD5beginEhhh+0xfa>
    216e:	00 c0       	rjmp	.+0      	; 0x2170 <_ZN3LCD5beginEhhh+0x100>
    2170:	00 00       	nop
    2172:	84 e0       	ldi	r24, 0x04	; 4
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	ce 01       	movw	r24, r28
    2178:	73 df       	rcall	.-282    	; 0x2060 <_ZN3LCD7displayEv>
    217a:	ce 01       	movw	r24, r28
    217c:	2a df       	rcall	.-428    	; 0x1fd2 <_ZN3LCD5clearEv>
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	8c 83       	std	Y+4, r24	; 0x04
    2182:	66 e0       	ldi	r22, 0x06	; 6
    2184:	ce 01       	movw	r24, r28
    2186:	1c df       	rcall	.-456    	; 0x1fc0 <_ZN3LCD7commandEh>
    2188:	ce 01       	movw	r24, r28
    218a:	11 df       	rcall	.-478    	; 0x1fae <_ZN3LCD9backlightEv>
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	08 95       	ret

00002192 <_ZN3LCD5printEPKc>:
	return 1;             // assume OK
}


void LCD::print(const char *str)
{
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	8c 01       	movw	r16, r24
	while(*str != 0x00)
    21a4:	db 01       	movw	r26, r22
    21a6:	9c 91       	ld	r25, X
    21a8:	99 23       	and	r25, r25
    21aa:	01 f1       	breq	.+64     	; 0x21ec <_ZN3LCD5printEPKc+0x5a>
    21ac:	eb 01       	movw	r28, r22
	{
		printf("PrintVal: %d\n",str);
    21ae:	0f 2e       	mov	r0, r31
    21b0:	f6 e6       	ldi	r31, 0x66	; 102
    21b2:	ef 2e       	mov	r14, r31
    21b4:	f2 e0       	ldi	r31, 0x02	; 2
    21b6:	ff 2e       	mov	r15, r31
    21b8:	f0 2d       	mov	r31, r0
    21ba:	6e 01       	movw	r12, r28
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	ff 92       	push	r15
    21c2:	ef 92       	push	r14
    21c4:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printf>
    21c8:	21 96       	adiw	r28, 0x01	; 1
		write(*(str++));
    21ca:	d8 01       	movw	r26, r16
    21cc:	ed 91       	ld	r30, X+
    21ce:	fc 91       	ld	r31, X
    21d0:	06 80       	ldd	r0, Z+6	; 0x06
    21d2:	f7 81       	ldd	r31, Z+7	; 0x07
    21d4:	e0 2d       	mov	r30, r0
    21d6:	d6 01       	movw	r26, r12
    21d8:	6c 91       	ld	r22, X
    21da:	c8 01       	movw	r24, r16
    21dc:	09 95       	icall
}


void LCD::print(const char *str)
{
	while(*str != 0x00)
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	88 81       	ld	r24, Y
    21e8:	81 11       	cpse	r24, r1
    21ea:	e7 cf       	rjmp	.-50     	; 0x21ba <_ZN3LCD5printEPKc+0x28>
		printf("PrintVal: %d\n",str);
		write(*(str++));

	}

    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	df 90       	pop	r13
    21fa:	cf 90       	pop	r12
    21fc:	08 95       	ret

000021fe <_ZN17LiquidCrystal_I2C15setBacklightPinEh14t_backlightPol>:
	// Initialise pin mapping
	_data_pins[0] = ( 1 << d4 );
	_data_pins[1] = ( 1 << d5 );
	_data_pins[2] = ( 1 << d6 );
	_data_pins[3] = ( 1 << d7 );
}
    21fe:	21 e0       	ldi	r18, 0x01	; 1
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <__stack+0x5>
    2202:	22 0f       	add	r18, r18
    2204:	6a 95       	dec	r22
    2206:	ea f7       	brpl	.-6      	; 0x2202 <__stack+0x3>
    2208:	dc 01       	movw	r26, r24
    220a:	19 96       	adiw	r26, 0x09	; 9
    220c:	2c 93       	st	X, r18
    220e:	19 97       	sbiw	r26, 0x09	; 9
    2210:	17 96       	adiw	r26, 0x07	; 7
    2212:	4c 93       	st	X, r20
    2214:	17 97       	sbiw	r26, 0x07	; 7
    2216:	ed 91       	ld	r30, X+
    2218:	fc 91       	ld	r31, X
    221a:	04 80       	ldd	r0, Z+4	; 0x04
    221c:	f5 81       	ldd	r31, Z+5	; 0x05
    221e:	e0 2d       	mov	r30, r0
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	09 95       	icall
    2224:	08 95       	ret

00002226 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    2226:	fc 01       	movw	r30, r24
    2228:	81 85       	ldd	r24, Z+9	; 0x09
    222a:	88 23       	and	r24, r24
    222c:	89 f0       	breq	.+34     	; 0x2250 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    222e:	97 81       	ldd	r25, Z+7	; 0x07
    2230:	91 11       	cpse	r25, r1
    2232:	03 c0       	rjmp	.+6      	; 0x223a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    2234:	61 11       	cpse	r22, r1
    2236:	05 c0       	rjmp	.+10     	; 0x2242 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    223a:	91 30       	cpi	r25, 0x01	; 1
    223c:	21 f4       	brne	.+8      	; 0x2246 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    223e:	61 11       	cpse	r22, r1
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    2242:	82 87       	std	Z+10, r24	; 0x0a
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    2246:	12 86       	std	Z+10, r1	; 0x0a
    2248:	62 85       	ldd	r22, Z+10	; 0x0a
    224a:	cf 01       	movw	r24, r30
    224c:	0b 96       	adiw	r24, 0x0b	; 11
    224e:	8f ce       	rjmp	.-738    	; 0x1f6e <_ZN5I2CIO5writeEh>
    2250:	08 95       	ret

00002252 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    2252:	6f 92       	push	r6
    2254:	7f 92       	push	r7
    2256:	8f 92       	push	r8
    2258:	af 92       	push	r10
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	3c 01       	movw	r6, r24
    2270:	d6 2e       	mov	r13, r22
    2272:	f4 2e       	mov	r15, r20
    2274:	12 2f       	mov	r17, r18
    2276:	95 de       	rcall	.-726    	; 0x1fa2 <_ZN3LCDC1Ev>
    2278:	86 e8       	ldi	r24, 0x86	; 134
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	f3 01       	movw	r30, r6
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
    2282:	c3 01       	movw	r24, r6
    2284:	0b 96       	adiw	r24, 0x0b	; 11
    2286:	51 de       	rcall	.-862    	; 0x1f2a <_ZN5I2CIOC1Ev>
    2288:	f3 01       	movw	r30, r6
    228a:	d0 86       	std	Z+8, r13	; 0x08
    228c:	11 86       	std	Z+9, r1	; 0x09
    228e:	12 86       	std	Z+10, r1	; 0x0a
    2290:	17 82       	std	Z+7, r1	; 0x07
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	98 2f       	mov	r25, r24
    2296:	01 c0       	rjmp	.+2      	; 0x229a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x48>
    2298:	99 0f       	add	r25, r25
    229a:	fa 94       	dec	r15
    229c:	ea f7       	brpl	.-6      	; 0x2298 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x46>
    229e:	97 87       	std	Z+15, r25	; 0x0f
    22a0:	98 2f       	mov	r25, r24
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x54>
    22a4:	99 0f       	add	r25, r25
    22a6:	1a 95       	dec	r17
    22a8:	ea f7       	brpl	.-6      	; 0x22a4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x52>
    22aa:	90 8b       	std	Z+16, r25	; 0x10
    22ac:	98 2f       	mov	r25, r24
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x60>
    22b0:	99 0f       	add	r25, r25
    22b2:	0a 95       	dec	r16
    22b4:	ea f7       	brpl	.-6      	; 0x22b0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x5e>
    22b6:	91 8b       	std	Z+17, r25	; 0x11
    22b8:	98 2f       	mov	r25, r24
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6c>
    22bc:	99 0f       	add	r25, r25
    22be:	ea 94       	dec	r14
    22c0:	ea f7       	brpl	.-6      	; 0x22bc <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6a>
    22c2:	92 8b       	std	Z+18, r25	; 0x12
    22c4:	98 2f       	mov	r25, r24
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x78>
    22c8:	99 0f       	add	r25, r25
    22ca:	ca 94       	dec	r12
    22cc:	ea f7       	brpl	.-6      	; 0x22c8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x76>
    22ce:	93 8b       	std	Z+19, r25	; 0x13
    22d0:	98 2f       	mov	r25, r24
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x84>
    22d4:	99 0f       	add	r25, r25
    22d6:	aa 94       	dec	r10
    22d8:	ea f7       	brpl	.-6      	; 0x22d4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x82>
    22da:	94 8b       	std	Z+20, r25	; 0x14
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8e>
    22de:	88 0f       	add	r24, r24
    22e0:	8a 94       	dec	r8
    22e2:	ea f7       	brpl	.-6      	; 0x22de <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8c>
    22e4:	85 8b       	std	Z+21, r24	; 0x15
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	af 90       	pop	r10
    22f8:	8f 90       	pop	r8
    22fa:	7f 90       	pop	r7
    22fc:	6f 90       	pop	r6
    22fe:	08 95       	ret

00002300 <_ZN17LiquidCrystal_I2C4initEv>:
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	ec 01       	movw	r28, r24
    230a:	8c 01       	movw	r16, r24
    230c:	05 5f       	subi	r16, 0xF5	; 245
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	68 85       	ldd	r22, Y+8	; 0x08
    2312:	c8 01       	movw	r24, r16
    2314:	11 de       	rcall	.-990    	; 0x1f38 <_ZN5I2CIO5beginEh>
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	51 f4       	brne	.+20     	; 0x232e <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	c8 01       	movw	r24, r16
    231e:	1e de       	rcall	.-964    	; 0x1f5c <_ZN5I2CIO8portModeEh>
    2320:	1a 82       	std	Y+2, r1	; 0x02
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	c8 01       	movw	r24, r16
    2326:	23 de       	rcall	.-954    	; 0x1f6e <_ZN5I2CIO5writeEh>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <_ZN17LiquidCrystal_I2C4initEv+0x32>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	08 95       	ret

0000233c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	8c 01       	movw	r16, r24
    2348:	c6 2f       	mov	r28, r22
	_i2cio.write (data | _En);   // En HIGH
    234a:	7c 01       	movw	r14, r24
    234c:	8b e0       	ldi	r24, 0x0B	; 11
    234e:	e8 0e       	add	r14, r24
    2350:	f1 1c       	adc	r15, r1
    2352:	f8 01       	movw	r30, r16
    2354:	67 85       	ldd	r22, Z+15	; 0x0f
    2356:	6c 2b       	or	r22, r28
    2358:	c7 01       	movw	r24, r14
    235a:	09 de       	rcall	.-1006   	; 0x1f6e <_ZN5I2CIO5writeEh>
	_i2cio.write (data & ~_En);  // En LOW
    235c:	f8 01       	movw	r30, r16
    235e:	67 85       	ldd	r22, Z+15	; 0x0f
    2360:	60 95       	com	r22
    2362:	6c 23       	and	r22, r28
    2364:	c7 01       	movw	r24, r14
    2366:	03 de       	rcall	.-1018   	; 0x1f6e <_ZN5I2CIO5writeEh>
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	08 95       	ret

00002374 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode )
{
    2374:	dc 01       	movw	r26, r24
    2376:	fc 01       	movw	r30, r24
    2378:	04 96       	adiw	r24, 0x04	; 4
	uint8_t pinMapValue = 0;
    237a:	20 e0       	ldi	r18, 0x00	; 0

	// Map the value to LCD pin mapping
	// --------------------------------
	for ( uint8_t i = 0; i < 4; i++ )
	{
		if ( ( value & 0x1 ) == 1 )
    237c:	60 ff       	sbrs	r22, 0
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x10>
		{
			pinMapValue |= _data_pins[i];
    2380:	32 89       	ldd	r19, Z+18	; 0x12
    2382:	23 2b       	or	r18, r19
		}
		value = ( value >> 1 );
    2384:	66 95       	lsr	r22
    2386:	31 96       	adiw	r30, 0x01	; 1
{
	uint8_t pinMapValue = 0;

	// Map the value to LCD pin mapping
	// --------------------------------
	for ( uint8_t i = 0; i < 4; i++ )
    2388:	e8 17       	cp	r30, r24
    238a:	f9 07       	cpc	r31, r25
    238c:	b9 f7       	brne	.-18     	; 0x237c <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x8>
		value = ( value >> 1 );
	}

	// Is it a command or data
	// -----------------------
	if ( mode == LCD_DATA )
    238e:	41 30       	cpi	r20, 0x01	; 1
    2390:	19 f4       	brne	.+6      	; 0x2398 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x24>
	{
		mode = _Rs;
    2392:	51 96       	adiw	r26, 0x11	; 17
    2394:	4c 91       	ld	r20, X
    2396:	51 97       	sbiw	r26, 0x11	; 17
    2398:	1a 96       	adiw	r26, 0x0a	; 10
    239a:	9c 91       	ld	r25, X
    239c:	1a 97       	sbiw	r26, 0x0a	; 10
    239e:	62 2f       	mov	r22, r18
    23a0:	69 2b       	or	r22, r25
	}

	pinMapValue |= mode | _backlightStsMask;
	pulseEnable ( pinMapValue );
    23a2:	64 2b       	or	r22, r20
    23a4:	cd 01       	movw	r24, r26
    23a6:	ca cf       	rjmp	.-108    	; 0x233c <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    23a8:	08 95       	ret

000023aa <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode)
{
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	8c 01       	movw	r16, r24
    23b4:	c6 2f       	mov	r28, r22
    23b6:	d4 2f       	mov	r29, r20
	// No need to use the delay routines since the time taken to write takes
	// longer that what is needed both for toggling and enable pin an to execute
	// the command.

	if ( mode == FOUR_BITS )
    23b8:	42 30       	cpi	r20, 0x02	; 2
    23ba:	21 f4       	brne	.+8      	; 0x23c4 <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
	{
		write4bits( (value & 0x0F), COMMAND );
    23bc:	6f 70       	andi	r22, 0x0F	; 15
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	d9 df       	rcall	.-78     	; 0x2374 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
	}
	else
	{
		write4bits( (value >> 4), mode );
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	75 95       	asr	r23
    23c8:	67 95       	ror	r22
    23ca:	75 95       	asr	r23
    23cc:	67 95       	ror	r22
    23ce:	75 95       	asr	r23
    23d0:	67 95       	ror	r22
    23d2:	75 95       	asr	r23
    23d4:	67 95       	ror	r22
    23d6:	ce df       	rcall	.-100    	; 0x2374 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
		write4bits( (value & 0x0F), mode);
    23d8:	6c 2f       	mov	r22, r28
    23da:	6f 70       	andi	r22, 0x0F	; 15
    23dc:	4d 2f       	mov	r20, r29
    23de:	c8 01       	movw	r24, r16
    23e0:	c9 df       	rcall	.-110    	; 0x2374 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
	}
}
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	08 95       	ret

000023ec <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    23ec:	ff 92       	push	r15
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	ec 01       	movw	r28, r24
    23f8:	16 2f       	mov	r17, r22
    23fa:	04 2f       	mov	r16, r20
    23fc:	f2 2e       	mov	r15, r18

	init();     // Initialise the I2C expander interface
    23fe:	80 df       	rcall	.-256    	; 0x2300 <_ZN17LiquidCrystal_I2C4initEv>
	LCD::begin ( cols, lines, dotsize );
    2400:	2f 2d       	mov	r18, r15
    2402:	40 2f       	mov	r20, r16
    2404:	61 2f       	mov	r22, r17
    2406:	ce 01       	movw	r24, r28
    2408:	33 de       	rcall	.-922    	; 0x2070 <_ZN3LCD5beginEhhh>
}
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	08 95       	ret

00002416 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>:

void  Adafruit_7segment::println(unsigned char b, int base)
{
	print(b, base);
	println();
}
    2416:	60 31       	cpi	r22, 0x10	; 16
    2418:	08 f0       	brcs	.+2      	; 0x241c <_ZN20Adafruit_LEDBackpack13setBrightnessEh+0x6>
    241a:	6f e0       	ldi	r22, 0x0F	; 15
    241c:	60 6e       	ori	r22, 0xE0	; 224
    241e:	fc 01       	movw	r30, r24
    2420:	60 a3       	std	Z+32, r22	; 0x20
    2422:	bc 01       	movw	r22, r24
    2424:	60 5e       	subi	r22, 0xE0	; 224
    2426:	7f 4f       	sbci	r23, 0xFF	; 255
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	41 96       	adiw	r24, 0x11	; 17
    242c:	80 cc       	rjmp	.-1792   	; 0x1d2e <_ZN3I2C5writeEPhh>
    242e:	08 95       	ret

00002430 <_ZN20Adafruit_LEDBackpack9blinkRateEh>:
    2430:	64 30       	cpi	r22, 0x04	; 4
    2432:	08 f0       	brcs	.+2      	; 0x2436 <_ZN20Adafruit_LEDBackpack9blinkRateEh+0x6>
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	66 0f       	add	r22, r22
    2438:	61 68       	ori	r22, 0x81	; 129
    243a:	fc 01       	movw	r30, r24
    243c:	60 a3       	std	Z+32, r22	; 0x20
    243e:	bc 01       	movw	r22, r24
    2440:	60 5e       	subi	r22, 0xE0	; 224
    2442:	7f 4f       	sbci	r23, 0xFF	; 255
    2444:	41 e0       	ldi	r20, 0x01	; 1
    2446:	41 96       	adiw	r24, 0x11	; 17
    2448:	72 cc       	rjmp	.-1820   	; 0x1d2e <_ZN3I2C5writeEPhh>
    244a:	08 95       	ret

0000244c <_ZN20Adafruit_LEDBackpack5beginEh>:
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	ec 01       	movw	r28, r24
    2452:	68 8b       	std	Y+16, r22	; 0x10
    2454:	81 e2       	ldi	r24, 0x21	; 33
    2456:	88 a3       	std	Y+32, r24	; 0x20
    2458:	be 01       	movw	r22, r28
    245a:	60 5e       	subi	r22, 0xE0	; 224
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	41 e0       	ldi	r20, 0x01	; 1
    2460:	ce 01       	movw	r24, r28
    2462:	41 96       	adiw	r24, 0x11	; 17
    2464:	64 dc       	rcall	.-1848   	; 0x1d2e <_ZN3I2C5writeEPhh>
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	ce 01       	movw	r24, r28
    246a:	e2 df       	rcall	.-60     	; 0x2430 <_ZN20Adafruit_LEDBackpack9blinkRateEh>
    246c:	62 e0       	ldi	r22, 0x02	; 2
    246e:	ce 01       	movw	r24, r28
    2470:	d2 df       	rcall	.-92     	; 0x2416 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	08 95       	ret

00002478 <_ZN20Adafruit_LEDBackpack12writeDisplayEv>:
    2478:	dc 01       	movw	r26, r24
    247a:	90 96       	adiw	r26, 0x20	; 32
    247c:	1c 92       	st	X, r1
    247e:	90 97       	sbiw	r26, 0x20	; 32
    2480:	fc 01       	movw	r30, r24
    2482:	ac 01       	movw	r20, r24
    2484:	40 5f       	subi	r20, 0xF0	; 240
    2486:	5f 4f       	sbci	r21, 0xFF	; 255
    2488:	20 81       	ld	r18, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	32 96       	adiw	r30, 0x02	; 2
    248e:	27 8f       	std	Z+31, r18	; 0x1f
    2490:	90 a3       	std	Z+32, r25	; 0x20
    2492:	e4 17       	cp	r30, r20
    2494:	f5 07       	cpc	r31, r21
    2496:	c1 f7       	brne	.-16     	; 0x2488 <_ZN20Adafruit_LEDBackpack12writeDisplayEv+0x10>
    2498:	bd 01       	movw	r22, r26
    249a:	60 5e       	subi	r22, 0xE0	; 224
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	41 e1       	ldi	r20, 0x11	; 17
    24a0:	cd 01       	movw	r24, r26
    24a2:	41 96       	adiw	r24, 0x11	; 17
    24a4:	44 cc       	rjmp	.-1912   	; 0x1d2e <_ZN3I2C5writeEPhh>
    24a6:	08 95       	ret

000024a8 <_ZN17Adafruit_7segmentC1Eh>:
    24a8:	fc 01       	movw	r30, r24
    24aa:	e0 5c       	subi	r30, 0xC0	; 192
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	10 82       	st	Z, r1
    24b0:	41 96       	adiw	r24, 0x11	; 17
    24b2:	b9 cb       	rjmp	.-2190   	; 0x1c26 <_ZN3I2C11set_addressEh>
    24b4:	08 95       	ret

000024b6 <_ZN17Adafruit_7segment13writeDigitNumEhhb>:
    24b6:	65 30       	cpi	r22, 0x05	; 5
    24b8:	98 f4       	brcc	.+38     	; 0x24e0 <_ZN17Adafruit_7segment13writeDigitNumEhhb+0x2a>
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	66 0f       	add	r22, r22
    24be:	77 1f       	adc	r23, r23
    24c0:	fc 01       	movw	r30, r24
    24c2:	e6 0f       	add	r30, r22
    24c4:	f7 1f       	adc	r31, r23
    24c6:	a4 2f       	mov	r26, r20
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	a0 57       	subi	r26, 0x70	; 112
    24cc:	bd 4f       	sbci	r27, 0xFD	; 253
    24ce:	80 e8       	ldi	r24, 0x80	; 128
    24d0:	28 9f       	mul	r18, r24
    24d2:	90 01       	movw	r18, r0
    24d4:	11 24       	eor	r1, r1
    24d6:	8c 91       	ld	r24, X
    24d8:	28 2b       	or	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	31 83       	std	Z+1, r19	; 0x01
    24de:	20 83       	st	Z, r18
    24e0:	08 95       	ret

000024e2 <_ZN17Adafruit_7segment5writeEh>:
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	ec 01       	movw	r28, r24
    24e8:	6a 30       	cpi	r22, 0x0A	; 10
    24ea:	31 f4       	brne	.+12     	; 0x24f8 <_ZN17Adafruit_7segment5writeEh+0x16>
    24ec:	fc 01       	movw	r30, r24
    24ee:	e0 5c       	subi	r30, 0xC0	; 192
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	10 82       	st	Z, r1
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	16 c0       	rjmp	.+44     	; 0x2524 <_ZN17Adafruit_7segment5writeEh+0x42>
    24f8:	6d 30       	cpi	r22, 0x0D	; 13
    24fa:	39 f4       	brne	.+14     	; 0x250a <_ZN17Adafruit_7segment5writeEh+0x28>
    24fc:	fc 01       	movw	r30, r24
    24fe:	e0 5c       	subi	r30, 0xC0	; 192
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	10 82       	st	Z, r1
    2504:	21 e0       	ldi	r18, 0x01	; 1
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	15 c0       	rjmp	.+42     	; 0x2534 <_ZN17Adafruit_7segment5writeEh+0x52>
    250a:	40 ed       	ldi	r20, 0xD0	; 208
    250c:	46 0f       	add	r20, r22
    250e:	4a 30       	cpi	r20, 0x0A	; 10
    2510:	40 f4       	brcc	.+16     	; 0x2522 <_ZN17Adafruit_7segment5writeEh+0x40>
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	fc 01       	movw	r30, r24
    2516:	e0 5c       	subi	r30, 0xC0	; 192
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	cc df       	rcall	.-104    	; 0x24b6 <_ZN17Adafruit_7segment13writeDigitNumEhhb>
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <_ZN17Adafruit_7segment5writeEh+0x42>
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	fe 01       	movw	r30, r28
    2526:	e0 5c       	subi	r30, 0xC0	; 192
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	90 81       	ld	r25, Z
    252c:	21 e0       	ldi	r18, 0x01	; 1
    252e:	29 0f       	add	r18, r25
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	21 f0       	breq	.+8      	; 0x253c <_ZN17Adafruit_7segment5writeEh+0x5a>
    2534:	c0 5c       	subi	r28, 0xC0	; 192
    2536:	df 4f       	sbci	r29, 0xFF	; 255
    2538:	28 83       	st	Y, r18
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <_ZN17Adafruit_7segment5writeEh+0x62>
    253c:	c0 5c       	subi	r28, 0xC0	; 192
    253e:	df 4f       	sbci	r29, 0xFF	; 255
    2540:	9e 5f       	subi	r25, 0xFE	; 254
    2542:	98 83       	st	Y, r25
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <_ZN17Adafruit_7segment10printErrorEv>:
    254c:	fc 01       	movw	r30, r24
    254e:	80 e4       	ldi	r24, 0x40	; 64
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	93 83       	std	Z+3, r25	; 0x03
    2558:	82 83       	std	Z+2, r24	; 0x02
    255a:	15 82       	std	Z+5, r1	; 0x05
    255c:	14 82       	std	Z+4, r1	; 0x04
    255e:	97 83       	std	Z+7, r25	; 0x07
    2560:	86 83       	std	Z+6, r24	; 0x06
    2562:	91 87       	std	Z+9, r25	; 0x09
    2564:	80 87       	std	Z+8, r24	; 0x08
    2566:	08 95       	ret

00002568 <_ZN17Adafruit_7segment10printFloatEdhh>:
    2568:	2f 92       	push	r2
    256a:	3f 92       	push	r3
    256c:	4f 92       	push	r4
    256e:	5f 92       	push	r5
    2570:	6f 92       	push	r6
    2572:	7f 92       	push	r7
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	2b 97       	sbiw	r28, 0x0b	; 11
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	1c 01       	movw	r2, r24
    259e:	4d 83       	std	Y+5, r20	; 0x05
    25a0:	5e 83       	std	Y+6, r21	; 0x06
    25a2:	6f 83       	std	Y+7, r22	; 0x07
    25a4:	78 87       	std	Y+8, r23	; 0x08
    25a6:	2b 87       	std	Y+11, r18	; 0x0b
    25a8:	09 87       	std	Y+9, r16	; 0x09
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	a9 01       	movw	r20, r18
    25b0:	6d 81       	ldd	r22, Y+5	; 0x05
    25b2:	7e 81       	ldd	r23, Y+6	; 0x06
    25b4:	8f 81       	ldd	r24, Y+7	; 0x07
    25b6:	98 85       	ldd	r25, Y+8	; 0x08
    25b8:	0b d7       	rcall	.+3606   	; 0x33d0 <__cmpsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	0c f0       	brlt	.+2      	; 0x25c0 <_ZN17Adafruit_7segment10printFloatEdhh+0x58>
    25be:	32 c1       	rjmp	.+612    	; 0x2824 <_ZN17Adafruit_7segment10printFloatEdhh+0x2bc>
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	af 81       	ldd	r26, Y+7	; 0x07
    25c6:	b8 85       	ldd	r27, Y+8	; 0x08
    25c8:	b0 58       	subi	r27, 0x80	; 128
    25ca:	8d 83       	std	Y+5, r24	; 0x05
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	af 83       	std	Y+7, r26	; 0x07
    25d0:	b8 87       	std	Y+8, r27	; 0x08
    25d2:	91 e0       	ldi	r25, 0x01	; 1
    25d4:	9a 87       	std	Y+10, r25	; 0x0a
    25d6:	a3 e0       	ldi	r26, 0x03	; 3
    25d8:	a9 83       	std	Y+1, r26	; 0x01
    25da:	27 c1       	rjmp	.+590    	; 0x282a <_ZN17Adafruit_7segment10printFloatEdhh+0x2c2>
    25dc:	c3 01       	movw	r24, r6
    25de:	b2 01       	movw	r22, r4
    25e0:	96 d7       	rcall	.+3884   	; 0x350e <__floatsisf>
    25e2:	9b 01       	movw	r18, r22
    25e4:	ac 01       	movw	r20, r24
    25e6:	c7 01       	movw	r24, r14
    25e8:	b6 01       	movw	r22, r12
    25ea:	0e 94 37 1b 	call	0x366e	; 0x366e <__mulsf3>
    25ee:	6b 01       	movw	r12, r22
    25f0:	7c 01       	movw	r14, r24
    25f2:	0f 5f       	subi	r16, 0xFF	; 255
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	0a 15       	cp	r16, r10
    25f8:	1b 05       	cpc	r17, r11
    25fa:	81 f7       	brne	.-32     	; 0x25dc <_ZN17Adafruit_7segment10printFloatEdhh+0x74>
    25fc:	2d 81       	ldd	r18, Y+5	; 0x05
    25fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2600:	4f 81       	ldd	r20, Y+7	; 0x07
    2602:	58 85       	ldd	r21, Y+8	; 0x08
    2604:	c7 01       	movw	r24, r14
    2606:	b6 01       	movw	r22, r12
    2608:	0e 94 37 1b 	call	0x366e	; 0x366e <__mulsf3>
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	79 d6       	rcall	.+3314   	; 0x3308 <__addsf3>
    2616:	4d d7       	rcall	.+3738   	; 0x34b2 <__fixunssfsi>
    2618:	2b 01       	movw	r4, r22
    261a:	3c 01       	movw	r6, r24
    261c:	99 81       	ldd	r25, Y+1	; 0x01
    261e:	e9 2f       	mov	r30, r25
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	1e 16       	cp	r1, r30
    2624:	1f 06       	cpc	r1, r31
    2626:	a4 f0       	brlt	.+40     	; 0x2650 <_ZN17Adafruit_7segment10printFloatEdhh+0xe8>
    2628:	81 2c       	mov	r8, r1
    262a:	91 2c       	mov	r9, r1
    262c:	54 01       	movw	r10, r8
    262e:	83 94       	inc	r8
    2630:	48 14       	cp	r4, r8
    2632:	59 04       	cpc	r5, r9
    2634:	6a 04       	cpc	r6, r10
    2636:	7b 04       	cpc	r7, r11
    2638:	08 f4       	brcc	.+2      	; 0x263c <_ZN17Adafruit_7segment10printFloatEdhh+0xd4>
    263a:	4a c0       	rjmp	.+148    	; 0x26d0 <_ZN17Adafruit_7segment10printFloatEdhh+0x168>
    263c:	99 85       	ldd	r25, Y+9	; 0x09
    263e:	89 2f       	mov	r24, r25
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	a0 e0       	ldi	r26, 0x00	; 0
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	ab 83       	std	Y+3, r26	; 0x03
    264c:	bc 83       	std	Y+4, r27	; 0x04
    264e:	1f c0       	rjmp	.+62     	; 0x268e <_ZN17Adafruit_7segment10printFloatEdhh+0x126>
    2650:	00 e0       	ldi	r16, 0x00	; 0
    2652:	10 e0       	ldi	r17, 0x00	; 0
    2654:	81 2c       	mov	r8, r1
    2656:	91 2c       	mov	r9, r1
    2658:	54 01       	movw	r10, r8
    265a:	83 94       	inc	r8
    265c:	99 85       	ldd	r25, Y+9	; 0x09
    265e:	89 2f       	mov	r24, r25
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	ab 83       	std	Y+3, r26	; 0x03
    266c:	bc 83       	std	Y+4, r27	; 0x04
    266e:	a5 01       	movw	r20, r10
    2670:	94 01       	movw	r18, r8
    2672:	69 81       	ldd	r22, Y+1	; 0x01
    2674:	7a 81       	ldd	r23, Y+2	; 0x02
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__mulsi3>
    267e:	4b 01       	movw	r8, r22
    2680:	5c 01       	movw	r10, r24
    2682:	0f 5f       	subi	r16, 0xFF	; 255
    2684:	1f 4f       	sbci	r17, 0xFF	; 255
    2686:	0e 17       	cp	r16, r30
    2688:	1f 07       	cpc	r17, r31
    268a:	8c f3       	brlt	.-30     	; 0x266e <_ZN17Adafruit_7segment10printFloatEdhh+0x106>
    268c:	d1 cf       	rjmp	.-94     	; 0x2630 <_ZN17Adafruit_7segment10printFloatEdhh+0xc8>
    268e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	8b 87       	std	Y+11, r24	; 0x0b
    2694:	69 81       	ldd	r22, Y+1	; 0x01
    2696:	7a 81       	ldd	r23, Y+2	; 0x02
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	9c 81       	ldd	r25, Y+4	; 0x04
    269c:	38 d7       	rcall	.+3696   	; 0x350e <__floatsisf>
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	c7 01       	movw	r24, r14
    26a4:	b6 01       	movw	r22, r12
    26a6:	98 d6       	rcall	.+3376   	; 0x33d8 <__divsf3>
    26a8:	6b 01       	movw	r12, r22
    26aa:	7c 01       	movw	r14, r24
    26ac:	2d 81       	ldd	r18, Y+5	; 0x05
    26ae:	3e 81       	ldd	r19, Y+6	; 0x06
    26b0:	4f 81       	ldd	r20, Y+7	; 0x07
    26b2:	58 85       	ldd	r21, Y+8	; 0x08
    26b4:	dc d7       	rcall	.+4024   	; 0x366e <__mulsf3>
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	24 d6       	rcall	.+3144   	; 0x3308 <__addsf3>
    26c0:	f8 d6       	rcall	.+3568   	; 0x34b2 <__fixunssfsi>
    26c2:	2b 01       	movw	r4, r22
    26c4:	3c 01       	movw	r6, r24
    26c6:	68 15       	cp	r22, r8
    26c8:	79 05       	cpc	r23, r9
    26ca:	8a 05       	cpc	r24, r10
    26cc:	9b 05       	cpc	r25, r11
    26ce:	f8 f6       	brcc	.-66     	; 0x268e <_ZN17Adafruit_7segment10printFloatEdhh+0x126>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	c7 01       	movw	r24, r14
    26da:	b6 01       	movw	r22, r12
    26dc:	79 d6       	rcall	.+3314   	; 0x33d0 <__cmpsf2>
    26de:	88 23       	and	r24, r24
    26e0:	1c f4       	brge	.+6      	; 0x26e8 <_ZN17Adafruit_7segment10printFloatEdhh+0x180>
    26e2:	c1 01       	movw	r24, r2
    26e4:	33 df       	rcall	.-410    	; 0x254c <_ZN17Adafruit_7segment10printErrorEv>
    26e6:	b7 c0       	rjmp	.+366    	; 0x2856 <_ZN17Adafruit_7segment10printFloatEdhh+0x2ee>
    26e8:	41 14       	cp	r4, r1
    26ea:	51 04       	cpc	r5, r1
    26ec:	61 04       	cpc	r6, r1
    26ee:	71 04       	cpc	r7, r1
    26f0:	29 f4       	brne	.+10     	; 0x26fc <_ZN17Adafruit_7segment10printFloatEdhh+0x194>
    26f2:	47 c0       	rjmp	.+142    	; 0x2782 <_ZN17Adafruit_7segment10printFloatEdhh+0x21a>
    26f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    26f6:	a1 17       	cp	r26, r17
    26f8:	60 f4       	brcc	.+24     	; 0x2712 <_ZN17Adafruit_7segment10printFloatEdhh+0x1aa>
    26fa:	4e c0       	rjmp	.+156    	; 0x2798 <_ZN17Adafruit_7segment10printFloatEdhh+0x230>
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	84 e0       	ldi	r24, 0x04	; 4
    2700:	99 24       	eor	r9, r9
    2702:	93 94       	inc	r9
    2704:	a1 2c       	mov	r10, r1
    2706:	99 85       	ldd	r25, Y+9	; 0x09
    2708:	c9 2e       	mov	r12, r25
    270a:	d1 2c       	mov	r13, r1
    270c:	e1 2c       	mov	r14, r1
    270e:	f1 2c       	mov	r15, r1
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	bb 85       	ldd	r27, Y+11	; 0x0b
    2714:	bb 23       	and	r27, r27
    2716:	29 f0       	breq	.+10     	; 0x2722 <_ZN17Adafruit_7segment10printFloatEdhh+0x1ba>
    2718:	09 2d       	mov	r16, r9
    271a:	b1 17       	cp	r27, r17
    271c:	19 f0       	breq	.+6      	; 0x2724 <_ZN17Adafruit_7segment10printFloatEdhh+0x1bc>
    271e:	0a 2d       	mov	r16, r10
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <_ZN17Adafruit_7segment10printFloatEdhh+0x1bc>
    2722:	0a 2d       	mov	r16, r10
    2724:	b9 80       	ldd	r11, Y+1	; 0x01
    2726:	8b 2d       	mov	r24, r11
    2728:	81 50       	subi	r24, 0x01	; 1
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	88 2e       	mov	r8, r24
    272e:	c3 01       	movw	r24, r6
    2730:	b2 01       	movw	r22, r4
    2732:	a7 01       	movw	r20, r14
    2734:	96 01       	movw	r18, r12
    2736:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__udivmodsi4>
    273a:	46 2f       	mov	r20, r22
    273c:	20 2f       	mov	r18, r16
    273e:	6b 2d       	mov	r22, r11
    2740:	c1 01       	movw	r24, r2
    2742:	b9 de       	rcall	.-654    	; 0x24b6 <_ZN17Adafruit_7segment13writeDigitNumEhhb>
    2744:	99 81       	ldd	r25, Y+1	; 0x01
    2746:	92 30       	cpi	r25, 0x02	; 2
    2748:	71 f4       	brne	.+28     	; 0x2766 <_ZN17Adafruit_7segment10printFloatEdhh+0x1fe>
    274a:	ba 94       	dec	r11
    274c:	ba 94       	dec	r11
    274e:	b9 82       	std	Y+1, r11	; 0x01
    2750:	a4 e0       	ldi	r26, 0x04	; 4
    2752:	a8 15       	cp	r26, r8
    2754:	40 f0       	brcs	.+16     	; 0x2766 <_ZN17Adafruit_7segment10printFloatEdhh+0x1fe>
    2756:	e8 2d       	mov	r30, r8
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	e2 0d       	add	r30, r2
    2760:	f3 1d       	adc	r31, r3
    2762:	11 82       	std	Z+1, r1	; 0x01
    2764:	10 82       	st	Z, r1
    2766:	c3 01       	movw	r24, r6
    2768:	b2 01       	movw	r22, r4
    276a:	a7 01       	movw	r20, r14
    276c:	96 01       	movw	r18, r12
    276e:	f1 d7       	rcall	.+4066   	; 0x3752 <__udivmodsi4>
    2770:	29 01       	movw	r4, r18
    2772:	3a 01       	movw	r6, r20
    2774:	1f 5f       	subi	r17, 0xFF	; 255
    2776:	23 2b       	or	r18, r19
    2778:	24 2b       	or	r18, r20
    277a:	25 2b       	or	r18, r21
    277c:	09 f4       	brne	.+2      	; 0x2780 <_ZN17Adafruit_7segment10printFloatEdhh+0x218>
    277e:	ba cf       	rjmp	.-140    	; 0x26f4 <_ZN17Adafruit_7segment10printFloatEdhh+0x18c>
    2780:	c8 cf       	rjmp	.-112    	; 0x2712 <_ZN17Adafruit_7segment10printFloatEdhh+0x1aa>
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	64 e0       	ldi	r22, 0x04	; 4
    2788:	c1 01       	movw	r24, r2
    278a:	95 de       	rcall	.-726    	; 0x24b6 <_ZN17Adafruit_7segment13writeDigitNumEhhb>
    278c:	ba 85       	ldd	r27, Y+10	; 0x0a
    278e:	b1 11       	cpse	r27, r1
    2790:	0e c0       	rjmp	.+28     	; 0x27ae <_ZN17Adafruit_7segment10printFloatEdhh+0x246>
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	1b c0       	rjmp	.+54     	; 0x27ce <_ZN17Adafruit_7segment10printFloatEdhh+0x266>
    2798:	b9 81       	ldd	r27, Y+1	; 0x01
    279a:	9a 85       	ldd	r25, Y+10	; 0x0a
    279c:	99 23       	and	r25, r25
    279e:	99 f0       	breq	.+38     	; 0x27c6 <_ZN17Adafruit_7segment10printFloatEdhh+0x25e>
    27a0:	eb 2f       	mov	r30, r27
    27a2:	ab 2f       	mov	r26, r27
    27a4:	a1 50       	subi	r26, 0x01	; 1
    27a6:	a9 83       	std	Y+1, r26	; 0x01
    27a8:	b5 30       	cpi	r27, 0x05	; 5
    27aa:	68 f4       	brcc	.+26     	; 0x27c6 <_ZN17Adafruit_7segment10printFloatEdhh+0x25e>
    27ac:	03 c0       	rjmp	.+6      	; 0x27b4 <_ZN17Adafruit_7segment10printFloatEdhh+0x24c>
    27ae:	b2 e0       	ldi	r27, 0x02	; 2
    27b0:	b9 83       	std	Y+1, r27	; 0x01
    27b2:	e3 e0       	ldi	r30, 0x03	; 3
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	e2 0d       	add	r30, r2
    27bc:	f3 1d       	adc	r31, r3
    27be:	80 e4       	ldi	r24, 0x40	; 64
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	88 23       	and	r24, r24
    27ca:	0c f4       	brge	.+2      	; 0x27ce <_ZN17Adafruit_7segment10printFloatEdhh+0x266>
    27cc:	44 c0       	rjmp	.+136    	; 0x2856 <_ZN17Adafruit_7segment10printFloatEdhh+0x2ee>
    27ce:	06 c0       	rjmp	.+12     	; 0x27dc <_ZN17Adafruit_7segment10printFloatEdhh+0x274>
    27d0:	a9 81       	ldd	r26, Y+1	; 0x01
    27d2:	a1 50       	subi	r26, 0x01	; 1
    27d4:	a9 83       	std	Y+1, r26	; 0x01
    27d6:	aa 23       	and	r26, r26
    27d8:	0c f4       	brge	.+2      	; 0x27dc <_ZN17Adafruit_7segment10printFloatEdhh+0x274>
    27da:	3d c0       	rjmp	.+122    	; 0x2856 <_ZN17Adafruit_7segment10printFloatEdhh+0x2ee>
    27dc:	b9 81       	ldd	r27, Y+1	; 0x01
    27de:	b5 30       	cpi	r27, 0x05	; 5
    27e0:	b8 f7       	brcc	.-18     	; 0x27d0 <_ZN17Adafruit_7segment10printFloatEdhh+0x268>
    27e2:	eb 2f       	mov	r30, r27
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	ee 0f       	add	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	e2 0d       	add	r30, r2
    27ec:	f3 1d       	adc	r31, r3
    27ee:	11 82       	std	Z+1, r1	; 0x01
    27f0:	10 82       	st	Z, r1
    27f2:	ee cf       	rjmp	.-36     	; 0x27d0 <_ZN17Adafruit_7segment10printFloatEdhh+0x268>
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	6d 81       	ldd	r22, Y+5	; 0x05
    27fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2800:	8f 81       	ldd	r24, Y+7	; 0x07
    2802:	98 85       	ldd	r25, Y+8	; 0x08
    2804:	81 d5       	rcall	.+2818   	; 0x3308 <__addsf3>
    2806:	55 d6       	rcall	.+3242   	; 0x34b2 <__fixunssfsi>
    2808:	2b 01       	movw	r4, r22
    280a:	3c 01       	movw	r6, r24
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	e8 2f       	mov	r30, r24
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	0f 2e       	mov	r0, r31
    2814:	c1 2c       	mov	r12, r1
    2816:	d1 2c       	mov	r13, r1
    2818:	f0 e8       	ldi	r31, 0x80	; 128
    281a:	ef 2e       	mov	r14, r31
    281c:	ff e3       	ldi	r31, 0x3F	; 63
    281e:	ff 2e       	mov	r15, r31
    2820:	f0 2d       	mov	r31, r0
    2822:	16 cf       	rjmp	.-468    	; 0x2650 <_ZN17Adafruit_7segment10printFloatEdhh+0xe8>
    2824:	1a 86       	std	Y+10, r1	; 0x0a
    2826:	94 e0       	ldi	r25, 0x04	; 4
    2828:	99 83       	std	Y+1, r25	; 0x01
    282a:	ab 85       	ldd	r26, Y+11	; 0x0b
    282c:	aa 2e       	mov	r10, r26
    282e:	b1 2c       	mov	r11, r1
    2830:	1a 14       	cp	r1, r10
    2832:	1b 04       	cpc	r1, r11
    2834:	fc f6       	brge	.-66     	; 0x27f4 <_ZN17Adafruit_7segment10printFloatEdhh+0x28c>
    2836:	00 e0       	ldi	r16, 0x00	; 0
    2838:	10 e0       	ldi	r17, 0x00	; 0
    283a:	0f 2e       	mov	r0, r31
    283c:	c1 2c       	mov	r12, r1
    283e:	d1 2c       	mov	r13, r1
    2840:	f0 e8       	ldi	r31, 0x80	; 128
    2842:	ef 2e       	mov	r14, r31
    2844:	ff e3       	ldi	r31, 0x3F	; 63
    2846:	ff 2e       	mov	r15, r31
    2848:	f0 2d       	mov	r31, r0
    284a:	b9 85       	ldd	r27, Y+9	; 0x09
    284c:	4b 2e       	mov	r4, r27
    284e:	51 2c       	mov	r5, r1
    2850:	61 2c       	mov	r6, r1
    2852:	71 2c       	mov	r7, r1
    2854:	c3 ce       	rjmp	.-634    	; 0x25dc <_ZN17Adafruit_7segment10printFloatEdhh+0x74>
    2856:	2b 96       	adiw	r28, 0x0b	; 11
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	df 90       	pop	r13
    2870:	cf 90       	pop	r12
    2872:	bf 90       	pop	r11
    2874:	af 90       	pop	r10
    2876:	9f 90       	pop	r9
    2878:	8f 90       	pop	r8
    287a:	7f 90       	pop	r7
    287c:	6f 90       	pop	r6
    287e:	5f 90       	pop	r5
    2880:	4f 90       	pop	r4
    2882:	3f 90       	pop	r3
    2884:	2f 90       	pop	r2
    2886:	08 95       	ret

00002888 <_ZN17Adafruit_7segment11printNumberElh>:
    2888:	0f 93       	push	r16
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	ec 01       	movw	r28, r24
    2890:	02 2f       	mov	r16, r18
    2892:	cb 01       	movw	r24, r22
    2894:	ba 01       	movw	r22, r20
    2896:	3b d6       	rcall	.+3190   	; 0x350e <__floatsisf>
    2898:	ab 01       	movw	r20, r22
    289a:	bc 01       	movw	r22, r24
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	ce 01       	movw	r24, r28
    28a0:	63 de       	rcall	.-826    	; 0x2568 <_ZN17Adafruit_7segment10printFloatEdhh>
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	0f 91       	pop	r16
    28a8:	08 95       	ret

000028aa <_ZN17Adafruit_7segment5printEmi>:
    28aa:	21 15       	cp	r18, r1
    28ac:	31 05       	cpc	r19, r1
    28ae:	19 f4       	brne	.+6      	; 0x28b6 <_ZN17Adafruit_7segment5printEmi+0xc>
    28b0:	64 2f       	mov	r22, r20
    28b2:	17 ce       	rjmp	.-978    	; 0x24e2 <_ZN17Adafruit_7segment5writeEh>
    28b4:	08 95       	ret
    28b6:	e8 cf       	rjmp	.-48     	; 0x2888 <_ZN17Adafruit_7segment11printNumberElh>
    28b8:	08 95       	ret

000028ba <_ZN17Adafruit_7segment5printEji>:
{
	print((long) n, base);
}

void Adafruit_7segment::print(unsigned int n, int base)
{
    28ba:	9a 01       	movw	r18, r20
	print((unsigned long) n, base);
    28bc:	ab 01       	movw	r20, r22
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	f3 cf       	rjmp	.-26     	; 0x28aa <_ZN17Adafruit_7segment5printEmi>
    28c4:	08 95       	ret

000028c6 <main>:

#define F_CPU 16000000UL
#include <util/delay.h>

int main ()
{
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	ce 5f       	subi	r28, 0xFE	; 254
    28d0:	d2 40       	sbci	r29, 0x02	; 2
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28dc:	2f ef       	ldi	r18, 0xFF	; 255
    28de:	83 ed       	ldi	r24, 0xD3	; 211
    28e0:	90 e3       	ldi	r25, 0x30	; 48
    28e2:	21 50       	subi	r18, 0x01	; 1
    28e4:	80 40       	sbci	r24, 0x00	; 0
    28e6:	90 40       	sbci	r25, 0x00	; 0
    28e8:	e1 f7       	brne	.-8      	; 0x28e2 <main+0x1c>
    28ea:	00 c0       	rjmp	.+0      	; 0x28ec <main+0x26>
    28ec:	00 00       	nop
#include "../memory/memory.hpp"
#include "../uart/uart_module.hpp"
#include "request.hpp"
#include "../timer/Clock.hpp"

class Communications
    28ee:	ce 01       	movw	r24, r28
    28f0:	04 96       	adiw	r24, 0x04	; 4
    28f2:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN12MessageQueueC1Ev>
    28f6:	ce 01       	movw	r24, r28
    28f8:	83 56       	subi	r24, 0x63	; 99
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN18FastTransferParserC1Ev>
    2900:	ce 01       	movw	r24, r28
    2902:	80 53       	subi	r24, 0x30	; 48
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	e3 d0       	rcall	.+454    	; 0x2ace <_ZN6ClocksC1Ev>
  _delay_ms(1000);
  ControlBoxEngine box;
  box.initialize();
    2908:	ce 01       	movw	r24, r28
    290a:	01 96       	adiw	r24, 0x01	; 1
    290c:	0e 94 73 07 	call	0xee6	; 0xee6 <_ZN16ControlBoxEngine10initializeEv>
  box.loop();
    2910:	ce 01       	movw	r24, r28
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN16ControlBoxEngine4loopEv>
  return 0;
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	c2 50       	subi	r28, 0x02	; 2
    291e:	dd 4f       	sbci	r29, 0xFD	; 253
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	08 95       	ret

00002930 <_ZN6Memory10initializeEv>:
void Memory::link (uint8_t i, uint8_t j)
{
  Variable * ptr = &variables[i];
  while (ptr->next)
    ptr = ptr->next;
  ptr->next = &variables[j];
    2930:	eb ec       	ldi	r30, 0xCB	; 203
    2932:	f3 e0       	ldi	r31, 0x03	; 3
    2934:	8b ec       	ldi	r24, 0xCB	; 203
    2936:	96 e0       	ldi	r25, 0x06	; 6
    2938:	11 82       	std	Z+1, r1	; 0x01
    293a:	10 82       	st	Z, r1
    293c:	13 82       	std	Z+3, r1	; 0x03
    293e:	12 82       	std	Z+2, r1	; 0x02
    2940:	15 82       	std	Z+5, r1	; 0x05
    2942:	14 82       	std	Z+4, r1	; 0x04
    2944:	36 96       	adiw	r30, 0x06	; 6
    2946:	e8 17       	cp	r30, r24
    2948:	f9 07       	cpc	r31, r25
    294a:	b1 f7       	brne	.-20     	; 0x2938 <_ZN6Memory10initializeEv+0x8>
    294c:	08 95       	ret

0000294e <_ZN6Memory5writeEhj>:
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	fc 01       	movw	r30, r24
    2952:	ee 0f       	add	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	e8 0f       	add	r30, r24
    2958:	f9 1f       	adc	r31, r25
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	e5 53       	subi	r30, 0x35	; 53
    2960:	fc 4f       	sbci	r31, 0xFC	; 252
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <_ZN6Memory5writeEhj+0x18>
    2964:	fc 01       	movw	r30, r24
    2966:	84 81       	ldd	r24, Z+4	; 0x04
    2968:	95 81       	ldd	r25, Z+5	; 0x05
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	d9 f7       	brne	.-10     	; 0x2964 <_ZN6Memory5writeEhj+0x16>
    296e:	30 97       	sbiw	r30, 0x00	; 0
    2970:	39 f0       	breq	.+14     	; 0x2980 <_ZN6Memory5writeEhj+0x32>
    2972:	71 83       	std	Z+1, r23	; 0x01
    2974:	60 83       	st	Z, r22
    2976:	02 80       	ldd	r0, Z+2	; 0x02
    2978:	f3 81       	ldd	r31, Z+3	; 0x03
    297a:	e0 2d       	mov	r30, r0
    297c:	30 97       	sbiw	r30, 0x00	; 0
    297e:	c9 f7       	brne	.-14     	; 0x2972 <_ZN6Memory5writeEhj+0x24>
    2980:	08 95       	ret

00002982 <_ZN6Memory4readEh>:
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	fc 01       	movw	r30, r24
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	e8 0f       	add	r30, r24
    298c:	f9 1f       	adc	r31, r25
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	e5 53       	subi	r30, 0x35	; 53
    2994:	fc 4f       	sbci	r31, 0xFC	; 252
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	08 95       	ret

0000299c <_ZN6Memory13valid_addressEh>:
}

bool Memory::valid_address (uint8_t address)
{
  return address < Memory::SIZE;
    299c:	80 95       	com	r24
}
    299e:	88 1f       	adc	r24, r24
    29a0:	88 27       	eor	r24, r24
    29a2:	88 1f       	adc	r24, r24
    29a4:	08 95       	ret

000029a6 <_ZN11TouchScreen14assign_objectsEv>:
			printf("Fail:!!\r\n");
//      good_screen_coms = false;
		return success;
	}
	return false;
}
    29a6:	fc 01       	movw	r30, r24
    29a8:	36 96       	adiw	r30, 0x06	; 6
    29aa:	9c 01       	movw	r18, r24
    29ac:	2a 5f       	subi	r18, 0xFA	; 250
    29ae:	3e 4f       	sbci	r19, 0xFE	; 254
    29b0:	11 92       	st	Z+, r1
    29b2:	11 92       	st	Z+, r1
    29b4:	e2 17       	cp	r30, r18
    29b6:	f3 07       	cpc	r31, r19
    29b8:	d9 f7       	brne	.-10     	; 0x29b0 <_ZN11TouchScreen14assign_objectsEv+0xa>
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	3f e0       	ldi	r19, 0x0F	; 15
    29be:	fc 01       	movw	r30, r24
    29c0:	33 8f       	std	Z+27, r19	; 0x1b
    29c2:	22 8f       	std	Z+26, r18	; 0x1a
    29c4:	08 95       	ret

000029c6 <_ZN11TouchScreen10initializeEP6Memoryj>:
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	ea 01       	movw	r28, r20
    29cc:	fc 01       	movw	r30, r24
    29ce:	11 82       	std	Z+1, r1	; 0x01
    29d0:	10 82       	st	Z, r1
    29d2:	73 83       	std	Z+3, r23	; 0x03
    29d4:	62 83       	std	Z+2, r22	; 0x02
    29d6:	55 83       	std	Z+5, r21	; 0x05
    29d8:	44 83       	std	Z+4, r20	; 0x04
    29da:	e5 df       	rcall	.-54     	; 0x29a6 <_ZN11TouchScreen14assign_objectsEv>
    29dc:	c1 30       	cpi	r28, 0x01	; 1
    29de:	d1 05       	cpc	r29, r1
    29e0:	49 f0       	breq	.+18     	; 0x29f4 <_ZN11TouchScreen10initializeEP6Memoryj+0x2e>
    29e2:	20 f0       	brcs	.+8      	; 0x29ec <_ZN11TouchScreen10initializeEP6Memoryj+0x26>
    29e4:	c2 30       	cpi	r28, 0x02	; 2
    29e6:	d1 05       	cpc	r29, r1
    29e8:	49 f0       	breq	.+18     	; 0x29fc <_ZN11TouchScreen10initializeEP6Memoryj+0x36>
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <_ZN11TouchScreen10initializeEP6Memoryj+0x3e>
    29ec:	87 e6       	ldi	r24, 0x67	; 103
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	c4 d2       	rcall	.+1416   	; 0x2f7a <_Z16uart0_initializej>
    29f2:	0b c0       	rjmp	.+22     	; 0x2a0a <_ZN11TouchScreen10initializeEP6Memoryj+0x44>
    29f4:	87 e6       	ldi	r24, 0x67	; 103
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	32 d3       	rcall	.+1636   	; 0x305e <_Z16uart1_initializej>
    29fa:	07 c0       	rjmp	.+14     	; 0x2a0a <_ZN11TouchScreen10initializeEP6Memoryj+0x44>
    29fc:	87 e6       	ldi	r24, 0x67	; 103
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	d3 d3       	rcall	.+1958   	; 0x31a8 <_Z16uart2_initializej>
    2a02:	03 c0       	rjmp	.+6      	; 0x2a0a <_ZN11TouchScreen10initializeEP6Memoryj+0x44>
    2a04:	87 e6       	ldi	r24, 0x67	; 103
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	6a d4       	rcall	.+2260   	; 0x32de <_Z16uart3_initializej>
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	80 ea       	ldi	r24, 0xA0	; 160
    2a10:	92 e0       	ldi	r25, 0x02	; 2
    2a12:	9f 93       	push	r25
    2a14:	8f 93       	push	r24
    2a16:	4d d7       	rcall	.+3738   	; 0x38b2 <printf>
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	08 95       	ret

00002a26 <_ZNK11TouchScreen13update_objectEj>:
    2a26:	9b 01       	movw	r18, r22
    2a28:	2d 5f       	subi	r18, 0xFD	; 253
    2a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2c:	22 0f       	add	r18, r18
    2a2e:	33 1f       	adc	r19, r19
    2a30:	82 0f       	add	r24, r18
    2a32:	93 1f       	adc	r25, r19
    2a34:	fc 01       	movw	r30, r24
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	89 2b       	or	r24, r25
    2a3c:	11 f0       	breq	.+4      	; 0x2a42 <_ZNK11TouchScreen13update_objectEj+0x1c>
    2a3e:	cb 01       	movw	r24, r22
    2a40:	a0 cf       	rjmp	.-192    	; 0x2982 <_ZN6Memory4readEh>
    2a42:	08 95       	ret

00002a44 <_ZNK11TouchScreen7refreshEv>:
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	8c 01       	movw	r16, r24
    2a4e:	8d ec       	ldi	r24, 0xCD	; 205
    2a50:	96 e0       	ldi	r25, 0x06	; 6
    2a52:	a7 d0       	rcall	.+334    	; 0x2ba2 <_ZN6Clocks6isDoneEv>
    2a54:	88 23       	and	r24, r24
    2a56:	e9 f0       	breq	.+58     	; 0x2a92 <_ZNK11TouchScreen7refreshEv+0x4e>
    2a58:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ZZNK11TouchScreen7refreshEvE5count>
    2a5c:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    2a60:	8a 30       	cpi	r24, 0x0A	; 10
    2a62:	91 05       	cpc	r25, r1
    2a64:	2c f0       	brlt	.+10     	; 0x2a70 <_ZNK11TouchScreen7refreshEv+0x2c>
    2a66:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    2a6a:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <_ZZNK11TouchScreen7refreshEvE5count>
    2a6e:	11 c0       	rjmp	.+34     	; 0x2a92 <_ZNK11TouchScreen7refreshEv+0x4e>
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    2a76:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <_ZZNK11TouchScreen7refreshEvE5count>
    2a7a:	c0 e0       	ldi	r28, 0x00	; 0
    2a7c:	d0 e0       	ldi	r29, 0x00	; 0
    2a7e:	be 01       	movw	r22, r28
    2a80:	c8 01       	movw	r24, r16
    2a82:	d1 df       	rcall	.-94     	; 0x2a26 <_ZNK11TouchScreen13update_objectEj>
    2a84:	21 96       	adiw	r28, 0x01	; 1
    2a86:	c0 38       	cpi	r28, 0x80	; 128
    2a88:	d1 05       	cpc	r29, r1
    2a8a:	c9 f7       	brne	.-14     	; 0x2a7e <_ZNK11TouchScreen7refreshEv+0x3a>
    2a8c:	8d ec       	ldi	r24, 0xCD	; 205
    2a8e:	96 e0       	ldi	r25, 0x06	; 6
    2a90:	0d d0       	rcall	.+26     	; 0x2aac <_ZN6Clocks5resetEv>
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <_GLOBAL__sub_I__ZN11TouchScreen10initializeEP6Memoryj>:
	//objects[JOYSTICK_RIGHT_Y] = Gauge4;
//  objects[SLIDER_RIGHT] = Gauge5;
}

/*----------------------------- Updating Screen ------------------------------*/
Clocks screenRefreshTimer(500);
    2a9c:	44 ef       	ldi	r20, 0xF4	; 244
    2a9e:	51 e0       	ldi	r21, 0x01	; 1
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	8d ec       	ldi	r24, 0xCD	; 205
    2aa6:	96 e0       	ldi	r25, 0x06	; 6
    2aa8:	2c c0       	rjmp	.+88     	; 0x2b02 <_ZN6ClocksC1El>
    2aaa:	08 95       	ret

00002aac <_ZN6Clocks5resetEv>:
{
	update();

	return abs(currentTime-startTime) / length;

}
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	ec 01       	movw	r28, r24
    2ab2:	89 ed       	ldi	r24, 0xD9	; 217
    2ab4:	96 e0       	ldi	r25, 0x06	; 6
    2ab6:	a4 d1       	rcall	.+840    	; 0x2e00 <_ZN12SimpleTimer16millisEv>
    2ab8:	6c 83       	std	Y+4, r22	; 0x04
    2aba:	7d 83       	std	Y+5, r23	; 0x05
    2abc:	8e 83       	std	Y+6, r24	; 0x06
    2abe:	9f 83       	std	Y+7, r25	; 0x07
    2ac0:	68 83       	st	Y, r22
    2ac2:	79 83       	std	Y+1, r23	; 0x01
    2ac4:	8a 83       	std	Y+2, r24	; 0x02
    2ac6:	9b 83       	std	Y+3, r25	; 0x03
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	08 95       	ret

00002ace <_ZN6ClocksC1Ev>:
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	ec 01       	movw	r28, r24
    2ad4:	41 e0       	ldi	r20, 0x01	; 1
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	89 ed       	ldi	r24, 0xD9	; 217
    2ade:	96 e0       	ldi	r25, 0x06	; 6
    2ae0:	a5 d1       	rcall	.+842    	; 0x2e2c <_ZN12SimpleTimer112set_durationEm>
    2ae2:	89 ed       	ldi	r24, 0xD9	; 217
    2ae4:	96 e0       	ldi	r25, 0x06	; 6
    2ae6:	95 d1       	rcall	.+810    	; 0x2e12 <_ZN12SimpleTimer15startEv>
    2ae8:	82 e3       	ldi	r24, 0x32	; 50
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a0 e0       	ldi	r26, 0x00	; 0
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	88 87       	std	Y+8, r24	; 0x08
    2af2:	99 87       	std	Y+9, r25	; 0x09
    2af4:	aa 87       	std	Y+10, r26	; 0x0a
    2af6:	bb 87       	std	Y+11, r27	; 0x0b
    2af8:	ce 01       	movw	r24, r28
    2afa:	d8 df       	rcall	.-80     	; 0x2aac <_ZN6Clocks5resetEv>
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	08 95       	ret

00002b02 <_ZN6ClocksC1El>:
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	ec 01       	movw	r28, r24
    2b10:	6a 01       	movw	r12, r20
    2b12:	7b 01       	movw	r14, r22
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	89 ed       	ldi	r24, 0xD9	; 217
    2b1e:	96 e0       	ldi	r25, 0x06	; 6
    2b20:	85 d1       	rcall	.+778    	; 0x2e2c <_ZN12SimpleTimer112set_durationEm>
    2b22:	89 ed       	ldi	r24, 0xD9	; 217
    2b24:	96 e0       	ldi	r25, 0x06	; 6
    2b26:	75 d1       	rcall	.+746    	; 0x2e12 <_ZN12SimpleTimer15startEv>
    2b28:	c8 86       	std	Y+8, r12	; 0x08
    2b2a:	d9 86       	std	Y+9, r13	; 0x09
    2b2c:	ea 86       	std	Y+10, r14	; 0x0a
    2b2e:	fb 86       	std	Y+11, r15	; 0x0b
    2b30:	ce 01       	movw	r24, r28
    2b32:	bc df       	rcall	.-136    	; 0x2aac <_ZN6Clocks5resetEv>
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	ff 90       	pop	r15
    2b3a:	ef 90       	pop	r14
    2b3c:	df 90       	pop	r13
    2b3e:	cf 90       	pop	r12
    2b40:	08 95       	ret

00002b42 <_ZN6Clocks12resetSpecialEv>:
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	ec 01       	movw	r28, r24
    2b48:	4c 81       	ldd	r20, Y+4	; 0x04
    2b4a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b4c:	6e 81       	ldd	r22, Y+6	; 0x06
    2b4e:	7f 81       	ldd	r23, Y+7	; 0x07
    2b50:	88 85       	ldd	r24, Y+8	; 0x08
    2b52:	99 85       	ldd	r25, Y+9	; 0x09
    2b54:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b56:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b58:	84 0f       	add	r24, r20
    2b5a:	95 1f       	adc	r25, r21
    2b5c:	a6 1f       	adc	r26, r22
    2b5e:	b7 1f       	adc	r27, r23
    2b60:	8c 83       	std	Y+4, r24	; 0x04
    2b62:	9d 83       	std	Y+5, r25	; 0x05
    2b64:	ae 83       	std	Y+6, r26	; 0x06
    2b66:	bf 83       	std	Y+7, r27	; 0x07
    2b68:	89 ed       	ldi	r24, 0xD9	; 217
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	49 d1       	rcall	.+658    	; 0x2e00 <_ZN12SimpleTimer16millisEv>
    2b6e:	68 83       	st	Y, r22
    2b70:	79 83       	std	Y+1, r23	; 0x01
    2b72:	8a 83       	std	Y+2, r24	; 0x02
    2b74:	9b 83       	std	Y+3, r25	; 0x03
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	08 95       	ret

00002b7c <_ZN6Clocks11setIntervalEl>:
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	40 87       	std	Z+8, r20	; 0x08
    2b80:	51 87       	std	Z+9, r21	; 0x09
    2b82:	62 87       	std	Z+10, r22	; 0x0a
    2b84:	73 87       	std	Z+11, r23	; 0x0b
    2b86:	08 95       	ret

00002b88 <_ZN6Clocks6updateEv>:
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	ec 01       	movw	r28, r24
    2b8e:	89 ed       	ldi	r24, 0xD9	; 217
    2b90:	96 e0       	ldi	r25, 0x06	; 6
    2b92:	36 d1       	rcall	.+620    	; 0x2e00 <_ZN12SimpleTimer16millisEv>
    2b94:	68 83       	st	Y, r22
    2b96:	79 83       	std	Y+1, r23	; 0x01
    2b98:	8a 83       	std	Y+2, r24	; 0x02
    2b9a:	9b 83       	std	Y+3, r25	; 0x03
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <_ZN6Clocks6isDoneEv>:
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	ec 01       	movw	r28, r24
    2ba8:	ef df       	rcall	.-34     	; 0x2b88 <_ZN6Clocks6updateEv>
    2baa:	28 81       	ld	r18, Y
    2bac:	39 81       	ldd	r19, Y+1	; 0x01
    2bae:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb2:	28 1b       	sub	r18, r24
    2bb4:	39 0b       	sbc	r19, r25
    2bb6:	c9 01       	movw	r24, r18
    2bb8:	99 23       	and	r25, r25
    2bba:	24 f4       	brge	.+8      	; 0x2bc4 <_ZN6Clocks6isDoneEv+0x22>
    2bbc:	88 27       	eor	r24, r24
    2bbe:	99 27       	eor	r25, r25
    2bc0:	82 1b       	sub	r24, r18
    2bc2:	93 0b       	sbc	r25, r19
    2bc4:	09 2e       	mov	r0, r25
    2bc6:	00 0c       	add	r0, r0
    2bc8:	aa 0b       	sbc	r26, r26
    2bca:	bb 0b       	sbc	r27, r27
    2bcc:	48 85       	ldd	r20, Y+8	; 0x08
    2bce:	59 85       	ldd	r21, Y+9	; 0x09
    2bd0:	6a 85       	ldd	r22, Y+10	; 0x0a
    2bd2:	7b 85       	ldd	r23, Y+11	; 0x0b
    2bd4:	48 17       	cp	r20, r24
    2bd6:	59 07       	cpc	r21, r25
    2bd8:	6a 07       	cpc	r22, r26
    2bda:	7b 07       	cpc	r23, r27
    2bdc:	24 f4       	brge	.+8      	; 0x2be6 <_ZN6Clocks6isDoneEv+0x44>
    2bde:	ce 01       	movw	r24, r28
    2be0:	65 df       	rcall	.-310    	; 0x2aac <_ZN6Clocks5resetEv>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	01 c0       	rjmp	.+2      	; 0x2be8 <_ZN6Clocks6isDoneEv+0x46>
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	08 95       	ret

00002bee <_ZN6Clocks13isDoneSpecialEv>:
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	ec 01       	movw	r28, r24
    2bf4:	c9 df       	rcall	.-110    	; 0x2b88 <_ZN6Clocks6updateEv>
    2bf6:	28 81       	ld	r18, Y
    2bf8:	39 81       	ldd	r19, Y+1	; 0x01
    2bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfe:	28 1b       	sub	r18, r24
    2c00:	39 0b       	sbc	r19, r25
    2c02:	c9 01       	movw	r24, r18
    2c04:	99 23       	and	r25, r25
    2c06:	24 f4       	brge	.+8      	; 0x2c10 <_ZN6Clocks13isDoneSpecialEv+0x22>
    2c08:	88 27       	eor	r24, r24
    2c0a:	99 27       	eor	r25, r25
    2c0c:	82 1b       	sub	r24, r18
    2c0e:	93 0b       	sbc	r25, r19
    2c10:	09 2e       	mov	r0, r25
    2c12:	00 0c       	add	r0, r0
    2c14:	aa 0b       	sbc	r26, r26
    2c16:	bb 0b       	sbc	r27, r27
    2c18:	48 85       	ldd	r20, Y+8	; 0x08
    2c1a:	59 85       	ldd	r21, Y+9	; 0x09
    2c1c:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c1e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2c20:	48 17       	cp	r20, r24
    2c22:	59 07       	cpc	r21, r25
    2c24:	6a 07       	cpc	r22, r26
    2c26:	7b 07       	cpc	r23, r27
    2c28:	24 f4       	brge	.+8      	; 0x2c32 <_ZN6Clocks13isDoneSpecialEv+0x44>
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	8a df       	rcall	.-236    	; 0x2b42 <_ZN6Clocks12resetSpecialEv>
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	01 c0       	rjmp	.+2      	; 0x2c34 <_ZN6Clocks13isDoneSpecialEv+0x46>
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	08 95       	ret

00002c3a <_ZN6Clocks14isDone_NoResetEv>:
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	ec 01       	movw	r28, r24
    2c44:	a1 df       	rcall	.-190    	; 0x2b88 <_ZN6Clocks6updateEv>
    2c46:	88 81       	ld	r24, Y
    2c48:	99 81       	ldd	r25, Y+1	; 0x01
    2c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c4e:	82 1b       	sub	r24, r18
    2c50:	93 0b       	sbc	r25, r19
    2c52:	ac 01       	movw	r20, r24
    2c54:	22 f4       	brpl	.+8      	; 0x2c5e <_ZN6Clocks14isDone_NoResetEv+0x24>
    2c56:	44 27       	eor	r20, r20
    2c58:	55 27       	eor	r21, r21
    2c5a:	48 1b       	sub	r20, r24
    2c5c:	59 0b       	sbc	r21, r25
    2c5e:	05 2e       	mov	r0, r21
    2c60:	00 0c       	add	r0, r0
    2c62:	66 0b       	sbc	r22, r22
    2c64:	77 0b       	sbc	r23, r23
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	08 85       	ldd	r16, Y+8	; 0x08
    2c6a:	19 85       	ldd	r17, Y+9	; 0x09
    2c6c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c6e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c70:	04 17       	cp	r16, r20
    2c72:	15 07       	cpc	r17, r21
    2c74:	26 07       	cpc	r18, r22
    2c76:	37 07       	cpc	r19, r23
    2c78:	0c f0       	brlt	.+2      	; 0x2c7c <_ZN6Clocks14isDone_NoResetEv+0x42>
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	08 95       	ret

00002c86 <_GLOBAL__sub_I__ZN6ClocksC2Ev>:

#include "../timer/SimpleTimer1.hpp"
#include "../uart/uart_2.hpp"
#include "../uart/uart_3.hpp"

static SimpleTimer1 ClockTimer;
    2c86:	89 ed       	ldi	r24, 0xD9	; 217
    2c88:	96 e0       	ldi	r25, 0x06	; 6
    2c8a:	ce c0       	rjmp	.+412    	; 0x2e28 <_ZN12SimpleTimer1C1Ev>
    2c8c:	08 95       	ret

00002c8e <_Z5resetv>:

/*--------------------- Definitions of Helper Functions ----------------------*/

void reset ()
{
  count = 0;
    2c8e:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <_ZL5count>
    2c92:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <_ZL5count+0x1>
    2c96:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <_ZL5count+0x2>
    2c9a:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <_ZL5count+0x3>
  timer0_disableTimerOverflowInterrupt();
    2c9e:	07 d1       	rcall	.+526    	; 0x2eae <_Z36timer0_disableTimerOverflowInterruptv>
  timer0_setClockSource(NO_CLOCK_SOURCE); // stops the timer module
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	d7 c0       	rjmp	.+430    	; 0x2e52 <_Z21timer0_setClockSource12CLOCK_SOURCE>
    2ca4:	08 95       	ret

00002ca6 <__vector_23>:
void set_max_count (uint32_t);

/*------------------------ Interrupt Service Routine -------------------------*/

ISR (TIMER0_OVF_vect)
{
    2ca6:	1f 92       	push	r1
    2ca8:	0f 92       	push	r0
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	0f 92       	push	r0
    2cae:	11 24       	eor	r1, r1
    2cb0:	0b b6       	in	r0, 0x3b	; 59
    2cb2:	0f 92       	push	r0
    2cb4:	2f 93       	push	r18
    2cb6:	3f 93       	push	r19
    2cb8:	4f 93       	push	r20
    2cba:	5f 93       	push	r21
    2cbc:	6f 93       	push	r22
    2cbe:	7f 93       	push	r23
    2cc0:	8f 93       	push	r24
    2cc2:	9f 93       	push	r25
    2cc4:	af 93       	push	r26
    2cc6:	bf 93       	push	r27
    2cc8:	ef 93       	push	r30
    2cca:	ff 93       	push	r31
  ++count;
    2ccc:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <_ZL5count>
    2cd0:	90 91 df 06 	lds	r25, 0x06DF	; 0x8006df <_ZL5count+0x1>
    2cd4:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <_ZL5count+0x2>
    2cd8:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <_ZL5count+0x3>
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	a1 1d       	adc	r26, r1
    2ce0:	b1 1d       	adc	r27, r1
    2ce2:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <_ZL5count>
    2ce6:	90 93 df 06 	sts	0x06DF, r25	; 0x8006df <_ZL5count+0x1>
    2cea:	a0 93 e0 06 	sts	0x06E0, r26	; 0x8006e0 <_ZL5count+0x2>
    2cee:	b0 93 e1 06 	sts	0x06E1, r27	; 0x8006e1 <_ZL5count+0x3>
  if (count > max_count)
    2cf2:	40 91 de 06 	lds	r20, 0x06DE	; 0x8006de <_ZL5count>
    2cf6:	50 91 df 06 	lds	r21, 0x06DF	; 0x8006df <_ZL5count+0x1>
    2cfa:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <_ZL5count+0x2>
    2cfe:	70 91 e1 06 	lds	r23, 0x06E1	; 0x8006e1 <_ZL5count+0x3>
    2d02:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <_ZL9max_count>
    2d06:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <_ZL9max_count+0x1>
    2d0a:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <_ZL9max_count+0x2>
    2d0e:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <_ZL9max_count+0x3>
    2d12:	84 17       	cp	r24, r20
    2d14:	95 07       	cpc	r25, r21
    2d16:	a6 07       	cpc	r26, r22
    2d18:	b7 07       	cpc	r27, r23
    2d1a:	08 f4       	brcc	.+2      	; 0x2d1e <__vector_23+0x78>
    reset();
    2d1c:	b8 df       	rcall	.-144    	; 0x2c8e <_Z5resetv>
}
    2d1e:	ff 91       	pop	r31
    2d20:	ef 91       	pop	r30
    2d22:	bf 91       	pop	r27
    2d24:	af 91       	pop	r26
    2d26:	9f 91       	pop	r25
    2d28:	8f 91       	pop	r24
    2d2a:	7f 91       	pop	r23
    2d2c:	6f 91       	pop	r22
    2d2e:	5f 91       	pop	r21
    2d30:	4f 91       	pop	r20
    2d32:	3f 91       	pop	r19
    2d34:	2f 91       	pop	r18
    2d36:	0f 90       	pop	r0
    2d38:	0b be       	out	0x3b, r0	; 59
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	0f 90       	pop	r0
    2d40:	1f 90       	pop	r1
    2d42:	18 95       	reti

00002d44 <__vector_20>:
	TIMSK1 &= 0b11111110; // disable timer overflow interrupt
	TCCR1B &= 0b11111000; // set clock source to no clock source
}

ISR (TIMER1_OVF_vect)
{
    2d44:	1f 92       	push	r1
    2d46:	0f 92       	push	r0
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	0f 92       	push	r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	4f 93       	push	r20
    2d50:	5f 93       	push	r21
    2d52:	6f 93       	push	r22
    2d54:	7f 93       	push	r23
    2d56:	8f 93       	push	r24
    2d58:	9f 93       	push	r25
    2d5a:	af 93       	push	r26
    2d5c:	bf 93       	push	r27

	++count;
    2d5e:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <_ZL5count>
    2d62:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <_ZL5count+0x1>
    2d66:	a0 91 ec 06 	lds	r26, 0x06EC	; 0x8006ec <_ZL5count+0x2>
    2d6a:	b0 91 ed 06 	lds	r27, 0x06ED	; 0x8006ed <_ZL5count+0x3>
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	a1 1d       	adc	r26, r1
    2d72:	b1 1d       	adc	r27, r1
    2d74:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <_ZL5count>
    2d78:	90 93 eb 06 	sts	0x06EB, r25	; 0x8006eb <_ZL5count+0x1>
    2d7c:	a0 93 ec 06 	sts	0x06EC, r26	; 0x8006ec <_ZL5count+0x2>
    2d80:	b0 93 ed 06 	sts	0x06ED, r27	; 0x8006ed <_ZL5count+0x3>
	if (count > max_count)
    2d84:	40 91 ea 06 	lds	r20, 0x06EA	; 0x8006ea <_ZL5count>
    2d88:	50 91 eb 06 	lds	r21, 0x06EB	; 0x8006eb <_ZL5count+0x1>
    2d8c:	60 91 ec 06 	lds	r22, 0x06EC	; 0x8006ec <_ZL5count+0x2>
    2d90:	70 91 ed 06 	lds	r23, 0x06ED	; 0x8006ed <_ZL5count+0x3>
    2d94:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <_ZL9max_count>
    2d98:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <_ZL9max_count+0x1>
    2d9c:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <_ZL9max_count+0x2>
    2da0:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <_ZL9max_count+0x3>
    2da4:	84 17       	cp	r24, r20
    2da6:	95 07       	cpc	r25, r21
    2da8:	a6 07       	cpc	r26, r22
    2daa:	b7 07       	cpc	r27, r23
    2dac:	d8 f4       	brcc	.+54     	; 0x2de4 <__vector_20+0xa0>
	{
		GlobalCount+=4;
    2dae:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <_ZL11GlobalCount>
    2db2:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <_ZL11GlobalCount+0x1>
    2db6:	a0 91 e8 06 	lds	r26, 0x06E8	; 0x8006e8 <_ZL11GlobalCount+0x2>
    2dba:	b0 91 e9 06 	lds	r27, 0x06E9	; 0x8006e9 <_ZL11GlobalCount+0x3>
    2dbe:	04 96       	adiw	r24, 0x04	; 4
    2dc0:	a1 1d       	adc	r26, r1
    2dc2:	b1 1d       	adc	r27, r1
    2dc4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <_ZL11GlobalCount>
    2dc8:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <_ZL11GlobalCount+0x1>
    2dcc:	a0 93 e8 06 	sts	0x06E8, r26	; 0x8006e8 <_ZL11GlobalCount+0x2>
    2dd0:	b0 93 e9 06 	sts	0x06E9, r27	; 0x8006e9 <_ZL11GlobalCount+0x3>
		count = 0;
    2dd4:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <_ZL5count>
    2dd8:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <_ZL5count+0x1>
    2ddc:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <_ZL5count+0x2>
    2de0:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <_ZL5count+0x3>
		//reset();
	}
	TIFR1 = (0<<TOV1); //Reset timer0 overflow interrupt flag
    2de4:	16 ba       	out	0x16, r1	; 22
}
    2de6:	bf 91       	pop	r27
    2de8:	af 91       	pop	r26
    2dea:	9f 91       	pop	r25
    2dec:	8f 91       	pop	r24
    2dee:	7f 91       	pop	r23
    2df0:	6f 91       	pop	r22
    2df2:	5f 91       	pop	r21
    2df4:	4f 91       	pop	r20
    2df6:	0f 90       	pop	r0
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	0f 90       	pop	r0
    2dfc:	1f 90       	pop	r1
    2dfe:	18 95       	reti

00002e00 <_ZN12SimpleTimer16millisEv>:
	start();

}
uint32_t SimpleTimer1::millis()
{
	return GlobalCount;
    2e00:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <_ZL11GlobalCount>
    2e04:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <_ZL11GlobalCount+0x1>
    2e08:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <_ZL11GlobalCount+0x2>
    2e0c:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <_ZL11GlobalCount+0x3>
}
    2e10:	08 95       	ret

00002e12 <_ZN12SimpleTimer15startEv>:
void SimpleTimer1::start ()
{
	TIMSK1 |= 0b00000001; // enable timer overflow interrupt
    2e12:	ef e6       	ldi	r30, 0x6F	; 111
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	81 60       	ori	r24, 0x01	; 1
    2e1a:	80 83       	st	Z, r24
	TCCR1B |= 0b00000001; // internal clock source, no prescale
    2e1c:	e1 e8       	ldi	r30, 0x81	; 129
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	81 60       	ori	r24, 0x01	; 1
    2e24:	80 83       	st	Z, r24
    2e26:	08 95       	ret

00002e28 <_ZN12SimpleTimer1C1Ev>:
	TIFR1 = (0<<TOV1); //Reset timer0 overflow interrupt flag
}

SimpleTimer1::SimpleTimer1 ()
{
	start();
    2e28:	f4 cf       	rjmp	.-24     	; 0x2e12 <_ZN12SimpleTimer15startEv>
    2e2a:	08 95       	ret

00002e2c <_ZN12SimpleTimer112set_durationEm>:

void SimpleTimer1::set_duration (uint32_t length_ms)
{
	const uint32_t CLOCK_RATE_kHz = 16000;
	const uint32_t MAX_TCNT = 0xFFFF;
	max_count = length_ms * CLOCK_RATE_kHz / MAX_TCNT;
    2e2c:	a0 e8       	ldi	r26, 0x80	; 128
    2e2e:	be e3       	ldi	r27, 0x3E	; 62
    2e30:	9a 01       	movw	r18, r20
    2e32:	ab 01       	movw	r20, r22
    2e34:	ea d4       	rcall	.+2516   	; 0x380a <__muluhisi3>
    2e36:	2f ef       	ldi	r18, 0xFF	; 255
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	50 e0       	ldi	r21, 0x00	; 0
    2e3e:	89 d4       	rcall	.+2322   	; 0x3752 <__udivmodsi4>
    2e40:	20 93 e2 06 	sts	0x06E2, r18	; 0x8006e2 <_ZL9max_count>
    2e44:	30 93 e3 06 	sts	0x06E3, r19	; 0x8006e3 <_ZL9max_count+0x1>
    2e48:	40 93 e4 06 	sts	0x06E4, r20	; 0x8006e4 <_ZL9max_count+0x2>
    2e4c:	50 93 e5 06 	sts	0x06E5, r21	; 0x8006e5 <_ZL9max_count+0x3>
    2e50:	08 95       	ret

00002e52 <_Z21timer0_setClockSource12CLOCK_SOURCE>:

void
timer0_enableTimerOverflowInterrupt ()
{
	// Write HIGH to TIMSK0 (Bit 0)
	TIMSK0 |= 0b00000001;
    2e52:	e8 2f       	mov	r30, r24
    2e54:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <_ZL2cs>
    2e58:	85 b5       	in	r24, 0x25	; 37
    2e5a:	88 7f       	andi	r24, 0xF8	; 248
    2e5c:	85 bd       	out	0x25, r24	; 37
    2e5e:	8e 2f       	mov	r24, r30
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	88 30       	cpi	r24, 0x08	; 8
    2e64:	91 05       	cpc	r25, r1
    2e66:	10 f5       	brcc	.+68     	; 0x2eac <_Z21timer0_setClockSource12CLOCK_SOURCE+0x5a>
    2e68:	fc 01       	movw	r30, r24
    2e6a:	ed 55       	subi	r30, 0x5D	; 93
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	af c4       	rjmp	.+2398   	; 0x37ce <__tablejump2__>
    2e70:	85 b5       	in	r24, 0x25	; 37
    2e72:	85 bd       	out	0x25, r24	; 37
    2e74:	08 95       	ret
    2e76:	85 b5       	in	r24, 0x25	; 37
    2e78:	81 60       	ori	r24, 0x01	; 1
    2e7a:	85 bd       	out	0x25, r24	; 37
    2e7c:	08 95       	ret
    2e7e:	85 b5       	in	r24, 0x25	; 37
    2e80:	82 60       	ori	r24, 0x02	; 2
    2e82:	85 bd       	out	0x25, r24	; 37
    2e84:	08 95       	ret
    2e86:	85 b5       	in	r24, 0x25	; 37
    2e88:	83 60       	ori	r24, 0x03	; 3
    2e8a:	85 bd       	out	0x25, r24	; 37
    2e8c:	08 95       	ret
    2e8e:	85 b5       	in	r24, 0x25	; 37
    2e90:	84 60       	ori	r24, 0x04	; 4
    2e92:	85 bd       	out	0x25, r24	; 37
    2e94:	08 95       	ret
    2e96:	85 b5       	in	r24, 0x25	; 37
    2e98:	85 60       	ori	r24, 0x05	; 5
    2e9a:	85 bd       	out	0x25, r24	; 37
    2e9c:	08 95       	ret
    2e9e:	85 b5       	in	r24, 0x25	; 37
    2ea0:	86 60       	ori	r24, 0x06	; 6
    2ea2:	85 bd       	out	0x25, r24	; 37
    2ea4:	08 95       	ret
    2ea6:	85 b5       	in	r24, 0x25	; 37
    2ea8:	87 60       	ori	r24, 0x07	; 7
    2eaa:	85 bd       	out	0x25, r24	; 37
    2eac:	08 95       	ret

00002eae <_Z36timer0_disableTimerOverflowInterruptv>:

void
timer0_disableTimerOverflowInterrupt ()
{
	// Write LOW to TIMSK0 (Bit 0)
	TIMSK0 &= 0b11111110;
    2eae:	ee e6       	ldi	r30, 0x6E	; 110
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	8e 7f       	andi	r24, 0xFE	; 254
    2eb6:	80 83       	st	Z, r24
    2eb8:	08 95       	ret

00002eba <__vector_25>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART0_RECEIVE_INTERRUPT)
{
    2eba:	1f 92       	push	r1
    2ebc:	0f 92       	push	r0
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	0f 92       	push	r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	0b b6       	in	r0, 0x3b	; 59
    2ec6:	0f 92       	push	r0
    2ec8:	2f 93       	push	r18
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	ef 93       	push	r30
    2ed0:	ff 93       	push	r31
    uint8_t new_head, data, status, error;
    status = UART0_STATUS;
    2ed2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    2ed6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE0) | (1 << DOR0)| (1 << UPE0));
    2eda:	8c 71       	andi	r24, 0x1C	; 28

    new_head = (receive_head + 1) & UART0_BUFFER_MASK;
    2edc:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <_ZL12receive_head>
    2ee0:	ef 5f       	subi	r30, 0xFF	; 255
    2ee2:	ef 71       	andi	r30, 0x1F	; 31
    if (new_head == receive_tail)
    2ee4:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <_ZL12receive_tail>
    2ee8:	e9 17       	cp	r30, r25
    2eea:	39 f0       	breq	.+14     	; 0x2efa <__vector_25+0x40>
        error = UART0_BUFFER_OVERFLOW >> 8;
    else
    {
        receive_head = new_head;
    2eec:	e0 93 f1 06 	sts	0x06F1, r30	; 0x8006f1 <_ZL12receive_head>
        receive_buffer[new_head] = data;
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	ee 50       	subi	r30, 0x0E	; 14
    2ef4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ef6:	20 83       	st	Z, r18
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <__vector_25+0x42>
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE0) | (1 << DOR0)| (1 << UPE0));

    new_head = (receive_head + 1) & UART0_BUFFER_MASK;
    if (new_head == receive_tail)
        error = UART0_BUFFER_OVERFLOW >> 8;
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    else
    {
        receive_head = new_head;
        receive_buffer[new_head] = data;
    }
    last_receive_error |= error;   
    2efc:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <_ZL18last_receive_error>
    2f00:	89 2b       	or	r24, r25
    2f02:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <_ZL18last_receive_error>
}
    2f06:	ff 91       	pop	r31
    2f08:	ef 91       	pop	r30
    2f0a:	9f 91       	pop	r25
    2f0c:	8f 91       	pop	r24
    2f0e:	2f 91       	pop	r18
    2f10:	0f 90       	pop	r0
    2f12:	0b be       	out	0x3b, r0	; 59
    2f14:	0f 90       	pop	r0
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	0f 90       	pop	r0
    2f1a:	1f 90       	pop	r1
    2f1c:	18 95       	reti

00002f1e <__vector_26>:

ISR (UART0_TRANSMIT_INTERRUPT)
{
    2f1e:	1f 92       	push	r1
    2f20:	0f 92       	push	r0
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	0f 92       	push	r0
    2f26:	11 24       	eor	r1, r1
    2f28:	0b b6       	in	r0, 0x3b	; 59
    2f2a:	0f 92       	push	r0
    2f2c:	8f 93       	push	r24
    2f2e:	9f 93       	push	r25
    2f30:	ef 93       	push	r30
    2f32:	ff 93       	push	r31
    uint8_t new_tail;
    if (transmit_head != transmit_tail)
    2f34:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <_ZL13transmit_head>
    2f38:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <_ZL13transmit_tail>
    2f3c:	98 17       	cp	r25, r24
    2f3e:	69 f0       	breq	.+26     	; 0x2f5a <__vector_26+0x3c>
    {
        new_tail = (transmit_tail + 1) & UART0_BUFFER_MASK;
    2f40:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <_ZL13transmit_tail>
    2f44:	ef 5f       	subi	r30, 0xFF	; 255
    2f46:	ef 71       	andi	r30, 0x1F	; 31
        transmit_tail = new_tail;
    2f48:	e0 93 12 07 	sts	0x0712, r30	; 0x800712 <_ZL13transmit_tail>
        UART0_DATA = transmit_buffer[new_tail]; // transmit
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	ec 5e       	subi	r30, 0xEC	; 236
    2f50:	f8 4f       	sbci	r31, 0xF8	; 248
    2f52:	80 81       	ld	r24, Z
    2f54:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2f58:	05 c0       	rjmp	.+10     	; 0x2f64 <__vector_26+0x46>
    }
    else
        UART0_CONTROL_B &= ~(1 << UDRIE0); // buffer empty so end transmission
    2f5a:	e1 ec       	ldi	r30, 0xC1	; 193
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8f 7d       	andi	r24, 0xDF	; 223
    2f62:	80 83       	st	Z, r24
}
    2f64:	ff 91       	pop	r31
    2f66:	ef 91       	pop	r30
    2f68:	9f 91       	pop	r25
    2f6a:	8f 91       	pop	r24
    2f6c:	0f 90       	pop	r0
    2f6e:	0b be       	out	0x3b, r0	; 59
    2f70:	0f 90       	pop	r0
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	0f 90       	pop	r0
    2f76:	1f 90       	pop	r1
    2f78:	18 95       	reti

00002f7a <_Z16uart0_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart0_initialize (uint16_t baudrate)
{
    transmit_head = 0;
    2f7a:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <_ZL13transmit_head>
    transmit_tail = 0;
    2f7e:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <_ZL13transmit_tail>
    receive_head = 0;
    2f82:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <_ZL12receive_head>
    receive_tail = 0;
    2f86:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <_ZL12receive_tail>

    UBRR0H = (uint8_t)((baudrate >> 8) & 0x80) ;
    2f8a:	90 78       	andi	r25, 0x80	; 128
    2f8c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t)(baudrate & 0x00FF);
    2f90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      
    // set enable bits
    UART0_CONTROL_B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    2f94:	88 e9       	ldi	r24, 0x98	; 152
    2f96:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    // set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
    UART0_CONTROL_C = (1 << UCSZ01) | (1 << UCSZ00);
    2f9a:	86 e0       	ldi	r24, 0x06	; 6
    2f9c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2fa0:	08 95       	ret

00002fa2 <__vector_36>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART1_RECEIVE_INTERRUPT)
{
    2fa2:	1f 92       	push	r1
    2fa4:	0f 92       	push	r0
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	0f 92       	push	r0
    2faa:	11 24       	eor	r1, r1
    2fac:	0b b6       	in	r0, 0x3b	; 59
    2fae:	0f 92       	push	r0
    2fb0:	2f 93       	push	r18
    2fb2:	8f 93       	push	r24
    2fb4:	9f 93       	push	r25
    2fb6:	ef 93       	push	r30
    2fb8:	ff 93       	push	r31
	uint8_t new_head, data, status, error;
	status = UART1_STATUS;
    2fba:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UART1_DATA;
    2fbe:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE1) | (1 << DOR1)| (1 << UPE1));
    2fc2:	8c 71       	andi	r24, 0x1C	; 28

	new_head = (receive_head + 1) & UART1_BUFFER_MASK;
    2fc4:	e0 91 36 07 	lds	r30, 0x0736	; 0x800736 <_ZL12receive_head>
    2fc8:	ef 5f       	subi	r30, 0xFF	; 255
	if (new_head == receive_tail)
    2fca:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <_ZL12receive_tail>
    2fce:	e9 17       	cp	r30, r25
    2fd0:	39 f0       	breq	.+14     	; 0x2fe0 <__vector_36+0x3e>
		error = UART1_BUFFER_OVERFLOW >> 8;
	else
	{
		receive_head = new_head;
    2fd2:	e0 93 36 07 	sts	0x0736, r30	; 0x800736 <_ZL12receive_head>
		receive_buffer[new_head] = data;
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	e9 5c       	subi	r30, 0xC9	; 201
    2fda:	f8 4f       	sbci	r31, 0xF8	; 248
    2fdc:	20 83       	st	Z, r18
    2fde:	01 c0       	rjmp	.+2      	; 0x2fe2 <__vector_36+0x40>
	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE1) | (1 << DOR1)| (1 << UPE1));

	new_head = (receive_head + 1) & UART1_BUFFER_MASK;
	if (new_head == receive_tail)
		error = UART1_BUFFER_OVERFLOW >> 8;
    2fe0:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		receive_head = new_head;
		receive_buffer[new_head] = data;
	}
	last_receive_error |= error;
    2fe2:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <_ZL18last_receive_error>
    2fe6:	89 2b       	or	r24, r25
    2fe8:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <_ZL18last_receive_error>
}
    2fec:	ff 91       	pop	r31
    2fee:	ef 91       	pop	r30
    2ff0:	9f 91       	pop	r25
    2ff2:	8f 91       	pop	r24
    2ff4:	2f 91       	pop	r18
    2ff6:	0f 90       	pop	r0
    2ff8:	0b be       	out	0x3b, r0	; 59
    2ffa:	0f 90       	pop	r0
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	0f 90       	pop	r0
    3000:	1f 90       	pop	r1
    3002:	18 95       	reti

00003004 <__vector_37>:

ISR (UART1_TRANSMIT_INTERRUPT)
{
    3004:	1f 92       	push	r1
    3006:	0f 92       	push	r0
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	0f 92       	push	r0
    300c:	11 24       	eor	r1, r1
    300e:	0b b6       	in	r0, 0x3b	; 59
    3010:	0f 92       	push	r0
    3012:	8f 93       	push	r24
    3014:	9f 93       	push	r25
    3016:	ef 93       	push	r30
    3018:	ff 93       	push	r31
	uint8_t new_tail;
	if (transmit_head != transmit_tail)
    301a:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <_ZL13transmit_head>
    301e:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <_ZL13transmit_tail>
    3022:	98 17       	cp	r25, r24
    3024:	61 f0       	breq	.+24     	; 0x303e <__vector_37+0x3a>
	{
		new_tail = (transmit_tail + 1) & UART1_BUFFER_MASK;
    3026:	e0 91 37 08 	lds	r30, 0x0837	; 0x800837 <_ZL13transmit_tail>
    302a:	ef 5f       	subi	r30, 0xFF	; 255
		transmit_tail = new_tail;
    302c:	e0 93 37 08 	sts	0x0837, r30	; 0x800837 <_ZL13transmit_tail>
		UART1_DATA = transmit_buffer[new_tail]; // transmit
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	e7 5c       	subi	r30, 0xC7	; 199
    3034:	f7 4f       	sbci	r31, 0xF7	; 247
    3036:	80 81       	ld	r24, Z
    3038:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    303c:	05 c0       	rjmp	.+10     	; 0x3048 <__vector_37+0x44>
	}
	else
		UART1_CONTROL_B &= ~(1 << UDRIE1); // buffer empty so end transmission
    303e:	e9 ec       	ldi	r30, 0xC9	; 201
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	8f 7d       	andi	r24, 0xDF	; 223
    3046:	80 83       	st	Z, r24
}
    3048:	ff 91       	pop	r31
    304a:	ef 91       	pop	r30
    304c:	9f 91       	pop	r25
    304e:	8f 91       	pop	r24
    3050:	0f 90       	pop	r0
    3052:	0b be       	out	0x3b, r0	; 59
    3054:	0f 90       	pop	r0
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	0f 90       	pop	r0
    305a:	1f 90       	pop	r1
    305c:	18 95       	reti

0000305e <_Z16uart1_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart1_initialize (uint16_t baudrate)
{
	transmit_head = 0;
    305e:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <_ZL13transmit_head>
	transmit_tail = 0;
    3062:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <_ZL13transmit_tail>
	receive_head = 0;
    3066:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <_ZL12receive_head>
	receive_tail = 0;
    306a:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <_ZL12receive_tail>

	UBRR1H = (uint8_t)((baudrate >> 8) & 0x80) ;
    306e:	90 78       	andi	r25, 0x80	; 128
    3070:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(baudrate & 0x00FF);
    3074:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	// set enable bits
	UART1_CONTROL_B = (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    3078:	88 e9       	ldi	r24, 0x98	; 152
    307a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

	// set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
	UART1_CONTROL_C = (1 << UCSZ11) | (1 << UCSZ10);
    307e:	86 e0       	ldi	r24, 0x06	; 6
    3080:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    3084:	08 95       	ret

00003086 <_Z15uart1_read_bytev>:
uint16_t uart1_read_byte ()
{
	uint8_t new_tail;
	uint8_t data;
	uint8_t error;
	if (receive_head == receive_tail)
    3086:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <_ZL12receive_head>
    308a:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <_ZL12receive_tail>
    308e:	98 17       	cp	r25, r24
    3090:	a1 f0       	breq	.+40     	; 0x30ba <_Z15uart1_read_bytev+0x34>
		return UART1_NO_DATA;
	new_tail = (receive_tail + 1) & UART1_BUFFER_MASK;
    3092:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <_ZL12receive_tail>
    3096:	8f 5f       	subi	r24, 0xFF	; 255
	data = receive_buffer[new_tail];
    3098:	e8 2f       	mov	r30, r24
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	e9 5c       	subi	r30, 0xC9	; 201
    309e:	f8 4f       	sbci	r31, 0xF8	; 248
    30a0:	20 81       	ld	r18, Z
	receive_tail = new_tail;
    30a2:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <_ZL12receive_tail>
	error = last_receive_error;
    30a6:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <_ZL18last_receive_error>
	last_receive_error = 0;
    30aa:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <_ZL18last_receive_error>
	return (error << 8) + data;
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	98 2f       	mov	r25, r24
    30b2:	88 27       	eor	r24, r24
    30b4:	82 0f       	add	r24, r18
    30b6:	91 1d       	adc	r25, r1
    30b8:	08 95       	ret
{
	uint8_t new_tail;
	uint8_t data;
	uint8_t error;
	if (receive_head == receive_tail)
		return UART1_NO_DATA;
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	91 e0       	ldi	r25, 0x01	; 1
	data = receive_buffer[new_tail];
	receive_tail = new_tail;
	error = last_receive_error;
	last_receive_error = 0;
	return (error << 8) + data;
}
    30be:	08 95       	ret

000030c0 <_Z15uart1_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart1_send_byte (uint8_t data)
{
	uint8_t new_head;
	new_head  = (transmit_head + 1) & UART1_BUFFER_MASK;
    30c0:	20 91 38 08 	lds	r18, 0x0838	; 0x800838 <_ZL13transmit_head>
    30c4:	2f 5f       	subi	r18, 0xFF	; 255
	while (new_head == transmit_tail) {} // wait for free space in buffer
    30c6:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <_ZL13transmit_tail>
    30ca:	29 17       	cp	r18, r25
    30cc:	e1 f3       	breq	.-8      	; 0x30c6 <_Z15uart1_send_byteh+0x6>
	transmit_buffer[new_head] = data;
    30ce:	e2 2f       	mov	r30, r18
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	e7 5c       	subi	r30, 0xC7	; 199
    30d4:	f7 4f       	sbci	r31, 0xF7	; 247
    30d6:	80 83       	st	Z, r24
	transmit_head = new_head;
    30d8:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <_ZL13transmit_head>
	UART1_CONTROL_B |= (1 << UDRIE1); // enable data register interrupt
    30dc:	e9 ec       	ldi	r30, 0xC9	; 201
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	80 62       	ori	r24, 0x20	; 32
    30e4:	80 83       	st	Z, r24
    30e6:	08 95       	ret

000030e8 <__vector_51>:
	data = receive_buffer[new_tail];
	receive_tail = new_tail;
	error = last_receive_error;
	last_receive_error = 0;
	return (error << 8) + data;
}
    30e8:	1f 92       	push	r1
    30ea:	0f 92       	push	r0
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	0f 92       	push	r0
    30f0:	11 24       	eor	r1, r1
    30f2:	0b b6       	in	r0, 0x3b	; 59
    30f4:	0f 92       	push	r0
    30f6:	2f 93       	push	r18
    30f8:	8f 93       	push	r24
    30fa:	9f 93       	push	r25
    30fc:	ef 93       	push	r30
    30fe:	ff 93       	push	r31
    3100:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
    3104:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    3108:	8c 71       	andi	r24, 0x1C	; 28
    310a:	e0 91 3b 09 	lds	r30, 0x093B	; 0x80093b <_ZL12receive_head>
    310e:	ef 5f       	subi	r30, 0xFF	; 255
    3110:	ef 71       	andi	r30, 0x1F	; 31
    3112:	90 91 3a 09 	lds	r25, 0x093A	; 0x80093a <_ZL12receive_tail>
    3116:	e9 17       	cp	r30, r25
    3118:	39 f0       	breq	.+14     	; 0x3128 <__vector_51+0x40>
    311a:	e0 93 3b 09 	sts	0x093B, r30	; 0x80093b <_ZL12receive_head>
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	e4 5c       	subi	r30, 0xC4	; 196
    3122:	f6 4f       	sbci	r31, 0xF6	; 246
    3124:	20 83       	st	Z, r18
    3126:	01 c0       	rjmp	.+2      	; 0x312a <__vector_51+0x42>
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	90 91 39 09 	lds	r25, 0x0939	; 0x800939 <_ZL18last_receive_error>
    312e:	89 2b       	or	r24, r25
    3130:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <_ZL18last_receive_error>
    3134:	ff 91       	pop	r31
    3136:	ef 91       	pop	r30
    3138:	9f 91       	pop	r25
    313a:	8f 91       	pop	r24
    313c:	2f 91       	pop	r18
    313e:	0f 90       	pop	r0
    3140:	0b be       	out	0x3b, r0	; 59
    3142:	0f 90       	pop	r0
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	0f 90       	pop	r0
    3148:	1f 90       	pop	r1
    314a:	18 95       	reti

0000314c <__vector_52>:
    314c:	1f 92       	push	r1
    314e:	0f 92       	push	r0
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	0f 92       	push	r0
    3154:	11 24       	eor	r1, r1
    3156:	0b b6       	in	r0, 0x3b	; 59
    3158:	0f 92       	push	r0
    315a:	8f 93       	push	r24
    315c:	9f 93       	push	r25
    315e:	ef 93       	push	r30
    3160:	ff 93       	push	r31
    3162:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <_ZL13transmit_head>
    3166:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <_ZL13transmit_tail>
    316a:	98 17       	cp	r25, r24
    316c:	69 f0       	breq	.+26     	; 0x3188 <__vector_52+0x3c>
    316e:	e0 91 5c 09 	lds	r30, 0x095C	; 0x80095c <_ZL13transmit_tail>
    3172:	ef 5f       	subi	r30, 0xFF	; 255
    3174:	ef 71       	andi	r30, 0x1F	; 31
    3176:	e0 93 5c 09 	sts	0x095C, r30	; 0x80095c <_ZL13transmit_tail>
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	e2 5a       	subi	r30, 0xA2	; 162
    317e:	f6 4f       	sbci	r31, 0xF6	; 246
    3180:	80 81       	ld	r24, Z
    3182:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <__vector_52+0x46>
    3188:	e1 ed       	ldi	r30, 0xD1	; 209
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	8f 7d       	andi	r24, 0xDF	; 223
    3190:	80 83       	st	Z, r24
    3192:	ff 91       	pop	r31
    3194:	ef 91       	pop	r30
    3196:	9f 91       	pop	r25
    3198:	8f 91       	pop	r24
    319a:	0f 90       	pop	r0
    319c:	0b be       	out	0x3b, r0	; 59
    319e:	0f 90       	pop	r0
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	0f 90       	pop	r0
    31a4:	1f 90       	pop	r1
    31a6:	18 95       	reti

000031a8 <_Z16uart2_initializej>:
    31a8:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <_ZL13transmit_head>
    31ac:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <_ZL13transmit_tail>
    31b0:	10 92 3b 09 	sts	0x093B, r1	; 0x80093b <_ZL12receive_head>
    31b4:	10 92 3a 09 	sts	0x093A, r1	; 0x80093a <_ZL12receive_tail>
    31b8:	90 78       	andi	r25, 0x80	; 128
    31ba:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
    31be:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
    31c2:	88 e9       	ldi	r24, 0x98	; 152
    31c4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
    31c8:	86 e0       	ldi	r24, 0x06	; 6
    31ca:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	86 e0       	ldi	r24, 0x06	; 6
    31d4:	99 e1       	ldi	r25, 0x19	; 25
    31d6:	23 d3       	rcall	.+1606   	; 0x381e <fdevopen>
    31d8:	90 93 c6 09 	sts	0x09C6, r25	; 0x8009c6 <__iob+0x3>
    31dc:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <__iob+0x2>
    31e0:	08 95       	ret

000031e2 <_Z15uart2_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart2_send_byte (uint8_t data)
{
	uint8_t new_head;
	new_head  = (transmit_head + 1) & UART2_BUFFER_MASK;
    31e2:	20 91 5d 09 	lds	r18, 0x095D	; 0x80095d <_ZL13transmit_head>
    31e6:	2f 5f       	subi	r18, 0xFF	; 255
    31e8:	2f 71       	andi	r18, 0x1F	; 31
	while (new_head == transmit_tail) {} // wait for free space in buffer
    31ea:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <_ZL13transmit_tail>
    31ee:	29 17       	cp	r18, r25
    31f0:	e1 f3       	breq	.-8      	; 0x31ea <_Z15uart2_send_byteh+0x8>
	transmit_buffer[new_head] = data;
    31f2:	e2 2f       	mov	r30, r18
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	e2 5a       	subi	r30, 0xA2	; 162
    31f8:	f6 4f       	sbci	r31, 0xF6	; 246
    31fa:	80 83       	st	Z, r24
	transmit_head = new_head;
    31fc:	20 93 5d 09 	sts	0x095D, r18	; 0x80095d <_ZL13transmit_head>
	UART2_CONTROL_B |= (1 << UDRIE2); // enable data register interrupt
    3200:	e1 ed       	ldi	r30, 0xD1	; 209
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	80 62       	ori	r24, 0x20	; 32
    3208:	80 83       	st	Z, r24
    320a:	08 95       	ret

0000320c <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{

	if (c != '\n') {
    320c:	8a 30       	cpi	r24, 0x0A	; 10
    320e:	11 f0       	breq	.+4      	; 0x3214 <uart_putchar+0x8>
		uart2_send_byte(c);
    3210:	e8 df       	rcall	.-48     	; 0x31e2 <_Z15uart2_send_byteh>
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <uart_putchar+0xc>
	} else {
		uart2_send_byte('\r');
    3214:	8d e0       	ldi	r24, 0x0D	; 13
    3216:	e5 df       	rcall	.-54     	; 0x31e2 <_Z15uart2_send_byteh>
	}

	return 0;
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	08 95       	ret

0000321e <__vector_54>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART3_RECEIVE_INTERRUPT)
{
    321e:	1f 92       	push	r1
    3220:	0f 92       	push	r0
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	0f 92       	push	r0
    3226:	11 24       	eor	r1, r1
    3228:	0b b6       	in	r0, 0x3b	; 59
    322a:	0f 92       	push	r0
    322c:	2f 93       	push	r18
    322e:	8f 93       	push	r24
    3230:	9f 93       	push	r25
    3232:	ef 93       	push	r30
    3234:	ff 93       	push	r31
	uint8_t new_head, data, status, error;
	status = UART3_STATUS;
    3236:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7e0130>
	data = UART3_DATA;
    323a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7e0136>

	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));
    323e:	8c 71       	andi	r24, 0x1C	; 28

	new_head = (receive_head + 1) & UART3_BUFFER_MASK;
    3240:	e0 91 80 09 	lds	r30, 0x0980	; 0x800980 <_ZL12receive_head>
    3244:	ef 5f       	subi	r30, 0xFF	; 255
    3246:	ef 71       	andi	r30, 0x1F	; 31
	if (new_head == receive_tail)
    3248:	90 91 7f 09 	lds	r25, 0x097F	; 0x80097f <_ZL12receive_tail>
    324c:	e9 17       	cp	r30, r25
    324e:	39 f0       	breq	.+14     	; 0x325e <__vector_54+0x40>
		error = UART3_BUFFER_OVERFLOW >> 8;
	else
	{
		receive_head = new_head;
    3250:	e0 93 80 09 	sts	0x0980, r30	; 0x800980 <_ZL12receive_head>
		receive_buffer[new_head] = data;
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	ef 57       	subi	r30, 0x7F	; 127
    3258:	f6 4f       	sbci	r31, 0xF6	; 246
    325a:	20 83       	st	Z, r18
    325c:	01 c0       	rjmp	.+2      	; 0x3260 <__vector_54+0x42>
	// detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));

	new_head = (receive_head + 1) & UART3_BUFFER_MASK;
	if (new_head == receive_tail)
		error = UART3_BUFFER_OVERFLOW >> 8;
    325e:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		receive_head = new_head;
		receive_buffer[new_head] = data;
	}
	last_receive_error |= error;
    3260:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <_ZL18last_receive_error>
    3264:	89 2b       	or	r24, r25
    3266:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <_ZL18last_receive_error>
}
    326a:	ff 91       	pop	r31
    326c:	ef 91       	pop	r30
    326e:	9f 91       	pop	r25
    3270:	8f 91       	pop	r24
    3272:	2f 91       	pop	r18
    3274:	0f 90       	pop	r0
    3276:	0b be       	out	0x3b, r0	; 59
    3278:	0f 90       	pop	r0
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	0f 90       	pop	r0
    327e:	1f 90       	pop	r1
    3280:	18 95       	reti

00003282 <__vector_55>:

ISR (UART3_TRANSMIT_INTERRUPT)
{
    3282:	1f 92       	push	r1
    3284:	0f 92       	push	r0
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	0f 92       	push	r0
    328a:	11 24       	eor	r1, r1
    328c:	0b b6       	in	r0, 0x3b	; 59
    328e:	0f 92       	push	r0
    3290:	8f 93       	push	r24
    3292:	9f 93       	push	r25
    3294:	ef 93       	push	r30
    3296:	ff 93       	push	r31
	uint8_t new_tail;
	if (transmit_head != transmit_tail)
    3298:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <_ZL13transmit_head>
    329c:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <_ZL13transmit_tail>
    32a0:	98 17       	cp	r25, r24
    32a2:	69 f0       	breq	.+26     	; 0x32be <__vector_55+0x3c>
	{
		new_tail = (transmit_tail + 1) & UART3_BUFFER_MASK;
    32a4:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <_ZL13transmit_tail>
    32a8:	ef 5f       	subi	r30, 0xFF	; 255
    32aa:	ef 71       	andi	r30, 0x1F	; 31
		transmit_tail = new_tail;
    32ac:	e0 93 a1 09 	sts	0x09A1, r30	; 0x8009a1 <_ZL13transmit_tail>
		UART3_DATA = transmit_buffer[new_tail]; // transmit
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	ed 55       	subi	r30, 0x5D	; 93
    32b4:	f6 4f       	sbci	r31, 0xF6	; 246
    32b6:	80 81       	ld	r24, Z
    32b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7e0136>
    32bc:	05 c0       	rjmp	.+10     	; 0x32c8 <__vector_55+0x46>
	}
	else
		UART3_CONTROL_B &= ~(1 << UDRIE3); // buffer empty so end transmission
    32be:	e1 e3       	ldi	r30, 0x31	; 49
    32c0:	f1 e0       	ldi	r31, 0x01	; 1
    32c2:	80 81       	ld	r24, Z
    32c4:	8f 7d       	andi	r24, 0xDF	; 223
    32c6:	80 83       	st	Z, r24
}
    32c8:	ff 91       	pop	r31
    32ca:	ef 91       	pop	r30
    32cc:	9f 91       	pop	r25
    32ce:	8f 91       	pop	r24
    32d0:	0f 90       	pop	r0
    32d2:	0b be       	out	0x3b, r0	; 59
    32d4:	0f 90       	pop	r0
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	0f 90       	pop	r0
    32da:	1f 90       	pop	r1
    32dc:	18 95       	reti

000032de <_Z16uart3_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart3_initialize (uint16_t baudrate)
{
	transmit_head = 0;
    32de:	10 92 a2 09 	sts	0x09A2, r1	; 0x8009a2 <_ZL13transmit_head>
	transmit_tail = 0;
    32e2:	10 92 a1 09 	sts	0x09A1, r1	; 0x8009a1 <_ZL13transmit_tail>
	receive_head = 0;
    32e6:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <_ZL12receive_head>
	receive_tail = 0;
    32ea:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <_ZL12receive_tail>

	UBRR3H = (uint8_t)((baudrate >> 8) & 0x80) ;
    32ee:	90 78       	andi	r25, 0x80	; 128
    32f0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7e0135>
	UBRR3L = (uint8_t)(baudrate & 0x00FF);
    32f4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7e0134>

	// set enable bits
	UART3_CONTROL_B = (1 << RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    32f8:	88 e9       	ldi	r24, 0x98	; 152
    32fa:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7e0131>

	// set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
	UART3_CONTROL_C = (1 << UCSZ31) | (1 << UCSZ30);
    32fe:	86 e0       	ldi	r24, 0x06	; 6
    3300:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7e0132>
    3304:	08 95       	ret

00003306 <__subsf3>:
    3306:	50 58       	subi	r21, 0x80	; 128

00003308 <__addsf3>:
    3308:	bb 27       	eor	r27, r27
    330a:	aa 27       	eor	r26, r26
    330c:	0e d0       	rcall	.+28     	; 0x332a <__addsf3x>
    330e:	75 c1       	rjmp	.+746    	; 0x35fa <__fp_round>
    3310:	66 d1       	rcall	.+716    	; 0x35de <__fp_pscA>
    3312:	30 f0       	brcs	.+12     	; 0x3320 <__addsf3+0x18>
    3314:	6b d1       	rcall	.+726    	; 0x35ec <__fp_pscB>
    3316:	20 f0       	brcs	.+8      	; 0x3320 <__addsf3+0x18>
    3318:	31 f4       	brne	.+12     	; 0x3326 <__addsf3+0x1e>
    331a:	9f 3f       	cpi	r25, 0xFF	; 255
    331c:	11 f4       	brne	.+4      	; 0x3322 <__addsf3+0x1a>
    331e:	1e f4       	brtc	.+6      	; 0x3326 <__addsf3+0x1e>
    3320:	5b c1       	rjmp	.+694    	; 0x35d8 <__fp_nan>
    3322:	0e f4       	brtc	.+2      	; 0x3326 <__addsf3+0x1e>
    3324:	e0 95       	com	r30
    3326:	e7 fb       	bst	r30, 7
    3328:	51 c1       	rjmp	.+674    	; 0x35cc <__fp_inf>

0000332a <__addsf3x>:
    332a:	e9 2f       	mov	r30, r25
    332c:	77 d1       	rcall	.+750    	; 0x361c <__fp_split3>
    332e:	80 f3       	brcs	.-32     	; 0x3310 <__addsf3+0x8>
    3330:	ba 17       	cp	r27, r26
    3332:	62 07       	cpc	r22, r18
    3334:	73 07       	cpc	r23, r19
    3336:	84 07       	cpc	r24, r20
    3338:	95 07       	cpc	r25, r21
    333a:	18 f0       	brcs	.+6      	; 0x3342 <__addsf3x+0x18>
    333c:	71 f4       	brne	.+28     	; 0x335a <__addsf3x+0x30>
    333e:	9e f5       	brtc	.+102    	; 0x33a6 <__addsf3x+0x7c>
    3340:	8f c1       	rjmp	.+798    	; 0x3660 <__fp_zero>
    3342:	0e f4       	brtc	.+2      	; 0x3346 <__addsf3x+0x1c>
    3344:	e0 95       	com	r30
    3346:	0b 2e       	mov	r0, r27
    3348:	ba 2f       	mov	r27, r26
    334a:	a0 2d       	mov	r26, r0
    334c:	0b 01       	movw	r0, r22
    334e:	b9 01       	movw	r22, r18
    3350:	90 01       	movw	r18, r0
    3352:	0c 01       	movw	r0, r24
    3354:	ca 01       	movw	r24, r20
    3356:	a0 01       	movw	r20, r0
    3358:	11 24       	eor	r1, r1
    335a:	ff 27       	eor	r31, r31
    335c:	59 1b       	sub	r21, r25
    335e:	99 f0       	breq	.+38     	; 0x3386 <__addsf3x+0x5c>
    3360:	59 3f       	cpi	r21, 0xF9	; 249
    3362:	50 f4       	brcc	.+20     	; 0x3378 <__addsf3x+0x4e>
    3364:	50 3e       	cpi	r21, 0xE0	; 224
    3366:	68 f1       	brcs	.+90     	; 0x33c2 <__addsf3x+0x98>
    3368:	1a 16       	cp	r1, r26
    336a:	f0 40       	sbci	r31, 0x00	; 0
    336c:	a2 2f       	mov	r26, r18
    336e:	23 2f       	mov	r18, r19
    3370:	34 2f       	mov	r19, r20
    3372:	44 27       	eor	r20, r20
    3374:	58 5f       	subi	r21, 0xF8	; 248
    3376:	f3 cf       	rjmp	.-26     	; 0x335e <__addsf3x+0x34>
    3378:	46 95       	lsr	r20
    337a:	37 95       	ror	r19
    337c:	27 95       	ror	r18
    337e:	a7 95       	ror	r26
    3380:	f0 40       	sbci	r31, 0x00	; 0
    3382:	53 95       	inc	r21
    3384:	c9 f7       	brne	.-14     	; 0x3378 <__addsf3x+0x4e>
    3386:	7e f4       	brtc	.+30     	; 0x33a6 <__addsf3x+0x7c>
    3388:	1f 16       	cp	r1, r31
    338a:	ba 0b       	sbc	r27, r26
    338c:	62 0b       	sbc	r22, r18
    338e:	73 0b       	sbc	r23, r19
    3390:	84 0b       	sbc	r24, r20
    3392:	ba f0       	brmi	.+46     	; 0x33c2 <__addsf3x+0x98>
    3394:	91 50       	subi	r25, 0x01	; 1
    3396:	a1 f0       	breq	.+40     	; 0x33c0 <__addsf3x+0x96>
    3398:	ff 0f       	add	r31, r31
    339a:	bb 1f       	adc	r27, r27
    339c:	66 1f       	adc	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	88 1f       	adc	r24, r24
    33a2:	c2 f7       	brpl	.-16     	; 0x3394 <__addsf3x+0x6a>
    33a4:	0e c0       	rjmp	.+28     	; 0x33c2 <__addsf3x+0x98>
    33a6:	ba 0f       	add	r27, r26
    33a8:	62 1f       	adc	r22, r18
    33aa:	73 1f       	adc	r23, r19
    33ac:	84 1f       	adc	r24, r20
    33ae:	48 f4       	brcc	.+18     	; 0x33c2 <__addsf3x+0x98>
    33b0:	87 95       	ror	r24
    33b2:	77 95       	ror	r23
    33b4:	67 95       	ror	r22
    33b6:	b7 95       	ror	r27
    33b8:	f7 95       	ror	r31
    33ba:	9e 3f       	cpi	r25, 0xFE	; 254
    33bc:	08 f0       	brcs	.+2      	; 0x33c0 <__addsf3x+0x96>
    33be:	b3 cf       	rjmp	.-154    	; 0x3326 <__addsf3+0x1e>
    33c0:	93 95       	inc	r25
    33c2:	88 0f       	add	r24, r24
    33c4:	08 f0       	brcs	.+2      	; 0x33c8 <__addsf3x+0x9e>
    33c6:	99 27       	eor	r25, r25
    33c8:	ee 0f       	add	r30, r30
    33ca:	97 95       	ror	r25
    33cc:	87 95       	ror	r24
    33ce:	08 95       	ret

000033d0 <__cmpsf2>:
    33d0:	d9 d0       	rcall	.+434    	; 0x3584 <__fp_cmp>
    33d2:	08 f4       	brcc	.+2      	; 0x33d6 <__cmpsf2+0x6>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	08 95       	ret

000033d8 <__divsf3>:
    33d8:	0c d0       	rcall	.+24     	; 0x33f2 <__divsf3x>
    33da:	0f c1       	rjmp	.+542    	; 0x35fa <__fp_round>
    33dc:	07 d1       	rcall	.+526    	; 0x35ec <__fp_pscB>
    33de:	40 f0       	brcs	.+16     	; 0x33f0 <__divsf3+0x18>
    33e0:	fe d0       	rcall	.+508    	; 0x35de <__fp_pscA>
    33e2:	30 f0       	brcs	.+12     	; 0x33f0 <__divsf3+0x18>
    33e4:	21 f4       	brne	.+8      	; 0x33ee <__divsf3+0x16>
    33e6:	5f 3f       	cpi	r21, 0xFF	; 255
    33e8:	19 f0       	breq	.+6      	; 0x33f0 <__divsf3+0x18>
    33ea:	f0 c0       	rjmp	.+480    	; 0x35cc <__fp_inf>
    33ec:	51 11       	cpse	r21, r1
    33ee:	39 c1       	rjmp	.+626    	; 0x3662 <__fp_szero>
    33f0:	f3 c0       	rjmp	.+486    	; 0x35d8 <__fp_nan>

000033f2 <__divsf3x>:
    33f2:	14 d1       	rcall	.+552    	; 0x361c <__fp_split3>
    33f4:	98 f3       	brcs	.-26     	; 0x33dc <__divsf3+0x4>

000033f6 <__divsf3_pse>:
    33f6:	99 23       	and	r25, r25
    33f8:	c9 f3       	breq	.-14     	; 0x33ec <__divsf3+0x14>
    33fa:	55 23       	and	r21, r21
    33fc:	b1 f3       	breq	.-20     	; 0x33ea <__divsf3+0x12>
    33fe:	95 1b       	sub	r25, r21
    3400:	55 0b       	sbc	r21, r21
    3402:	bb 27       	eor	r27, r27
    3404:	aa 27       	eor	r26, r26
    3406:	62 17       	cp	r22, r18
    3408:	73 07       	cpc	r23, r19
    340a:	84 07       	cpc	r24, r20
    340c:	38 f0       	brcs	.+14     	; 0x341c <__divsf3_pse+0x26>
    340e:	9f 5f       	subi	r25, 0xFF	; 255
    3410:	5f 4f       	sbci	r21, 0xFF	; 255
    3412:	22 0f       	add	r18, r18
    3414:	33 1f       	adc	r19, r19
    3416:	44 1f       	adc	r20, r20
    3418:	aa 1f       	adc	r26, r26
    341a:	a9 f3       	breq	.-22     	; 0x3406 <__divsf3_pse+0x10>
    341c:	33 d0       	rcall	.+102    	; 0x3484 <__divsf3_pse+0x8e>
    341e:	0e 2e       	mov	r0, r30
    3420:	3a f0       	brmi	.+14     	; 0x3430 <__divsf3_pse+0x3a>
    3422:	e0 e8       	ldi	r30, 0x80	; 128
    3424:	30 d0       	rcall	.+96     	; 0x3486 <__divsf3_pse+0x90>
    3426:	91 50       	subi	r25, 0x01	; 1
    3428:	50 40       	sbci	r21, 0x00	; 0
    342a:	e6 95       	lsr	r30
    342c:	00 1c       	adc	r0, r0
    342e:	ca f7       	brpl	.-14     	; 0x3422 <__divsf3_pse+0x2c>
    3430:	29 d0       	rcall	.+82     	; 0x3484 <__divsf3_pse+0x8e>
    3432:	fe 2f       	mov	r31, r30
    3434:	27 d0       	rcall	.+78     	; 0x3484 <__divsf3_pse+0x8e>
    3436:	66 0f       	add	r22, r22
    3438:	77 1f       	adc	r23, r23
    343a:	88 1f       	adc	r24, r24
    343c:	bb 1f       	adc	r27, r27
    343e:	26 17       	cp	r18, r22
    3440:	37 07       	cpc	r19, r23
    3442:	48 07       	cpc	r20, r24
    3444:	ab 07       	cpc	r26, r27
    3446:	b0 e8       	ldi	r27, 0x80	; 128
    3448:	09 f0       	breq	.+2      	; 0x344c <__divsf3_pse+0x56>
    344a:	bb 0b       	sbc	r27, r27
    344c:	80 2d       	mov	r24, r0
    344e:	bf 01       	movw	r22, r30
    3450:	ff 27       	eor	r31, r31
    3452:	93 58       	subi	r25, 0x83	; 131
    3454:	5f 4f       	sbci	r21, 0xFF	; 255
    3456:	2a f0       	brmi	.+10     	; 0x3462 <__divsf3_pse+0x6c>
    3458:	9e 3f       	cpi	r25, 0xFE	; 254
    345a:	51 05       	cpc	r21, r1
    345c:	68 f0       	brcs	.+26     	; 0x3478 <__divsf3_pse+0x82>
    345e:	b6 c0       	rjmp	.+364    	; 0x35cc <__fp_inf>
    3460:	00 c1       	rjmp	.+512    	; 0x3662 <__fp_szero>
    3462:	5f 3f       	cpi	r21, 0xFF	; 255
    3464:	ec f3       	brlt	.-6      	; 0x3460 <__divsf3_pse+0x6a>
    3466:	98 3e       	cpi	r25, 0xE8	; 232
    3468:	dc f3       	brlt	.-10     	; 0x3460 <__divsf3_pse+0x6a>
    346a:	86 95       	lsr	r24
    346c:	77 95       	ror	r23
    346e:	67 95       	ror	r22
    3470:	b7 95       	ror	r27
    3472:	f7 95       	ror	r31
    3474:	9f 5f       	subi	r25, 0xFF	; 255
    3476:	c9 f7       	brne	.-14     	; 0x346a <__divsf3_pse+0x74>
    3478:	88 0f       	add	r24, r24
    347a:	91 1d       	adc	r25, r1
    347c:	96 95       	lsr	r25
    347e:	87 95       	ror	r24
    3480:	97 f9       	bld	r25, 7
    3482:	08 95       	ret
    3484:	e1 e0       	ldi	r30, 0x01	; 1
    3486:	66 0f       	add	r22, r22
    3488:	77 1f       	adc	r23, r23
    348a:	88 1f       	adc	r24, r24
    348c:	bb 1f       	adc	r27, r27
    348e:	62 17       	cp	r22, r18
    3490:	73 07       	cpc	r23, r19
    3492:	84 07       	cpc	r24, r20
    3494:	ba 07       	cpc	r27, r26
    3496:	20 f0       	brcs	.+8      	; 0x34a0 <__divsf3_pse+0xaa>
    3498:	62 1b       	sub	r22, r18
    349a:	73 0b       	sbc	r23, r19
    349c:	84 0b       	sbc	r24, r20
    349e:	ba 0b       	sbc	r27, r26
    34a0:	ee 1f       	adc	r30, r30
    34a2:	88 f7       	brcc	.-30     	; 0x3486 <__divsf3_pse+0x90>
    34a4:	e0 95       	com	r30
    34a6:	08 95       	ret

000034a8 <__fixsfsi>:
    34a8:	04 d0       	rcall	.+8      	; 0x34b2 <__fixunssfsi>
    34aa:	68 94       	set
    34ac:	b1 11       	cpse	r27, r1
    34ae:	d9 c0       	rjmp	.+434    	; 0x3662 <__fp_szero>
    34b0:	08 95       	ret

000034b2 <__fixunssfsi>:
    34b2:	bc d0       	rcall	.+376    	; 0x362c <__fp_splitA>
    34b4:	88 f0       	brcs	.+34     	; 0x34d8 <__fixunssfsi+0x26>
    34b6:	9f 57       	subi	r25, 0x7F	; 127
    34b8:	90 f0       	brcs	.+36     	; 0x34de <__fixunssfsi+0x2c>
    34ba:	b9 2f       	mov	r27, r25
    34bc:	99 27       	eor	r25, r25
    34be:	b7 51       	subi	r27, 0x17	; 23
    34c0:	a0 f0       	brcs	.+40     	; 0x34ea <__fixunssfsi+0x38>
    34c2:	d1 f0       	breq	.+52     	; 0x34f8 <__fixunssfsi+0x46>
    34c4:	66 0f       	add	r22, r22
    34c6:	77 1f       	adc	r23, r23
    34c8:	88 1f       	adc	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	1a f0       	brmi	.+6      	; 0x34d4 <__fixunssfsi+0x22>
    34ce:	ba 95       	dec	r27
    34d0:	c9 f7       	brne	.-14     	; 0x34c4 <__fixunssfsi+0x12>
    34d2:	12 c0       	rjmp	.+36     	; 0x34f8 <__fixunssfsi+0x46>
    34d4:	b1 30       	cpi	r27, 0x01	; 1
    34d6:	81 f0       	breq	.+32     	; 0x34f8 <__fixunssfsi+0x46>
    34d8:	c3 d0       	rcall	.+390    	; 0x3660 <__fp_zero>
    34da:	b1 e0       	ldi	r27, 0x01	; 1
    34dc:	08 95       	ret
    34de:	c0 c0       	rjmp	.+384    	; 0x3660 <__fp_zero>
    34e0:	67 2f       	mov	r22, r23
    34e2:	78 2f       	mov	r23, r24
    34e4:	88 27       	eor	r24, r24
    34e6:	b8 5f       	subi	r27, 0xF8	; 248
    34e8:	39 f0       	breq	.+14     	; 0x34f8 <__fixunssfsi+0x46>
    34ea:	b9 3f       	cpi	r27, 0xF9	; 249
    34ec:	cc f3       	brlt	.-14     	; 0x34e0 <__fixunssfsi+0x2e>
    34ee:	86 95       	lsr	r24
    34f0:	77 95       	ror	r23
    34f2:	67 95       	ror	r22
    34f4:	b3 95       	inc	r27
    34f6:	d9 f7       	brne	.-10     	; 0x34ee <__fixunssfsi+0x3c>
    34f8:	3e f4       	brtc	.+14     	; 0x3508 <__fixunssfsi+0x56>
    34fa:	90 95       	com	r25
    34fc:	80 95       	com	r24
    34fe:	70 95       	com	r23
    3500:	61 95       	neg	r22
    3502:	7f 4f       	sbci	r23, 0xFF	; 255
    3504:	8f 4f       	sbci	r24, 0xFF	; 255
    3506:	9f 4f       	sbci	r25, 0xFF	; 255
    3508:	08 95       	ret

0000350a <__floatunsisf>:
    350a:	e8 94       	clt
    350c:	09 c0       	rjmp	.+18     	; 0x3520 <__floatsisf+0x12>

0000350e <__floatsisf>:
    350e:	97 fb       	bst	r25, 7
    3510:	3e f4       	brtc	.+14     	; 0x3520 <__floatsisf+0x12>
    3512:	90 95       	com	r25
    3514:	80 95       	com	r24
    3516:	70 95       	com	r23
    3518:	61 95       	neg	r22
    351a:	7f 4f       	sbci	r23, 0xFF	; 255
    351c:	8f 4f       	sbci	r24, 0xFF	; 255
    351e:	9f 4f       	sbci	r25, 0xFF	; 255
    3520:	99 23       	and	r25, r25
    3522:	a9 f0       	breq	.+42     	; 0x354e <__floatsisf+0x40>
    3524:	f9 2f       	mov	r31, r25
    3526:	96 e9       	ldi	r25, 0x96	; 150
    3528:	bb 27       	eor	r27, r27
    352a:	93 95       	inc	r25
    352c:	f6 95       	lsr	r31
    352e:	87 95       	ror	r24
    3530:	77 95       	ror	r23
    3532:	67 95       	ror	r22
    3534:	b7 95       	ror	r27
    3536:	f1 11       	cpse	r31, r1
    3538:	f8 cf       	rjmp	.-16     	; 0x352a <__floatsisf+0x1c>
    353a:	fa f4       	brpl	.+62     	; 0x357a <__floatsisf+0x6c>
    353c:	bb 0f       	add	r27, r27
    353e:	11 f4       	brne	.+4      	; 0x3544 <__floatsisf+0x36>
    3540:	60 ff       	sbrs	r22, 0
    3542:	1b c0       	rjmp	.+54     	; 0x357a <__floatsisf+0x6c>
    3544:	6f 5f       	subi	r22, 0xFF	; 255
    3546:	7f 4f       	sbci	r23, 0xFF	; 255
    3548:	8f 4f       	sbci	r24, 0xFF	; 255
    354a:	9f 4f       	sbci	r25, 0xFF	; 255
    354c:	16 c0       	rjmp	.+44     	; 0x357a <__floatsisf+0x6c>
    354e:	88 23       	and	r24, r24
    3550:	11 f0       	breq	.+4      	; 0x3556 <__floatsisf+0x48>
    3552:	96 e9       	ldi	r25, 0x96	; 150
    3554:	11 c0       	rjmp	.+34     	; 0x3578 <__floatsisf+0x6a>
    3556:	77 23       	and	r23, r23
    3558:	21 f0       	breq	.+8      	; 0x3562 <__floatsisf+0x54>
    355a:	9e e8       	ldi	r25, 0x8E	; 142
    355c:	87 2f       	mov	r24, r23
    355e:	76 2f       	mov	r23, r22
    3560:	05 c0       	rjmp	.+10     	; 0x356c <__floatsisf+0x5e>
    3562:	66 23       	and	r22, r22
    3564:	71 f0       	breq	.+28     	; 0x3582 <__floatsisf+0x74>
    3566:	96 e8       	ldi	r25, 0x86	; 134
    3568:	86 2f       	mov	r24, r22
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	60 e0       	ldi	r22, 0x00	; 0
    356e:	2a f0       	brmi	.+10     	; 0x357a <__floatsisf+0x6c>
    3570:	9a 95       	dec	r25
    3572:	66 0f       	add	r22, r22
    3574:	77 1f       	adc	r23, r23
    3576:	88 1f       	adc	r24, r24
    3578:	da f7       	brpl	.-10     	; 0x3570 <__floatsisf+0x62>
    357a:	88 0f       	add	r24, r24
    357c:	96 95       	lsr	r25
    357e:	87 95       	ror	r24
    3580:	97 f9       	bld	r25, 7
    3582:	08 95       	ret

00003584 <__fp_cmp>:
    3584:	99 0f       	add	r25, r25
    3586:	00 08       	sbc	r0, r0
    3588:	55 0f       	add	r21, r21
    358a:	aa 0b       	sbc	r26, r26
    358c:	e0 e8       	ldi	r30, 0x80	; 128
    358e:	fe ef       	ldi	r31, 0xFE	; 254
    3590:	16 16       	cp	r1, r22
    3592:	17 06       	cpc	r1, r23
    3594:	e8 07       	cpc	r30, r24
    3596:	f9 07       	cpc	r31, r25
    3598:	c0 f0       	brcs	.+48     	; 0x35ca <__fp_cmp+0x46>
    359a:	12 16       	cp	r1, r18
    359c:	13 06       	cpc	r1, r19
    359e:	e4 07       	cpc	r30, r20
    35a0:	f5 07       	cpc	r31, r21
    35a2:	98 f0       	brcs	.+38     	; 0x35ca <__fp_cmp+0x46>
    35a4:	62 1b       	sub	r22, r18
    35a6:	73 0b       	sbc	r23, r19
    35a8:	84 0b       	sbc	r24, r20
    35aa:	95 0b       	sbc	r25, r21
    35ac:	39 f4       	brne	.+14     	; 0x35bc <__fp_cmp+0x38>
    35ae:	0a 26       	eor	r0, r26
    35b0:	61 f0       	breq	.+24     	; 0x35ca <__fp_cmp+0x46>
    35b2:	23 2b       	or	r18, r19
    35b4:	24 2b       	or	r18, r20
    35b6:	25 2b       	or	r18, r21
    35b8:	21 f4       	brne	.+8      	; 0x35c2 <__fp_cmp+0x3e>
    35ba:	08 95       	ret
    35bc:	0a 26       	eor	r0, r26
    35be:	09 f4       	brne	.+2      	; 0x35c2 <__fp_cmp+0x3e>
    35c0:	a1 40       	sbci	r26, 0x01	; 1
    35c2:	a6 95       	lsr	r26
    35c4:	8f ef       	ldi	r24, 0xFF	; 255
    35c6:	81 1d       	adc	r24, r1
    35c8:	81 1d       	adc	r24, r1
    35ca:	08 95       	ret

000035cc <__fp_inf>:
    35cc:	97 f9       	bld	r25, 7
    35ce:	9f 67       	ori	r25, 0x7F	; 127
    35d0:	80 e8       	ldi	r24, 0x80	; 128
    35d2:	70 e0       	ldi	r23, 0x00	; 0
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	08 95       	ret

000035d8 <__fp_nan>:
    35d8:	9f ef       	ldi	r25, 0xFF	; 255
    35da:	80 ec       	ldi	r24, 0xC0	; 192
    35dc:	08 95       	ret

000035de <__fp_pscA>:
    35de:	00 24       	eor	r0, r0
    35e0:	0a 94       	dec	r0
    35e2:	16 16       	cp	r1, r22
    35e4:	17 06       	cpc	r1, r23
    35e6:	18 06       	cpc	r1, r24
    35e8:	09 06       	cpc	r0, r25
    35ea:	08 95       	ret

000035ec <__fp_pscB>:
    35ec:	00 24       	eor	r0, r0
    35ee:	0a 94       	dec	r0
    35f0:	12 16       	cp	r1, r18
    35f2:	13 06       	cpc	r1, r19
    35f4:	14 06       	cpc	r1, r20
    35f6:	05 06       	cpc	r0, r21
    35f8:	08 95       	ret

000035fa <__fp_round>:
    35fa:	09 2e       	mov	r0, r25
    35fc:	03 94       	inc	r0
    35fe:	00 0c       	add	r0, r0
    3600:	11 f4       	brne	.+4      	; 0x3606 <__fp_round+0xc>
    3602:	88 23       	and	r24, r24
    3604:	52 f0       	brmi	.+20     	; 0x361a <__fp_round+0x20>
    3606:	bb 0f       	add	r27, r27
    3608:	40 f4       	brcc	.+16     	; 0x361a <__fp_round+0x20>
    360a:	bf 2b       	or	r27, r31
    360c:	11 f4       	brne	.+4      	; 0x3612 <__fp_round+0x18>
    360e:	60 ff       	sbrs	r22, 0
    3610:	04 c0       	rjmp	.+8      	; 0x361a <__fp_round+0x20>
    3612:	6f 5f       	subi	r22, 0xFF	; 255
    3614:	7f 4f       	sbci	r23, 0xFF	; 255
    3616:	8f 4f       	sbci	r24, 0xFF	; 255
    3618:	9f 4f       	sbci	r25, 0xFF	; 255
    361a:	08 95       	ret

0000361c <__fp_split3>:
    361c:	57 fd       	sbrc	r21, 7
    361e:	90 58       	subi	r25, 0x80	; 128
    3620:	44 0f       	add	r20, r20
    3622:	55 1f       	adc	r21, r21
    3624:	59 f0       	breq	.+22     	; 0x363c <__fp_splitA+0x10>
    3626:	5f 3f       	cpi	r21, 0xFF	; 255
    3628:	71 f0       	breq	.+28     	; 0x3646 <__fp_splitA+0x1a>
    362a:	47 95       	ror	r20

0000362c <__fp_splitA>:
    362c:	88 0f       	add	r24, r24
    362e:	97 fb       	bst	r25, 7
    3630:	99 1f       	adc	r25, r25
    3632:	61 f0       	breq	.+24     	; 0x364c <__fp_splitA+0x20>
    3634:	9f 3f       	cpi	r25, 0xFF	; 255
    3636:	79 f0       	breq	.+30     	; 0x3656 <__fp_splitA+0x2a>
    3638:	87 95       	ror	r24
    363a:	08 95       	ret
    363c:	12 16       	cp	r1, r18
    363e:	13 06       	cpc	r1, r19
    3640:	14 06       	cpc	r1, r20
    3642:	55 1f       	adc	r21, r21
    3644:	f2 cf       	rjmp	.-28     	; 0x362a <__fp_split3+0xe>
    3646:	46 95       	lsr	r20
    3648:	f1 df       	rcall	.-30     	; 0x362c <__fp_splitA>
    364a:	08 c0       	rjmp	.+16     	; 0x365c <__fp_splitA+0x30>
    364c:	16 16       	cp	r1, r22
    364e:	17 06       	cpc	r1, r23
    3650:	18 06       	cpc	r1, r24
    3652:	99 1f       	adc	r25, r25
    3654:	f1 cf       	rjmp	.-30     	; 0x3638 <__fp_splitA+0xc>
    3656:	86 95       	lsr	r24
    3658:	71 05       	cpc	r23, r1
    365a:	61 05       	cpc	r22, r1
    365c:	08 94       	sec
    365e:	08 95       	ret

00003660 <__fp_zero>:
    3660:	e8 94       	clt

00003662 <__fp_szero>:
    3662:	bb 27       	eor	r27, r27
    3664:	66 27       	eor	r22, r22
    3666:	77 27       	eor	r23, r23
    3668:	cb 01       	movw	r24, r22
    366a:	97 f9       	bld	r25, 7
    366c:	08 95       	ret

0000366e <__mulsf3>:
    366e:	0b d0       	rcall	.+22     	; 0x3686 <__mulsf3x>
    3670:	c4 cf       	rjmp	.-120    	; 0x35fa <__fp_round>
    3672:	b5 df       	rcall	.-150    	; 0x35de <__fp_pscA>
    3674:	28 f0       	brcs	.+10     	; 0x3680 <__mulsf3+0x12>
    3676:	ba df       	rcall	.-140    	; 0x35ec <__fp_pscB>
    3678:	18 f0       	brcs	.+6      	; 0x3680 <__mulsf3+0x12>
    367a:	95 23       	and	r25, r21
    367c:	09 f0       	breq	.+2      	; 0x3680 <__mulsf3+0x12>
    367e:	a6 cf       	rjmp	.-180    	; 0x35cc <__fp_inf>
    3680:	ab cf       	rjmp	.-170    	; 0x35d8 <__fp_nan>
    3682:	11 24       	eor	r1, r1
    3684:	ee cf       	rjmp	.-36     	; 0x3662 <__fp_szero>

00003686 <__mulsf3x>:
    3686:	ca df       	rcall	.-108    	; 0x361c <__fp_split3>
    3688:	a0 f3       	brcs	.-24     	; 0x3672 <__mulsf3+0x4>

0000368a <__mulsf3_pse>:
    368a:	95 9f       	mul	r25, r21
    368c:	d1 f3       	breq	.-12     	; 0x3682 <__mulsf3+0x14>
    368e:	95 0f       	add	r25, r21
    3690:	50 e0       	ldi	r21, 0x00	; 0
    3692:	55 1f       	adc	r21, r21
    3694:	62 9f       	mul	r22, r18
    3696:	f0 01       	movw	r30, r0
    3698:	72 9f       	mul	r23, r18
    369a:	bb 27       	eor	r27, r27
    369c:	f0 0d       	add	r31, r0
    369e:	b1 1d       	adc	r27, r1
    36a0:	63 9f       	mul	r22, r19
    36a2:	aa 27       	eor	r26, r26
    36a4:	f0 0d       	add	r31, r0
    36a6:	b1 1d       	adc	r27, r1
    36a8:	aa 1f       	adc	r26, r26
    36aa:	64 9f       	mul	r22, r20
    36ac:	66 27       	eor	r22, r22
    36ae:	b0 0d       	add	r27, r0
    36b0:	a1 1d       	adc	r26, r1
    36b2:	66 1f       	adc	r22, r22
    36b4:	82 9f       	mul	r24, r18
    36b6:	22 27       	eor	r18, r18
    36b8:	b0 0d       	add	r27, r0
    36ba:	a1 1d       	adc	r26, r1
    36bc:	62 1f       	adc	r22, r18
    36be:	73 9f       	mul	r23, r19
    36c0:	b0 0d       	add	r27, r0
    36c2:	a1 1d       	adc	r26, r1
    36c4:	62 1f       	adc	r22, r18
    36c6:	83 9f       	mul	r24, r19
    36c8:	a0 0d       	add	r26, r0
    36ca:	61 1d       	adc	r22, r1
    36cc:	22 1f       	adc	r18, r18
    36ce:	74 9f       	mul	r23, r20
    36d0:	33 27       	eor	r19, r19
    36d2:	a0 0d       	add	r26, r0
    36d4:	61 1d       	adc	r22, r1
    36d6:	23 1f       	adc	r18, r19
    36d8:	84 9f       	mul	r24, r20
    36da:	60 0d       	add	r22, r0
    36dc:	21 1d       	adc	r18, r1
    36de:	82 2f       	mov	r24, r18
    36e0:	76 2f       	mov	r23, r22
    36e2:	6a 2f       	mov	r22, r26
    36e4:	11 24       	eor	r1, r1
    36e6:	9f 57       	subi	r25, 0x7F	; 127
    36e8:	50 40       	sbci	r21, 0x00	; 0
    36ea:	8a f0       	brmi	.+34     	; 0x370e <__mulsf3_pse+0x84>
    36ec:	e1 f0       	breq	.+56     	; 0x3726 <__mulsf3_pse+0x9c>
    36ee:	88 23       	and	r24, r24
    36f0:	4a f0       	brmi	.+18     	; 0x3704 <__mulsf3_pse+0x7a>
    36f2:	ee 0f       	add	r30, r30
    36f4:	ff 1f       	adc	r31, r31
    36f6:	bb 1f       	adc	r27, r27
    36f8:	66 1f       	adc	r22, r22
    36fa:	77 1f       	adc	r23, r23
    36fc:	88 1f       	adc	r24, r24
    36fe:	91 50       	subi	r25, 0x01	; 1
    3700:	50 40       	sbci	r21, 0x00	; 0
    3702:	a9 f7       	brne	.-22     	; 0x36ee <__mulsf3_pse+0x64>
    3704:	9e 3f       	cpi	r25, 0xFE	; 254
    3706:	51 05       	cpc	r21, r1
    3708:	70 f0       	brcs	.+28     	; 0x3726 <__mulsf3_pse+0x9c>
    370a:	60 cf       	rjmp	.-320    	; 0x35cc <__fp_inf>
    370c:	aa cf       	rjmp	.-172    	; 0x3662 <__fp_szero>
    370e:	5f 3f       	cpi	r21, 0xFF	; 255
    3710:	ec f3       	brlt	.-6      	; 0x370c <__mulsf3_pse+0x82>
    3712:	98 3e       	cpi	r25, 0xE8	; 232
    3714:	dc f3       	brlt	.-10     	; 0x370c <__mulsf3_pse+0x82>
    3716:	86 95       	lsr	r24
    3718:	77 95       	ror	r23
    371a:	67 95       	ror	r22
    371c:	b7 95       	ror	r27
    371e:	f7 95       	ror	r31
    3720:	e7 95       	ror	r30
    3722:	9f 5f       	subi	r25, 0xFF	; 255
    3724:	c1 f7       	brne	.-16     	; 0x3716 <__mulsf3_pse+0x8c>
    3726:	fe 2b       	or	r31, r30
    3728:	88 0f       	add	r24, r24
    372a:	91 1d       	adc	r25, r1
    372c:	96 95       	lsr	r25
    372e:	87 95       	ror	r24
    3730:	97 f9       	bld	r25, 7
    3732:	08 95       	ret

00003734 <__mulsi3>:
    3734:	db 01       	movw	r26, r22
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	67 d0       	rcall	.+206    	; 0x380a <__muluhisi3>
    373c:	bf 91       	pop	r27
    373e:	af 91       	pop	r26
    3740:	a2 9f       	mul	r26, r18
    3742:	80 0d       	add	r24, r0
    3744:	91 1d       	adc	r25, r1
    3746:	a3 9f       	mul	r26, r19
    3748:	90 0d       	add	r25, r0
    374a:	b2 9f       	mul	r27, r18
    374c:	90 0d       	add	r25, r0
    374e:	11 24       	eor	r1, r1
    3750:	08 95       	ret

00003752 <__udivmodsi4>:
    3752:	a1 e2       	ldi	r26, 0x21	; 33
    3754:	1a 2e       	mov	r1, r26
    3756:	aa 1b       	sub	r26, r26
    3758:	bb 1b       	sub	r27, r27
    375a:	fd 01       	movw	r30, r26
    375c:	0d c0       	rjmp	.+26     	; 0x3778 <__udivmodsi4_ep>

0000375e <__udivmodsi4_loop>:
    375e:	aa 1f       	adc	r26, r26
    3760:	bb 1f       	adc	r27, r27
    3762:	ee 1f       	adc	r30, r30
    3764:	ff 1f       	adc	r31, r31
    3766:	a2 17       	cp	r26, r18
    3768:	b3 07       	cpc	r27, r19
    376a:	e4 07       	cpc	r30, r20
    376c:	f5 07       	cpc	r31, r21
    376e:	20 f0       	brcs	.+8      	; 0x3778 <__udivmodsi4_ep>
    3770:	a2 1b       	sub	r26, r18
    3772:	b3 0b       	sbc	r27, r19
    3774:	e4 0b       	sbc	r30, r20
    3776:	f5 0b       	sbc	r31, r21

00003778 <__udivmodsi4_ep>:
    3778:	66 1f       	adc	r22, r22
    377a:	77 1f       	adc	r23, r23
    377c:	88 1f       	adc	r24, r24
    377e:	99 1f       	adc	r25, r25
    3780:	1a 94       	dec	r1
    3782:	69 f7       	brne	.-38     	; 0x375e <__udivmodsi4_loop>
    3784:	60 95       	com	r22
    3786:	70 95       	com	r23
    3788:	80 95       	com	r24
    378a:	90 95       	com	r25
    378c:	9b 01       	movw	r18, r22
    378e:	ac 01       	movw	r20, r24
    3790:	bd 01       	movw	r22, r26
    3792:	cf 01       	movw	r24, r30
    3794:	08 95       	ret

00003796 <__divmodsi4>:
    3796:	05 2e       	mov	r0, r21
    3798:	97 fb       	bst	r25, 7
    379a:	16 f4       	brtc	.+4      	; 0x37a0 <__divmodsi4+0xa>
    379c:	00 94       	com	r0
    379e:	0f d0       	rcall	.+30     	; 0x37be <__negsi2>
    37a0:	57 fd       	sbrc	r21, 7
    37a2:	05 d0       	rcall	.+10     	; 0x37ae <__divmodsi4_neg2>
    37a4:	d6 df       	rcall	.-84     	; 0x3752 <__udivmodsi4>
    37a6:	07 fc       	sbrc	r0, 7
    37a8:	02 d0       	rcall	.+4      	; 0x37ae <__divmodsi4_neg2>
    37aa:	46 f4       	brtc	.+16     	; 0x37bc <__divmodsi4_exit>
    37ac:	08 c0       	rjmp	.+16     	; 0x37be <__negsi2>

000037ae <__divmodsi4_neg2>:
    37ae:	50 95       	com	r21
    37b0:	40 95       	com	r20
    37b2:	30 95       	com	r19
    37b4:	21 95       	neg	r18
    37b6:	3f 4f       	sbci	r19, 0xFF	; 255
    37b8:	4f 4f       	sbci	r20, 0xFF	; 255
    37ba:	5f 4f       	sbci	r21, 0xFF	; 255

000037bc <__divmodsi4_exit>:
    37bc:	08 95       	ret

000037be <__negsi2>:
    37be:	90 95       	com	r25
    37c0:	80 95       	com	r24
    37c2:	70 95       	com	r23
    37c4:	61 95       	neg	r22
    37c6:	7f 4f       	sbci	r23, 0xFF	; 255
    37c8:	8f 4f       	sbci	r24, 0xFF	; 255
    37ca:	9f 4f       	sbci	r25, 0xFF	; 255
    37cc:	08 95       	ret

000037ce <__tablejump2__>:
    37ce:	ee 0f       	add	r30, r30
    37d0:	ff 1f       	adc	r31, r31
    37d2:	00 24       	eor	r0, r0
    37d4:	00 1c       	adc	r0, r0
    37d6:	0b be       	out	0x3b, r0	; 59
    37d8:	07 90       	elpm	r0, Z+
    37da:	f6 91       	elpm	r31, Z
    37dc:	e0 2d       	mov	r30, r0
    37de:	09 94       	ijmp

000037e0 <__umulhisi3>:
    37e0:	a2 9f       	mul	r26, r18
    37e2:	b0 01       	movw	r22, r0
    37e4:	b3 9f       	mul	r27, r19
    37e6:	c0 01       	movw	r24, r0
    37e8:	a3 9f       	mul	r26, r19
    37ea:	70 0d       	add	r23, r0
    37ec:	81 1d       	adc	r24, r1
    37ee:	11 24       	eor	r1, r1
    37f0:	91 1d       	adc	r25, r1
    37f2:	b2 9f       	mul	r27, r18
    37f4:	70 0d       	add	r23, r0
    37f6:	81 1d       	adc	r24, r1
    37f8:	11 24       	eor	r1, r1
    37fa:	91 1d       	adc	r25, r1
    37fc:	08 95       	ret

000037fe <__usmulhisi3>:
    37fe:	f0 df       	rcall	.-32     	; 0x37e0 <__umulhisi3>

00003800 <__usmulhisi3_tail>:
    3800:	b7 ff       	sbrs	r27, 7
    3802:	08 95       	ret
    3804:	82 1b       	sub	r24, r18
    3806:	93 0b       	sbc	r25, r19
    3808:	08 95       	ret

0000380a <__muluhisi3>:
    380a:	ea df       	rcall	.-44     	; 0x37e0 <__umulhisi3>
    380c:	a5 9f       	mul	r26, r21
    380e:	90 0d       	add	r25, r0
    3810:	b4 9f       	mul	r27, r20
    3812:	90 0d       	add	r25, r0
    3814:	a4 9f       	mul	r26, r20
    3816:	80 0d       	add	r24, r0
    3818:	91 1d       	adc	r25, r1
    381a:	11 24       	eor	r1, r1
    381c:	08 95       	ret

0000381e <fdevopen>:
    381e:	0f 93       	push	r16
    3820:	1f 93       	push	r17
    3822:	cf 93       	push	r28
    3824:	df 93       	push	r29
    3826:	00 97       	sbiw	r24, 0x00	; 0
    3828:	31 f4       	brne	.+12     	; 0x3836 <fdevopen+0x18>
    382a:	61 15       	cp	r22, r1
    382c:	71 05       	cpc	r23, r1
    382e:	19 f4       	brne	.+6      	; 0x3836 <fdevopen+0x18>
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	39 c0       	rjmp	.+114    	; 0x38a8 <fdevopen+0x8a>
    3836:	8b 01       	movw	r16, r22
    3838:	ec 01       	movw	r28, r24
    383a:	6e e0       	ldi	r22, 0x0E	; 14
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	47 d2       	rcall	.+1166   	; 0x3cd2 <calloc>
    3844:	fc 01       	movw	r30, r24
    3846:	89 2b       	or	r24, r25
    3848:	99 f3       	breq	.-26     	; 0x3830 <fdevopen+0x12>
    384a:	80 e8       	ldi	r24, 0x80	; 128
    384c:	83 83       	std	Z+3, r24	; 0x03
    384e:	01 15       	cp	r16, r1
    3850:	11 05       	cpc	r17, r1
    3852:	71 f0       	breq	.+28     	; 0x3870 <fdevopen+0x52>
    3854:	13 87       	std	Z+11, r17	; 0x0b
    3856:	02 87       	std	Z+10, r16	; 0x0a
    3858:	81 e8       	ldi	r24, 0x81	; 129
    385a:	83 83       	std	Z+3, r24	; 0x03
    385c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <__iob>
    3860:	90 91 c4 09 	lds	r25, 0x09C4	; 0x8009c4 <__iob+0x1>
    3864:	89 2b       	or	r24, r25
    3866:	21 f4       	brne	.+8      	; 0x3870 <fdevopen+0x52>
    3868:	f0 93 c4 09 	sts	0x09C4, r31	; 0x8009c4 <__iob+0x1>
    386c:	e0 93 c3 09 	sts	0x09C3, r30	; 0x8009c3 <__iob>
    3870:	20 97       	sbiw	r28, 0x00	; 0
    3872:	c9 f0       	breq	.+50     	; 0x38a6 <fdevopen+0x88>
    3874:	d1 87       	std	Z+9, r29	; 0x09
    3876:	c0 87       	std	Z+8, r28	; 0x08
    3878:	83 81       	ldd	r24, Z+3	; 0x03
    387a:	82 60       	ori	r24, 0x02	; 2
    387c:	83 83       	std	Z+3, r24	; 0x03
    387e:	80 91 c5 09 	lds	r24, 0x09C5	; 0x8009c5 <__iob+0x2>
    3882:	90 91 c6 09 	lds	r25, 0x09C6	; 0x8009c6 <__iob+0x3>
    3886:	89 2b       	or	r24, r25
    3888:	71 f4       	brne	.+28     	; 0x38a6 <fdevopen+0x88>
    388a:	f0 93 c6 09 	sts	0x09C6, r31	; 0x8009c6 <__iob+0x3>
    388e:	e0 93 c5 09 	sts	0x09C5, r30	; 0x8009c5 <__iob+0x2>
    3892:	80 91 c7 09 	lds	r24, 0x09C7	; 0x8009c7 <__iob+0x4>
    3896:	90 91 c8 09 	lds	r25, 0x09C8	; 0x8009c8 <__iob+0x5>
    389a:	89 2b       	or	r24, r25
    389c:	21 f4       	brne	.+8      	; 0x38a6 <fdevopen+0x88>
    389e:	f0 93 c8 09 	sts	0x09C8, r31	; 0x8009c8 <__iob+0x5>
    38a2:	e0 93 c7 09 	sts	0x09C7, r30	; 0x8009c7 <__iob+0x4>
    38a6:	cf 01       	movw	r24, r30
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	08 95       	ret

000038b2 <printf>:
    38b2:	cf 93       	push	r28
    38b4:	df 93       	push	r29
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
    38ba:	ae 01       	movw	r20, r28
    38bc:	4b 5f       	subi	r20, 0xFB	; 251
    38be:	5f 4f       	sbci	r21, 0xFF	; 255
    38c0:	fa 01       	movw	r30, r20
    38c2:	61 91       	ld	r22, Z+
    38c4:	71 91       	ld	r23, Z+
    38c6:	af 01       	movw	r20, r30
    38c8:	80 91 c5 09 	lds	r24, 0x09C5	; 0x8009c5 <__iob+0x2>
    38cc:	90 91 c6 09 	lds	r25, 0x09C6	; 0x8009c6 <__iob+0x3>
    38d0:	03 d0       	rcall	.+6      	; 0x38d8 <vfprintf>
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	08 95       	ret

000038d8 <vfprintf>:
    38d8:	2f 92       	push	r2
    38da:	3f 92       	push	r3
    38dc:	4f 92       	push	r4
    38de:	5f 92       	push	r5
    38e0:	6f 92       	push	r6
    38e2:	7f 92       	push	r7
    38e4:	8f 92       	push	r8
    38e6:	9f 92       	push	r9
    38e8:	af 92       	push	r10
    38ea:	bf 92       	push	r11
    38ec:	cf 92       	push	r12
    38ee:	df 92       	push	r13
    38f0:	ef 92       	push	r14
    38f2:	ff 92       	push	r15
    38f4:	0f 93       	push	r16
    38f6:	1f 93       	push	r17
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	2b 97       	sbiw	r28, 0x0b	; 11
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	6c 01       	movw	r12, r24
    390e:	7b 01       	movw	r14, r22
    3910:	8a 01       	movw	r16, r20
    3912:	fc 01       	movw	r30, r24
    3914:	17 82       	std	Z+7, r1	; 0x07
    3916:	16 82       	std	Z+6, r1	; 0x06
    3918:	83 81       	ldd	r24, Z+3	; 0x03
    391a:	81 ff       	sbrs	r24, 1
    391c:	bf c1       	rjmp	.+894    	; 0x3c9c <vfprintf+0x3c4>
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	3c 01       	movw	r6, r24
    3924:	f6 01       	movw	r30, r12
    3926:	93 81       	ldd	r25, Z+3	; 0x03
    3928:	f7 01       	movw	r30, r14
    392a:	93 fd       	sbrc	r25, 3
    392c:	85 91       	lpm	r24, Z+
    392e:	93 ff       	sbrs	r25, 3
    3930:	81 91       	ld	r24, Z+
    3932:	7f 01       	movw	r14, r30
    3934:	88 23       	and	r24, r24
    3936:	09 f4       	brne	.+2      	; 0x393a <vfprintf+0x62>
    3938:	ad c1       	rjmp	.+858    	; 0x3c94 <vfprintf+0x3bc>
    393a:	85 32       	cpi	r24, 0x25	; 37
    393c:	39 f4       	brne	.+14     	; 0x394c <vfprintf+0x74>
    393e:	93 fd       	sbrc	r25, 3
    3940:	85 91       	lpm	r24, Z+
    3942:	93 ff       	sbrs	r25, 3
    3944:	81 91       	ld	r24, Z+
    3946:	7f 01       	movw	r14, r30
    3948:	85 32       	cpi	r24, 0x25	; 37
    394a:	21 f4       	brne	.+8      	; 0x3954 <vfprintf+0x7c>
    394c:	b6 01       	movw	r22, r12
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	18 d3       	rcall	.+1584   	; 0x3f82 <fputc>
    3952:	e8 cf       	rjmp	.-48     	; 0x3924 <vfprintf+0x4c>
    3954:	91 2c       	mov	r9, r1
    3956:	21 2c       	mov	r2, r1
    3958:	31 2c       	mov	r3, r1
    395a:	ff e1       	ldi	r31, 0x1F	; 31
    395c:	f3 15       	cp	r31, r3
    395e:	d8 f0       	brcs	.+54     	; 0x3996 <vfprintf+0xbe>
    3960:	8b 32       	cpi	r24, 0x2B	; 43
    3962:	79 f0       	breq	.+30     	; 0x3982 <vfprintf+0xaa>
    3964:	38 f4       	brcc	.+14     	; 0x3974 <vfprintf+0x9c>
    3966:	80 32       	cpi	r24, 0x20	; 32
    3968:	79 f0       	breq	.+30     	; 0x3988 <vfprintf+0xb0>
    396a:	83 32       	cpi	r24, 0x23	; 35
    396c:	a1 f4       	brne	.+40     	; 0x3996 <vfprintf+0xbe>
    396e:	23 2d       	mov	r18, r3
    3970:	20 61       	ori	r18, 0x10	; 16
    3972:	1d c0       	rjmp	.+58     	; 0x39ae <vfprintf+0xd6>
    3974:	8d 32       	cpi	r24, 0x2D	; 45
    3976:	61 f0       	breq	.+24     	; 0x3990 <vfprintf+0xb8>
    3978:	80 33       	cpi	r24, 0x30	; 48
    397a:	69 f4       	brne	.+26     	; 0x3996 <vfprintf+0xbe>
    397c:	23 2d       	mov	r18, r3
    397e:	21 60       	ori	r18, 0x01	; 1
    3980:	16 c0       	rjmp	.+44     	; 0x39ae <vfprintf+0xd6>
    3982:	83 2d       	mov	r24, r3
    3984:	82 60       	ori	r24, 0x02	; 2
    3986:	38 2e       	mov	r3, r24
    3988:	e3 2d       	mov	r30, r3
    398a:	e4 60       	ori	r30, 0x04	; 4
    398c:	3e 2e       	mov	r3, r30
    398e:	2a c0       	rjmp	.+84     	; 0x39e4 <vfprintf+0x10c>
    3990:	f3 2d       	mov	r31, r3
    3992:	f8 60       	ori	r31, 0x08	; 8
    3994:	1d c0       	rjmp	.+58     	; 0x39d0 <vfprintf+0xf8>
    3996:	37 fc       	sbrc	r3, 7
    3998:	2d c0       	rjmp	.+90     	; 0x39f4 <vfprintf+0x11c>
    399a:	20 ed       	ldi	r18, 0xD0	; 208
    399c:	28 0f       	add	r18, r24
    399e:	2a 30       	cpi	r18, 0x0A	; 10
    39a0:	40 f0       	brcs	.+16     	; 0x39b2 <vfprintf+0xda>
    39a2:	8e 32       	cpi	r24, 0x2E	; 46
    39a4:	b9 f4       	brne	.+46     	; 0x39d4 <vfprintf+0xfc>
    39a6:	36 fc       	sbrc	r3, 6
    39a8:	75 c1       	rjmp	.+746    	; 0x3c94 <vfprintf+0x3bc>
    39aa:	23 2d       	mov	r18, r3
    39ac:	20 64       	ori	r18, 0x40	; 64
    39ae:	32 2e       	mov	r3, r18
    39b0:	19 c0       	rjmp	.+50     	; 0x39e4 <vfprintf+0x10c>
    39b2:	36 fe       	sbrs	r3, 6
    39b4:	06 c0       	rjmp	.+12     	; 0x39c2 <vfprintf+0xea>
    39b6:	8a e0       	ldi	r24, 0x0A	; 10
    39b8:	98 9e       	mul	r9, r24
    39ba:	20 0d       	add	r18, r0
    39bc:	11 24       	eor	r1, r1
    39be:	92 2e       	mov	r9, r18
    39c0:	11 c0       	rjmp	.+34     	; 0x39e4 <vfprintf+0x10c>
    39c2:	ea e0       	ldi	r30, 0x0A	; 10
    39c4:	2e 9e       	mul	r2, r30
    39c6:	20 0d       	add	r18, r0
    39c8:	11 24       	eor	r1, r1
    39ca:	22 2e       	mov	r2, r18
    39cc:	f3 2d       	mov	r31, r3
    39ce:	f0 62       	ori	r31, 0x20	; 32
    39d0:	3f 2e       	mov	r3, r31
    39d2:	08 c0       	rjmp	.+16     	; 0x39e4 <vfprintf+0x10c>
    39d4:	8c 36       	cpi	r24, 0x6C	; 108
    39d6:	21 f4       	brne	.+8      	; 0x39e0 <vfprintf+0x108>
    39d8:	83 2d       	mov	r24, r3
    39da:	80 68       	ori	r24, 0x80	; 128
    39dc:	38 2e       	mov	r3, r24
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <vfprintf+0x10c>
    39e0:	88 36       	cpi	r24, 0x68	; 104
    39e2:	41 f4       	brne	.+16     	; 0x39f4 <vfprintf+0x11c>
    39e4:	f7 01       	movw	r30, r14
    39e6:	93 fd       	sbrc	r25, 3
    39e8:	85 91       	lpm	r24, Z+
    39ea:	93 ff       	sbrs	r25, 3
    39ec:	81 91       	ld	r24, Z+
    39ee:	7f 01       	movw	r14, r30
    39f0:	81 11       	cpse	r24, r1
    39f2:	b3 cf       	rjmp	.-154    	; 0x395a <vfprintf+0x82>
    39f4:	98 2f       	mov	r25, r24
    39f6:	9f 7d       	andi	r25, 0xDF	; 223
    39f8:	95 54       	subi	r25, 0x45	; 69
    39fa:	93 30       	cpi	r25, 0x03	; 3
    39fc:	28 f4       	brcc	.+10     	; 0x3a08 <vfprintf+0x130>
    39fe:	0c 5f       	subi	r16, 0xFC	; 252
    3a00:	1f 4f       	sbci	r17, 0xFF	; 255
    3a02:	9f e3       	ldi	r25, 0x3F	; 63
    3a04:	99 83       	std	Y+1, r25	; 0x01
    3a06:	0d c0       	rjmp	.+26     	; 0x3a22 <vfprintf+0x14a>
    3a08:	83 36       	cpi	r24, 0x63	; 99
    3a0a:	31 f0       	breq	.+12     	; 0x3a18 <vfprintf+0x140>
    3a0c:	83 37       	cpi	r24, 0x73	; 115
    3a0e:	71 f0       	breq	.+28     	; 0x3a2c <vfprintf+0x154>
    3a10:	83 35       	cpi	r24, 0x53	; 83
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <vfprintf+0x13e>
    3a14:	55 c0       	rjmp	.+170    	; 0x3ac0 <vfprintf+0x1e8>
    3a16:	20 c0       	rjmp	.+64     	; 0x3a58 <vfprintf+0x180>
    3a18:	f8 01       	movw	r30, r16
    3a1a:	80 81       	ld	r24, Z
    3a1c:	89 83       	std	Y+1, r24	; 0x01
    3a1e:	0e 5f       	subi	r16, 0xFE	; 254
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	88 24       	eor	r8, r8
    3a24:	83 94       	inc	r8
    3a26:	91 2c       	mov	r9, r1
    3a28:	53 01       	movw	r10, r6
    3a2a:	12 c0       	rjmp	.+36     	; 0x3a50 <vfprintf+0x178>
    3a2c:	28 01       	movw	r4, r16
    3a2e:	f2 e0       	ldi	r31, 0x02	; 2
    3a30:	4f 0e       	add	r4, r31
    3a32:	51 1c       	adc	r5, r1
    3a34:	f8 01       	movw	r30, r16
    3a36:	a0 80       	ld	r10, Z
    3a38:	b1 80       	ldd	r11, Z+1	; 0x01
    3a3a:	36 fe       	sbrs	r3, 6
    3a3c:	03 c0       	rjmp	.+6      	; 0x3a44 <vfprintf+0x16c>
    3a3e:	69 2d       	mov	r22, r9
    3a40:	70 e0       	ldi	r23, 0x00	; 0
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <vfprintf+0x170>
    3a44:	6f ef       	ldi	r22, 0xFF	; 255
    3a46:	7f ef       	ldi	r23, 0xFF	; 255
    3a48:	c5 01       	movw	r24, r10
    3a4a:	90 d2       	rcall	.+1312   	; 0x3f6c <strnlen>
    3a4c:	4c 01       	movw	r8, r24
    3a4e:	82 01       	movw	r16, r4
    3a50:	f3 2d       	mov	r31, r3
    3a52:	ff 77       	andi	r31, 0x7F	; 127
    3a54:	3f 2e       	mov	r3, r31
    3a56:	15 c0       	rjmp	.+42     	; 0x3a82 <vfprintf+0x1aa>
    3a58:	28 01       	movw	r4, r16
    3a5a:	22 e0       	ldi	r18, 0x02	; 2
    3a5c:	42 0e       	add	r4, r18
    3a5e:	51 1c       	adc	r5, r1
    3a60:	f8 01       	movw	r30, r16
    3a62:	a0 80       	ld	r10, Z
    3a64:	b1 80       	ldd	r11, Z+1	; 0x01
    3a66:	36 fe       	sbrs	r3, 6
    3a68:	03 c0       	rjmp	.+6      	; 0x3a70 <vfprintf+0x198>
    3a6a:	69 2d       	mov	r22, r9
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	02 c0       	rjmp	.+4      	; 0x3a74 <vfprintf+0x19c>
    3a70:	6f ef       	ldi	r22, 0xFF	; 255
    3a72:	7f ef       	ldi	r23, 0xFF	; 255
    3a74:	c5 01       	movw	r24, r10
    3a76:	68 d2       	rcall	.+1232   	; 0x3f48 <strnlen_P>
    3a78:	4c 01       	movw	r8, r24
    3a7a:	f3 2d       	mov	r31, r3
    3a7c:	f0 68       	ori	r31, 0x80	; 128
    3a7e:	3f 2e       	mov	r3, r31
    3a80:	82 01       	movw	r16, r4
    3a82:	33 fc       	sbrc	r3, 3
    3a84:	19 c0       	rjmp	.+50     	; 0x3ab8 <vfprintf+0x1e0>
    3a86:	82 2d       	mov	r24, r2
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	88 16       	cp	r8, r24
    3a8c:	99 06       	cpc	r9, r25
    3a8e:	a0 f4       	brcc	.+40     	; 0x3ab8 <vfprintf+0x1e0>
    3a90:	b6 01       	movw	r22, r12
    3a92:	80 e2       	ldi	r24, 0x20	; 32
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	75 d2       	rcall	.+1258   	; 0x3f82 <fputc>
    3a98:	2a 94       	dec	r2
    3a9a:	f5 cf       	rjmp	.-22     	; 0x3a86 <vfprintf+0x1ae>
    3a9c:	f5 01       	movw	r30, r10
    3a9e:	37 fc       	sbrc	r3, 7
    3aa0:	85 91       	lpm	r24, Z+
    3aa2:	37 fe       	sbrs	r3, 7
    3aa4:	81 91       	ld	r24, Z+
    3aa6:	5f 01       	movw	r10, r30
    3aa8:	b6 01       	movw	r22, r12
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	6a d2       	rcall	.+1236   	; 0x3f82 <fputc>
    3aae:	21 10       	cpse	r2, r1
    3ab0:	2a 94       	dec	r2
    3ab2:	21 e0       	ldi	r18, 0x01	; 1
    3ab4:	82 1a       	sub	r8, r18
    3ab6:	91 08       	sbc	r9, r1
    3ab8:	81 14       	cp	r8, r1
    3aba:	91 04       	cpc	r9, r1
    3abc:	79 f7       	brne	.-34     	; 0x3a9c <vfprintf+0x1c4>
    3abe:	e1 c0       	rjmp	.+450    	; 0x3c82 <vfprintf+0x3aa>
    3ac0:	84 36       	cpi	r24, 0x64	; 100
    3ac2:	11 f0       	breq	.+4      	; 0x3ac8 <vfprintf+0x1f0>
    3ac4:	89 36       	cpi	r24, 0x69	; 105
    3ac6:	39 f5       	brne	.+78     	; 0x3b16 <vfprintf+0x23e>
    3ac8:	f8 01       	movw	r30, r16
    3aca:	37 fe       	sbrs	r3, 7
    3acc:	07 c0       	rjmp	.+14     	; 0x3adc <vfprintf+0x204>
    3ace:	60 81       	ld	r22, Z
    3ad0:	71 81       	ldd	r23, Z+1	; 0x01
    3ad2:	82 81       	ldd	r24, Z+2	; 0x02
    3ad4:	93 81       	ldd	r25, Z+3	; 0x03
    3ad6:	0c 5f       	subi	r16, 0xFC	; 252
    3ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ada:	08 c0       	rjmp	.+16     	; 0x3aec <vfprintf+0x214>
    3adc:	60 81       	ld	r22, Z
    3ade:	71 81       	ldd	r23, Z+1	; 0x01
    3ae0:	07 2e       	mov	r0, r23
    3ae2:	00 0c       	add	r0, r0
    3ae4:	88 0b       	sbc	r24, r24
    3ae6:	99 0b       	sbc	r25, r25
    3ae8:	0e 5f       	subi	r16, 0xFE	; 254
    3aea:	1f 4f       	sbci	r17, 0xFF	; 255
    3aec:	f3 2d       	mov	r31, r3
    3aee:	ff 76       	andi	r31, 0x6F	; 111
    3af0:	3f 2e       	mov	r3, r31
    3af2:	97 ff       	sbrs	r25, 7
    3af4:	09 c0       	rjmp	.+18     	; 0x3b08 <vfprintf+0x230>
    3af6:	90 95       	com	r25
    3af8:	80 95       	com	r24
    3afa:	70 95       	com	r23
    3afc:	61 95       	neg	r22
    3afe:	7f 4f       	sbci	r23, 0xFF	; 255
    3b00:	8f 4f       	sbci	r24, 0xFF	; 255
    3b02:	9f 4f       	sbci	r25, 0xFF	; 255
    3b04:	f0 68       	ori	r31, 0x80	; 128
    3b06:	3f 2e       	mov	r3, r31
    3b08:	2a e0       	ldi	r18, 0x0A	; 10
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	a3 01       	movw	r20, r6
    3b0e:	75 d2       	rcall	.+1258   	; 0x3ffa <__ultoa_invert>
    3b10:	88 2e       	mov	r8, r24
    3b12:	86 18       	sub	r8, r6
    3b14:	44 c0       	rjmp	.+136    	; 0x3b9e <vfprintf+0x2c6>
    3b16:	85 37       	cpi	r24, 0x75	; 117
    3b18:	31 f4       	brne	.+12     	; 0x3b26 <vfprintf+0x24e>
    3b1a:	23 2d       	mov	r18, r3
    3b1c:	2f 7e       	andi	r18, 0xEF	; 239
    3b1e:	b2 2e       	mov	r11, r18
    3b20:	2a e0       	ldi	r18, 0x0A	; 10
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	25 c0       	rjmp	.+74     	; 0x3b70 <vfprintf+0x298>
    3b26:	93 2d       	mov	r25, r3
    3b28:	99 7f       	andi	r25, 0xF9	; 249
    3b2a:	b9 2e       	mov	r11, r25
    3b2c:	8f 36       	cpi	r24, 0x6F	; 111
    3b2e:	c1 f0       	breq	.+48     	; 0x3b60 <vfprintf+0x288>
    3b30:	18 f4       	brcc	.+6      	; 0x3b38 <vfprintf+0x260>
    3b32:	88 35       	cpi	r24, 0x58	; 88
    3b34:	79 f0       	breq	.+30     	; 0x3b54 <vfprintf+0x27c>
    3b36:	ae c0       	rjmp	.+348    	; 0x3c94 <vfprintf+0x3bc>
    3b38:	80 37       	cpi	r24, 0x70	; 112
    3b3a:	19 f0       	breq	.+6      	; 0x3b42 <vfprintf+0x26a>
    3b3c:	88 37       	cpi	r24, 0x78	; 120
    3b3e:	21 f0       	breq	.+8      	; 0x3b48 <vfprintf+0x270>
    3b40:	a9 c0       	rjmp	.+338    	; 0x3c94 <vfprintf+0x3bc>
    3b42:	e9 2f       	mov	r30, r25
    3b44:	e0 61       	ori	r30, 0x10	; 16
    3b46:	be 2e       	mov	r11, r30
    3b48:	b4 fe       	sbrs	r11, 4
    3b4a:	0d c0       	rjmp	.+26     	; 0x3b66 <vfprintf+0x28e>
    3b4c:	fb 2d       	mov	r31, r11
    3b4e:	f4 60       	ori	r31, 0x04	; 4
    3b50:	bf 2e       	mov	r11, r31
    3b52:	09 c0       	rjmp	.+18     	; 0x3b66 <vfprintf+0x28e>
    3b54:	34 fe       	sbrs	r3, 4
    3b56:	0a c0       	rjmp	.+20     	; 0x3b6c <vfprintf+0x294>
    3b58:	29 2f       	mov	r18, r25
    3b5a:	26 60       	ori	r18, 0x06	; 6
    3b5c:	b2 2e       	mov	r11, r18
    3b5e:	06 c0       	rjmp	.+12     	; 0x3b6c <vfprintf+0x294>
    3b60:	28 e0       	ldi	r18, 0x08	; 8
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	05 c0       	rjmp	.+10     	; 0x3b70 <vfprintf+0x298>
    3b66:	20 e1       	ldi	r18, 0x10	; 16
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	02 c0       	rjmp	.+4      	; 0x3b70 <vfprintf+0x298>
    3b6c:	20 e1       	ldi	r18, 0x10	; 16
    3b6e:	32 e0       	ldi	r19, 0x02	; 2
    3b70:	f8 01       	movw	r30, r16
    3b72:	b7 fe       	sbrs	r11, 7
    3b74:	07 c0       	rjmp	.+14     	; 0x3b84 <vfprintf+0x2ac>
    3b76:	60 81       	ld	r22, Z
    3b78:	71 81       	ldd	r23, Z+1	; 0x01
    3b7a:	82 81       	ldd	r24, Z+2	; 0x02
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	0c 5f       	subi	r16, 0xFC	; 252
    3b80:	1f 4f       	sbci	r17, 0xFF	; 255
    3b82:	06 c0       	rjmp	.+12     	; 0x3b90 <vfprintf+0x2b8>
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	0e 5f       	subi	r16, 0xFE	; 254
    3b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b90:	a3 01       	movw	r20, r6
    3b92:	33 d2       	rcall	.+1126   	; 0x3ffa <__ultoa_invert>
    3b94:	88 2e       	mov	r8, r24
    3b96:	86 18       	sub	r8, r6
    3b98:	fb 2d       	mov	r31, r11
    3b9a:	ff 77       	andi	r31, 0x7F	; 127
    3b9c:	3f 2e       	mov	r3, r31
    3b9e:	36 fe       	sbrs	r3, 6
    3ba0:	0d c0       	rjmp	.+26     	; 0x3bbc <vfprintf+0x2e4>
    3ba2:	23 2d       	mov	r18, r3
    3ba4:	2e 7f       	andi	r18, 0xFE	; 254
    3ba6:	a2 2e       	mov	r10, r18
    3ba8:	89 14       	cp	r8, r9
    3baa:	58 f4       	brcc	.+22     	; 0x3bc2 <vfprintf+0x2ea>
    3bac:	34 fe       	sbrs	r3, 4
    3bae:	0b c0       	rjmp	.+22     	; 0x3bc6 <vfprintf+0x2ee>
    3bb0:	32 fc       	sbrc	r3, 2
    3bb2:	09 c0       	rjmp	.+18     	; 0x3bc6 <vfprintf+0x2ee>
    3bb4:	83 2d       	mov	r24, r3
    3bb6:	8e 7e       	andi	r24, 0xEE	; 238
    3bb8:	a8 2e       	mov	r10, r24
    3bba:	05 c0       	rjmp	.+10     	; 0x3bc6 <vfprintf+0x2ee>
    3bbc:	b8 2c       	mov	r11, r8
    3bbe:	a3 2c       	mov	r10, r3
    3bc0:	03 c0       	rjmp	.+6      	; 0x3bc8 <vfprintf+0x2f0>
    3bc2:	b8 2c       	mov	r11, r8
    3bc4:	01 c0       	rjmp	.+2      	; 0x3bc8 <vfprintf+0x2f0>
    3bc6:	b9 2c       	mov	r11, r9
    3bc8:	a4 fe       	sbrs	r10, 4
    3bca:	0f c0       	rjmp	.+30     	; 0x3bea <vfprintf+0x312>
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e8 0d       	add	r30, r8
    3bd0:	f1 1d       	adc	r31, r1
    3bd2:	80 81       	ld	r24, Z
    3bd4:	80 33       	cpi	r24, 0x30	; 48
    3bd6:	21 f4       	brne	.+8      	; 0x3be0 <vfprintf+0x308>
    3bd8:	9a 2d       	mov	r25, r10
    3bda:	99 7e       	andi	r25, 0xE9	; 233
    3bdc:	a9 2e       	mov	r10, r25
    3bde:	09 c0       	rjmp	.+18     	; 0x3bf2 <vfprintf+0x31a>
    3be0:	a2 fe       	sbrs	r10, 2
    3be2:	06 c0       	rjmp	.+12     	; 0x3bf0 <vfprintf+0x318>
    3be4:	b3 94       	inc	r11
    3be6:	b3 94       	inc	r11
    3be8:	04 c0       	rjmp	.+8      	; 0x3bf2 <vfprintf+0x31a>
    3bea:	8a 2d       	mov	r24, r10
    3bec:	86 78       	andi	r24, 0x86	; 134
    3bee:	09 f0       	breq	.+2      	; 0x3bf2 <vfprintf+0x31a>
    3bf0:	b3 94       	inc	r11
    3bf2:	a3 fc       	sbrc	r10, 3
    3bf4:	10 c0       	rjmp	.+32     	; 0x3c16 <vfprintf+0x33e>
    3bf6:	a0 fe       	sbrs	r10, 0
    3bf8:	06 c0       	rjmp	.+12     	; 0x3c06 <vfprintf+0x32e>
    3bfa:	b2 14       	cp	r11, r2
    3bfc:	80 f4       	brcc	.+32     	; 0x3c1e <vfprintf+0x346>
    3bfe:	28 0c       	add	r2, r8
    3c00:	92 2c       	mov	r9, r2
    3c02:	9b 18       	sub	r9, r11
    3c04:	0d c0       	rjmp	.+26     	; 0x3c20 <vfprintf+0x348>
    3c06:	b2 14       	cp	r11, r2
    3c08:	58 f4       	brcc	.+22     	; 0x3c20 <vfprintf+0x348>
    3c0a:	b6 01       	movw	r22, r12
    3c0c:	80 e2       	ldi	r24, 0x20	; 32
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	b8 d1       	rcall	.+880    	; 0x3f82 <fputc>
    3c12:	b3 94       	inc	r11
    3c14:	f8 cf       	rjmp	.-16     	; 0x3c06 <vfprintf+0x32e>
    3c16:	b2 14       	cp	r11, r2
    3c18:	18 f4       	brcc	.+6      	; 0x3c20 <vfprintf+0x348>
    3c1a:	2b 18       	sub	r2, r11
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <vfprintf+0x34a>
    3c1e:	98 2c       	mov	r9, r8
    3c20:	21 2c       	mov	r2, r1
    3c22:	a4 fe       	sbrs	r10, 4
    3c24:	0f c0       	rjmp	.+30     	; 0x3c44 <vfprintf+0x36c>
    3c26:	b6 01       	movw	r22, r12
    3c28:	80 e3       	ldi	r24, 0x30	; 48
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	aa d1       	rcall	.+852    	; 0x3f82 <fputc>
    3c2e:	a2 fe       	sbrs	r10, 2
    3c30:	16 c0       	rjmp	.+44     	; 0x3c5e <vfprintf+0x386>
    3c32:	a1 fc       	sbrc	r10, 1
    3c34:	03 c0       	rjmp	.+6      	; 0x3c3c <vfprintf+0x364>
    3c36:	88 e7       	ldi	r24, 0x78	; 120
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <vfprintf+0x368>
    3c3c:	88 e5       	ldi	r24, 0x58	; 88
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	b6 01       	movw	r22, r12
    3c42:	0c c0       	rjmp	.+24     	; 0x3c5c <vfprintf+0x384>
    3c44:	8a 2d       	mov	r24, r10
    3c46:	86 78       	andi	r24, 0x86	; 134
    3c48:	51 f0       	breq	.+20     	; 0x3c5e <vfprintf+0x386>
    3c4a:	a1 fe       	sbrs	r10, 1
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <vfprintf+0x37a>
    3c4e:	8b e2       	ldi	r24, 0x2B	; 43
    3c50:	01 c0       	rjmp	.+2      	; 0x3c54 <vfprintf+0x37c>
    3c52:	80 e2       	ldi	r24, 0x20	; 32
    3c54:	a7 fc       	sbrc	r10, 7
    3c56:	8d e2       	ldi	r24, 0x2D	; 45
    3c58:	b6 01       	movw	r22, r12
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	92 d1       	rcall	.+804    	; 0x3f82 <fputc>
    3c5e:	89 14       	cp	r8, r9
    3c60:	30 f4       	brcc	.+12     	; 0x3c6e <vfprintf+0x396>
    3c62:	b6 01       	movw	r22, r12
    3c64:	80 e3       	ldi	r24, 0x30	; 48
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	8c d1       	rcall	.+792    	; 0x3f82 <fputc>
    3c6a:	9a 94       	dec	r9
    3c6c:	f8 cf       	rjmp	.-16     	; 0x3c5e <vfprintf+0x386>
    3c6e:	8a 94       	dec	r8
    3c70:	f3 01       	movw	r30, r6
    3c72:	e8 0d       	add	r30, r8
    3c74:	f1 1d       	adc	r31, r1
    3c76:	80 81       	ld	r24, Z
    3c78:	b6 01       	movw	r22, r12
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	82 d1       	rcall	.+772    	; 0x3f82 <fputc>
    3c7e:	81 10       	cpse	r8, r1
    3c80:	f6 cf       	rjmp	.-20     	; 0x3c6e <vfprintf+0x396>
    3c82:	22 20       	and	r2, r2
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <vfprintf+0x3b0>
    3c86:	4e ce       	rjmp	.-868    	; 0x3924 <vfprintf+0x4c>
    3c88:	b6 01       	movw	r22, r12
    3c8a:	80 e2       	ldi	r24, 0x20	; 32
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	79 d1       	rcall	.+754    	; 0x3f82 <fputc>
    3c90:	2a 94       	dec	r2
    3c92:	f7 cf       	rjmp	.-18     	; 0x3c82 <vfprintf+0x3aa>
    3c94:	f6 01       	movw	r30, r12
    3c96:	86 81       	ldd	r24, Z+6	; 0x06
    3c98:	97 81       	ldd	r25, Z+7	; 0x07
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <vfprintf+0x3c8>
    3c9c:	8f ef       	ldi	r24, 0xFF	; 255
    3c9e:	9f ef       	ldi	r25, 0xFF	; 255
    3ca0:	2b 96       	adiw	r28, 0x0b	; 11
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	f8 94       	cli
    3ca6:	de bf       	out	0x3e, r29	; 62
    3ca8:	0f be       	out	0x3f, r0	; 63
    3caa:	cd bf       	out	0x3d, r28	; 61
    3cac:	df 91       	pop	r29
    3cae:	cf 91       	pop	r28
    3cb0:	1f 91       	pop	r17
    3cb2:	0f 91       	pop	r16
    3cb4:	ff 90       	pop	r15
    3cb6:	ef 90       	pop	r14
    3cb8:	df 90       	pop	r13
    3cba:	cf 90       	pop	r12
    3cbc:	bf 90       	pop	r11
    3cbe:	af 90       	pop	r10
    3cc0:	9f 90       	pop	r9
    3cc2:	8f 90       	pop	r8
    3cc4:	7f 90       	pop	r7
    3cc6:	6f 90       	pop	r6
    3cc8:	5f 90       	pop	r5
    3cca:	4f 90       	pop	r4
    3ccc:	3f 90       	pop	r3
    3cce:	2f 90       	pop	r2
    3cd0:	08 95       	ret

00003cd2 <calloc>:
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	86 9f       	mul	r24, r22
    3cdc:	80 01       	movw	r16, r0
    3cde:	87 9f       	mul	r24, r23
    3ce0:	10 0d       	add	r17, r0
    3ce2:	96 9f       	mul	r25, r22
    3ce4:	10 0d       	add	r17, r0
    3ce6:	11 24       	eor	r1, r1
    3ce8:	c8 01       	movw	r24, r16
    3cea:	0d d0       	rcall	.+26     	; 0x3d06 <malloc>
    3cec:	ec 01       	movw	r28, r24
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	21 f0       	breq	.+8      	; 0x3cfa <calloc+0x28>
    3cf2:	a8 01       	movw	r20, r16
    3cf4:	60 e0       	ldi	r22, 0x00	; 0
    3cf6:	70 e0       	ldi	r23, 0x00	; 0
    3cf8:	32 d1       	rcall	.+612    	; 0x3f5e <memset>
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	08 95       	ret

00003d06 <malloc>:
    3d06:	0f 93       	push	r16
    3d08:	1f 93       	push	r17
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    3d0e:	82 30       	cpi	r24, 0x02	; 2
    3d10:	91 05       	cpc	r25, r1
    3d12:	10 f4       	brcc	.+4      	; 0x3d18 <malloc+0x12>
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	e0 91 cb 09 	lds	r30, 0x09CB	; 0x8009cb <__flp>
    3d1c:	f0 91 cc 09 	lds	r31, 0x09CC	; 0x8009cc <__flp+0x1>
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	a0 e0       	ldi	r26, 0x00	; 0
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	30 97       	sbiw	r30, 0x00	; 0
    3d2a:	19 f1       	breq	.+70     	; 0x3d72 <malloc+0x6c>
    3d2c:	40 81       	ld	r20, Z
    3d2e:	51 81       	ldd	r21, Z+1	; 0x01
    3d30:	02 81       	ldd	r16, Z+2	; 0x02
    3d32:	13 81       	ldd	r17, Z+3	; 0x03
    3d34:	48 17       	cp	r20, r24
    3d36:	59 07       	cpc	r21, r25
    3d38:	c8 f0       	brcs	.+50     	; 0x3d6c <malloc+0x66>
    3d3a:	84 17       	cp	r24, r20
    3d3c:	95 07       	cpc	r25, r21
    3d3e:	69 f4       	brne	.+26     	; 0x3d5a <malloc+0x54>
    3d40:	10 97       	sbiw	r26, 0x00	; 0
    3d42:	31 f0       	breq	.+12     	; 0x3d50 <malloc+0x4a>
    3d44:	12 96       	adiw	r26, 0x02	; 2
    3d46:	0c 93       	st	X, r16
    3d48:	12 97       	sbiw	r26, 0x02	; 2
    3d4a:	13 96       	adiw	r26, 0x03	; 3
    3d4c:	1c 93       	st	X, r17
    3d4e:	27 c0       	rjmp	.+78     	; 0x3d9e <malloc+0x98>
    3d50:	00 93 cb 09 	sts	0x09CB, r16	; 0x8009cb <__flp>
    3d54:	10 93 cc 09 	sts	0x09CC, r17	; 0x8009cc <__flp+0x1>
    3d58:	22 c0       	rjmp	.+68     	; 0x3d9e <malloc+0x98>
    3d5a:	21 15       	cp	r18, r1
    3d5c:	31 05       	cpc	r19, r1
    3d5e:	19 f0       	breq	.+6      	; 0x3d66 <malloc+0x60>
    3d60:	42 17       	cp	r20, r18
    3d62:	53 07       	cpc	r21, r19
    3d64:	18 f4       	brcc	.+6      	; 0x3d6c <malloc+0x66>
    3d66:	9a 01       	movw	r18, r20
    3d68:	bd 01       	movw	r22, r26
    3d6a:	ef 01       	movw	r28, r30
    3d6c:	df 01       	movw	r26, r30
    3d6e:	f8 01       	movw	r30, r16
    3d70:	db cf       	rjmp	.-74     	; 0x3d28 <malloc+0x22>
    3d72:	21 15       	cp	r18, r1
    3d74:	31 05       	cpc	r19, r1
    3d76:	f9 f0       	breq	.+62     	; 0x3db6 <malloc+0xb0>
    3d78:	28 1b       	sub	r18, r24
    3d7a:	39 0b       	sbc	r19, r25
    3d7c:	24 30       	cpi	r18, 0x04	; 4
    3d7e:	31 05       	cpc	r19, r1
    3d80:	80 f4       	brcc	.+32     	; 0x3da2 <malloc+0x9c>
    3d82:	8a 81       	ldd	r24, Y+2	; 0x02
    3d84:	9b 81       	ldd	r25, Y+3	; 0x03
    3d86:	61 15       	cp	r22, r1
    3d88:	71 05       	cpc	r23, r1
    3d8a:	21 f0       	breq	.+8      	; 0x3d94 <malloc+0x8e>
    3d8c:	fb 01       	movw	r30, r22
    3d8e:	93 83       	std	Z+3, r25	; 0x03
    3d90:	82 83       	std	Z+2, r24	; 0x02
    3d92:	04 c0       	rjmp	.+8      	; 0x3d9c <malloc+0x96>
    3d94:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <__flp+0x1>
    3d98:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <__flp>
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	32 96       	adiw	r30, 0x02	; 2
    3da0:	44 c0       	rjmp	.+136    	; 0x3e2a <malloc+0x124>
    3da2:	fe 01       	movw	r30, r28
    3da4:	e2 0f       	add	r30, r18
    3da6:	f3 1f       	adc	r31, r19
    3da8:	81 93       	st	Z+, r24
    3daa:	91 93       	st	Z+, r25
    3dac:	22 50       	subi	r18, 0x02	; 2
    3dae:	31 09       	sbc	r19, r1
    3db0:	39 83       	std	Y+1, r19	; 0x01
    3db2:	28 83       	st	Y, r18
    3db4:	3a c0       	rjmp	.+116    	; 0x3e2a <malloc+0x124>
    3db6:	20 91 c9 09 	lds	r18, 0x09C9	; 0x8009c9 <__brkval>
    3dba:	30 91 ca 09 	lds	r19, 0x09CA	; 0x8009ca <__brkval+0x1>
    3dbe:	23 2b       	or	r18, r19
    3dc0:	41 f4       	brne	.+16     	; 0x3dd2 <malloc+0xcc>
    3dc2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3dc6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3dca:	30 93 ca 09 	sts	0x09CA, r19	; 0x8009ca <__brkval+0x1>
    3dce:	20 93 c9 09 	sts	0x09C9, r18	; 0x8009c9 <__brkval>
    3dd2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3dd6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3dda:	21 15       	cp	r18, r1
    3ddc:	31 05       	cpc	r19, r1
    3dde:	41 f4       	brne	.+16     	; 0x3df0 <malloc+0xea>
    3de0:	2d b7       	in	r18, 0x3d	; 61
    3de2:	3e b7       	in	r19, 0x3e	; 62
    3de4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3de8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3dec:	24 1b       	sub	r18, r20
    3dee:	35 0b       	sbc	r19, r21
    3df0:	e0 91 c9 09 	lds	r30, 0x09C9	; 0x8009c9 <__brkval>
    3df4:	f0 91 ca 09 	lds	r31, 0x09CA	; 0x8009ca <__brkval+0x1>
    3df8:	e2 17       	cp	r30, r18
    3dfa:	f3 07       	cpc	r31, r19
    3dfc:	a0 f4       	brcc	.+40     	; 0x3e26 <malloc+0x120>
    3dfe:	2e 1b       	sub	r18, r30
    3e00:	3f 0b       	sbc	r19, r31
    3e02:	28 17       	cp	r18, r24
    3e04:	39 07       	cpc	r19, r25
    3e06:	78 f0       	brcs	.+30     	; 0x3e26 <malloc+0x120>
    3e08:	ac 01       	movw	r20, r24
    3e0a:	4e 5f       	subi	r20, 0xFE	; 254
    3e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e0e:	24 17       	cp	r18, r20
    3e10:	35 07       	cpc	r19, r21
    3e12:	48 f0       	brcs	.+18     	; 0x3e26 <malloc+0x120>
    3e14:	4e 0f       	add	r20, r30
    3e16:	5f 1f       	adc	r21, r31
    3e18:	50 93 ca 09 	sts	0x09CA, r21	; 0x8009ca <__brkval+0x1>
    3e1c:	40 93 c9 09 	sts	0x09C9, r20	; 0x8009c9 <__brkval>
    3e20:	81 93       	st	Z+, r24
    3e22:	91 93       	st	Z+, r25
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <malloc+0x124>
    3e26:	e0 e0       	ldi	r30, 0x00	; 0
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	cf 01       	movw	r24, r30
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	08 95       	ret

00003e36 <free>:
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <free+0xa>
    3e3e:	81 c0       	rjmp	.+258    	; 0x3f42 <free+0x10c>
    3e40:	fc 01       	movw	r30, r24
    3e42:	32 97       	sbiw	r30, 0x02	; 2
    3e44:	13 82       	std	Z+3, r1	; 0x03
    3e46:	12 82       	std	Z+2, r1	; 0x02
    3e48:	a0 91 cb 09 	lds	r26, 0x09CB	; 0x8009cb <__flp>
    3e4c:	b0 91 cc 09 	lds	r27, 0x09CC	; 0x8009cc <__flp+0x1>
    3e50:	10 97       	sbiw	r26, 0x00	; 0
    3e52:	81 f4       	brne	.+32     	; 0x3e74 <free+0x3e>
    3e54:	20 81       	ld	r18, Z
    3e56:	31 81       	ldd	r19, Z+1	; 0x01
    3e58:	82 0f       	add	r24, r18
    3e5a:	93 1f       	adc	r25, r19
    3e5c:	20 91 c9 09 	lds	r18, 0x09C9	; 0x8009c9 <__brkval>
    3e60:	30 91 ca 09 	lds	r19, 0x09CA	; 0x8009ca <__brkval+0x1>
    3e64:	28 17       	cp	r18, r24
    3e66:	39 07       	cpc	r19, r25
    3e68:	51 f5       	brne	.+84     	; 0x3ebe <free+0x88>
    3e6a:	f0 93 ca 09 	sts	0x09CA, r31	; 0x8009ca <__brkval+0x1>
    3e6e:	e0 93 c9 09 	sts	0x09C9, r30	; 0x8009c9 <__brkval>
    3e72:	67 c0       	rjmp	.+206    	; 0x3f42 <free+0x10c>
    3e74:	ed 01       	movw	r28, r26
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	ce 17       	cp	r28, r30
    3e7c:	df 07       	cpc	r29, r31
    3e7e:	40 f4       	brcc	.+16     	; 0x3e90 <free+0x5a>
    3e80:	4a 81       	ldd	r20, Y+2	; 0x02
    3e82:	5b 81       	ldd	r21, Y+3	; 0x03
    3e84:	9e 01       	movw	r18, r28
    3e86:	41 15       	cp	r20, r1
    3e88:	51 05       	cpc	r21, r1
    3e8a:	f1 f0       	breq	.+60     	; 0x3ec8 <free+0x92>
    3e8c:	ea 01       	movw	r28, r20
    3e8e:	f5 cf       	rjmp	.-22     	; 0x3e7a <free+0x44>
    3e90:	d3 83       	std	Z+3, r29	; 0x03
    3e92:	c2 83       	std	Z+2, r28	; 0x02
    3e94:	40 81       	ld	r20, Z
    3e96:	51 81       	ldd	r21, Z+1	; 0x01
    3e98:	84 0f       	add	r24, r20
    3e9a:	95 1f       	adc	r25, r21
    3e9c:	c8 17       	cp	r28, r24
    3e9e:	d9 07       	cpc	r29, r25
    3ea0:	59 f4       	brne	.+22     	; 0x3eb8 <free+0x82>
    3ea2:	88 81       	ld	r24, Y
    3ea4:	99 81       	ldd	r25, Y+1	; 0x01
    3ea6:	84 0f       	add	r24, r20
    3ea8:	95 1f       	adc	r25, r21
    3eaa:	02 96       	adiw	r24, 0x02	; 2
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	80 83       	st	Z, r24
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb4:	93 83       	std	Z+3, r25	; 0x03
    3eb6:	82 83       	std	Z+2, r24	; 0x02
    3eb8:	21 15       	cp	r18, r1
    3eba:	31 05       	cpc	r19, r1
    3ebc:	29 f4       	brne	.+10     	; 0x3ec8 <free+0x92>
    3ebe:	f0 93 cc 09 	sts	0x09CC, r31	; 0x8009cc <__flp+0x1>
    3ec2:	e0 93 cb 09 	sts	0x09CB, r30	; 0x8009cb <__flp>
    3ec6:	3d c0       	rjmp	.+122    	; 0x3f42 <free+0x10c>
    3ec8:	e9 01       	movw	r28, r18
    3eca:	fb 83       	std	Y+3, r31	; 0x03
    3ecc:	ea 83       	std	Y+2, r30	; 0x02
    3ece:	49 91       	ld	r20, Y+
    3ed0:	59 91       	ld	r21, Y+
    3ed2:	c4 0f       	add	r28, r20
    3ed4:	d5 1f       	adc	r29, r21
    3ed6:	ec 17       	cp	r30, r28
    3ed8:	fd 07       	cpc	r31, r29
    3eda:	61 f4       	brne	.+24     	; 0x3ef4 <free+0xbe>
    3edc:	80 81       	ld	r24, Z
    3ede:	91 81       	ldd	r25, Z+1	; 0x01
    3ee0:	84 0f       	add	r24, r20
    3ee2:	95 1f       	adc	r25, r21
    3ee4:	02 96       	adiw	r24, 0x02	; 2
    3ee6:	e9 01       	movw	r28, r18
    3ee8:	99 83       	std	Y+1, r25	; 0x01
    3eea:	88 83       	st	Y, r24
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	93 81       	ldd	r25, Z+3	; 0x03
    3ef0:	9b 83       	std	Y+3, r25	; 0x03
    3ef2:	8a 83       	std	Y+2, r24	; 0x02
    3ef4:	e0 e0       	ldi	r30, 0x00	; 0
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	12 96       	adiw	r26, 0x02	; 2
    3efa:	8d 91       	ld	r24, X+
    3efc:	9c 91       	ld	r25, X
    3efe:	13 97       	sbiw	r26, 0x03	; 3
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	19 f0       	breq	.+6      	; 0x3f0a <free+0xd4>
    3f04:	fd 01       	movw	r30, r26
    3f06:	dc 01       	movw	r26, r24
    3f08:	f7 cf       	rjmp	.-18     	; 0x3ef8 <free+0xc2>
    3f0a:	8d 91       	ld	r24, X+
    3f0c:	9c 91       	ld	r25, X
    3f0e:	11 97       	sbiw	r26, 0x01	; 1
    3f10:	9d 01       	movw	r18, r26
    3f12:	2e 5f       	subi	r18, 0xFE	; 254
    3f14:	3f 4f       	sbci	r19, 0xFF	; 255
    3f16:	82 0f       	add	r24, r18
    3f18:	93 1f       	adc	r25, r19
    3f1a:	20 91 c9 09 	lds	r18, 0x09C9	; 0x8009c9 <__brkval>
    3f1e:	30 91 ca 09 	lds	r19, 0x09CA	; 0x8009ca <__brkval+0x1>
    3f22:	28 17       	cp	r18, r24
    3f24:	39 07       	cpc	r19, r25
    3f26:	69 f4       	brne	.+26     	; 0x3f42 <free+0x10c>
    3f28:	30 97       	sbiw	r30, 0x00	; 0
    3f2a:	29 f4       	brne	.+10     	; 0x3f36 <free+0x100>
    3f2c:	10 92 cc 09 	sts	0x09CC, r1	; 0x8009cc <__flp+0x1>
    3f30:	10 92 cb 09 	sts	0x09CB, r1	; 0x8009cb <__flp>
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <free+0x104>
    3f36:	13 82       	std	Z+3, r1	; 0x03
    3f38:	12 82       	std	Z+2, r1	; 0x02
    3f3a:	b0 93 ca 09 	sts	0x09CA, r27	; 0x8009ca <__brkval+0x1>
    3f3e:	a0 93 c9 09 	sts	0x09C9, r26	; 0x8009c9 <__brkval>
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	08 95       	ret

00003f48 <strnlen_P>:
    3f48:	fc 01       	movw	r30, r24
    3f4a:	05 90       	lpm	r0, Z+
    3f4c:	61 50       	subi	r22, 0x01	; 1
    3f4e:	70 40       	sbci	r23, 0x00	; 0
    3f50:	01 10       	cpse	r0, r1
    3f52:	d8 f7       	brcc	.-10     	; 0x3f4a <strnlen_P+0x2>
    3f54:	80 95       	com	r24
    3f56:	90 95       	com	r25
    3f58:	8e 0f       	add	r24, r30
    3f5a:	9f 1f       	adc	r25, r31
    3f5c:	08 95       	ret

00003f5e <memset>:
    3f5e:	dc 01       	movw	r26, r24
    3f60:	01 c0       	rjmp	.+2      	; 0x3f64 <memset+0x6>
    3f62:	6d 93       	st	X+, r22
    3f64:	41 50       	subi	r20, 0x01	; 1
    3f66:	50 40       	sbci	r21, 0x00	; 0
    3f68:	e0 f7       	brcc	.-8      	; 0x3f62 <memset+0x4>
    3f6a:	08 95       	ret

00003f6c <strnlen>:
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	61 50       	subi	r22, 0x01	; 1
    3f70:	70 40       	sbci	r23, 0x00	; 0
    3f72:	01 90       	ld	r0, Z+
    3f74:	01 10       	cpse	r0, r1
    3f76:	d8 f7       	brcc	.-10     	; 0x3f6e <strnlen+0x2>
    3f78:	80 95       	com	r24
    3f7a:	90 95       	com	r25
    3f7c:	8e 0f       	add	r24, r30
    3f7e:	9f 1f       	adc	r25, r31
    3f80:	08 95       	ret

00003f82 <fputc>:
    3f82:	0f 93       	push	r16
    3f84:	1f 93       	push	r17
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    3f8a:	fb 01       	movw	r30, r22
    3f8c:	23 81       	ldd	r18, Z+3	; 0x03
    3f8e:	21 fd       	sbrc	r18, 1
    3f90:	03 c0       	rjmp	.+6      	; 0x3f98 <fputc+0x16>
    3f92:	8f ef       	ldi	r24, 0xFF	; 255
    3f94:	9f ef       	ldi	r25, 0xFF	; 255
    3f96:	2c c0       	rjmp	.+88     	; 0x3ff0 <fputc+0x6e>
    3f98:	22 ff       	sbrs	r18, 2
    3f9a:	16 c0       	rjmp	.+44     	; 0x3fc8 <fputc+0x46>
    3f9c:	46 81       	ldd	r20, Z+6	; 0x06
    3f9e:	57 81       	ldd	r21, Z+7	; 0x07
    3fa0:	24 81       	ldd	r18, Z+4	; 0x04
    3fa2:	35 81       	ldd	r19, Z+5	; 0x05
    3fa4:	42 17       	cp	r20, r18
    3fa6:	53 07       	cpc	r21, r19
    3fa8:	44 f4       	brge	.+16     	; 0x3fba <fputc+0x38>
    3faa:	a0 81       	ld	r26, Z
    3fac:	b1 81       	ldd	r27, Z+1	; 0x01
    3fae:	9d 01       	movw	r18, r26
    3fb0:	2f 5f       	subi	r18, 0xFF	; 255
    3fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb4:	31 83       	std	Z+1, r19	; 0x01
    3fb6:	20 83       	st	Z, r18
    3fb8:	8c 93       	st	X, r24
    3fba:	26 81       	ldd	r18, Z+6	; 0x06
    3fbc:	37 81       	ldd	r19, Z+7	; 0x07
    3fbe:	2f 5f       	subi	r18, 0xFF	; 255
    3fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc2:	37 83       	std	Z+7, r19	; 0x07
    3fc4:	26 83       	std	Z+6, r18	; 0x06
    3fc6:	14 c0       	rjmp	.+40     	; 0x3ff0 <fputc+0x6e>
    3fc8:	8b 01       	movw	r16, r22
    3fca:	ec 01       	movw	r28, r24
    3fcc:	fb 01       	movw	r30, r22
    3fce:	00 84       	ldd	r0, Z+8	; 0x08
    3fd0:	f1 85       	ldd	r31, Z+9	; 0x09
    3fd2:	e0 2d       	mov	r30, r0
    3fd4:	09 95       	icall
    3fd6:	89 2b       	or	r24, r25
    3fd8:	e1 f6       	brne	.-72     	; 0x3f92 <fputc+0x10>
    3fda:	d8 01       	movw	r26, r16
    3fdc:	16 96       	adiw	r26, 0x06	; 6
    3fde:	8d 91       	ld	r24, X+
    3fe0:	9c 91       	ld	r25, X
    3fe2:	17 97       	sbiw	r26, 0x07	; 7
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	17 96       	adiw	r26, 0x07	; 7
    3fe8:	9c 93       	st	X, r25
    3fea:	8e 93       	st	-X, r24
    3fec:	16 97       	sbiw	r26, 0x06	; 6
    3fee:	ce 01       	movw	r24, r28
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	1f 91       	pop	r17
    3ff6:	0f 91       	pop	r16
    3ff8:	08 95       	ret

00003ffa <__ultoa_invert>:
    3ffa:	fa 01       	movw	r30, r20
    3ffc:	aa 27       	eor	r26, r26
    3ffe:	28 30       	cpi	r18, 0x08	; 8
    4000:	51 f1       	breq	.+84     	; 0x4056 <__ultoa_invert+0x5c>
    4002:	20 31       	cpi	r18, 0x10	; 16
    4004:	81 f1       	breq	.+96     	; 0x4066 <__ultoa_invert+0x6c>
    4006:	e8 94       	clt
    4008:	6f 93       	push	r22
    400a:	6e 7f       	andi	r22, 0xFE	; 254
    400c:	6e 5f       	subi	r22, 0xFE	; 254
    400e:	7f 4f       	sbci	r23, 0xFF	; 255
    4010:	8f 4f       	sbci	r24, 0xFF	; 255
    4012:	9f 4f       	sbci	r25, 0xFF	; 255
    4014:	af 4f       	sbci	r26, 0xFF	; 255
    4016:	b1 e0       	ldi	r27, 0x01	; 1
    4018:	3e d0       	rcall	.+124    	; 0x4096 <__ultoa_invert+0x9c>
    401a:	b4 e0       	ldi	r27, 0x04	; 4
    401c:	3c d0       	rcall	.+120    	; 0x4096 <__ultoa_invert+0x9c>
    401e:	67 0f       	add	r22, r23
    4020:	78 1f       	adc	r23, r24
    4022:	89 1f       	adc	r24, r25
    4024:	9a 1f       	adc	r25, r26
    4026:	a1 1d       	adc	r26, r1
    4028:	68 0f       	add	r22, r24
    402a:	79 1f       	adc	r23, r25
    402c:	8a 1f       	adc	r24, r26
    402e:	91 1d       	adc	r25, r1
    4030:	a1 1d       	adc	r26, r1
    4032:	6a 0f       	add	r22, r26
    4034:	71 1d       	adc	r23, r1
    4036:	81 1d       	adc	r24, r1
    4038:	91 1d       	adc	r25, r1
    403a:	a1 1d       	adc	r26, r1
    403c:	20 d0       	rcall	.+64     	; 0x407e <__ultoa_invert+0x84>
    403e:	09 f4       	brne	.+2      	; 0x4042 <__ultoa_invert+0x48>
    4040:	68 94       	set
    4042:	3f 91       	pop	r19
    4044:	2a e0       	ldi	r18, 0x0A	; 10
    4046:	26 9f       	mul	r18, r22
    4048:	11 24       	eor	r1, r1
    404a:	30 19       	sub	r19, r0
    404c:	30 5d       	subi	r19, 0xD0	; 208
    404e:	31 93       	st	Z+, r19
    4050:	de f6       	brtc	.-74     	; 0x4008 <__ultoa_invert+0xe>
    4052:	cf 01       	movw	r24, r30
    4054:	08 95       	ret
    4056:	46 2f       	mov	r20, r22
    4058:	47 70       	andi	r20, 0x07	; 7
    405a:	40 5d       	subi	r20, 0xD0	; 208
    405c:	41 93       	st	Z+, r20
    405e:	b3 e0       	ldi	r27, 0x03	; 3
    4060:	0f d0       	rcall	.+30     	; 0x4080 <__ultoa_invert+0x86>
    4062:	c9 f7       	brne	.-14     	; 0x4056 <__ultoa_invert+0x5c>
    4064:	f6 cf       	rjmp	.-20     	; 0x4052 <__ultoa_invert+0x58>
    4066:	46 2f       	mov	r20, r22
    4068:	4f 70       	andi	r20, 0x0F	; 15
    406a:	40 5d       	subi	r20, 0xD0	; 208
    406c:	4a 33       	cpi	r20, 0x3A	; 58
    406e:	18 f0       	brcs	.+6      	; 0x4076 <__ultoa_invert+0x7c>
    4070:	49 5d       	subi	r20, 0xD9	; 217
    4072:	31 fd       	sbrc	r19, 1
    4074:	40 52       	subi	r20, 0x20	; 32
    4076:	41 93       	st	Z+, r20
    4078:	02 d0       	rcall	.+4      	; 0x407e <__ultoa_invert+0x84>
    407a:	a9 f7       	brne	.-22     	; 0x4066 <__ultoa_invert+0x6c>
    407c:	ea cf       	rjmp	.-44     	; 0x4052 <__ultoa_invert+0x58>
    407e:	b4 e0       	ldi	r27, 0x04	; 4
    4080:	a6 95       	lsr	r26
    4082:	97 95       	ror	r25
    4084:	87 95       	ror	r24
    4086:	77 95       	ror	r23
    4088:	67 95       	ror	r22
    408a:	ba 95       	dec	r27
    408c:	c9 f7       	brne	.-14     	; 0x4080 <__ultoa_invert+0x86>
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	61 05       	cpc	r22, r1
    4092:	71 05       	cpc	r23, r1
    4094:	08 95       	ret
    4096:	9b 01       	movw	r18, r22
    4098:	ac 01       	movw	r20, r24
    409a:	0a 2e       	mov	r0, r26
    409c:	06 94       	lsr	r0
    409e:	57 95       	ror	r21
    40a0:	47 95       	ror	r20
    40a2:	37 95       	ror	r19
    40a4:	27 95       	ror	r18
    40a6:	ba 95       	dec	r27
    40a8:	c9 f7       	brne	.-14     	; 0x409c <__ultoa_invert+0xa2>
    40aa:	62 0f       	add	r22, r18
    40ac:	73 1f       	adc	r23, r19
    40ae:	84 1f       	adc	r24, r20
    40b0:	95 1f       	adc	r25, r21
    40b2:	a0 1d       	adc	r26, r0
    40b4:	08 95       	ret

000040b6 <_exit>:
    40b6:	f8 94       	cli

000040b8 <__stop_program>:
    40b8:	ff cf       	rjmp	.-2      	; 0x40b8 <__stop_program>
