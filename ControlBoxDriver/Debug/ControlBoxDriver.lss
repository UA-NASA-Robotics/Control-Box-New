
ControlBoxDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800200  000029ce  00002a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000072d  0080026a  0080026a  00002acc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b0  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e87f  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cc6  00000000  00000000  00011b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004152  00000000  00000000  00015831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014f0  00000000  00000000  00019984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003088  00000000  00000000  0001ae74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005958  00000000  00000000  0001defc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  00023854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
       2:	00 00       	nop
       4:	d2 c0       	rjmp	.+420    	; 0x1aa <__bad_interrupt>
       6:	00 00       	nop
       8:	d0 c0       	rjmp	.+416    	; 0x1aa <__bad_interrupt>
       a:	00 00       	nop
       c:	ce c0       	rjmp	.+412    	; 0x1aa <__bad_interrupt>
       e:	00 00       	nop
      10:	cc c0       	rjmp	.+408    	; 0x1aa <__bad_interrupt>
      12:	00 00       	nop
      14:	ca c0       	rjmp	.+404    	; 0x1aa <__bad_interrupt>
      16:	00 00       	nop
      18:	c8 c0       	rjmp	.+400    	; 0x1aa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c6 c0       	rjmp	.+396    	; 0x1aa <__bad_interrupt>
      1e:	00 00       	nop
      20:	c4 c0       	rjmp	.+392    	; 0x1aa <__bad_interrupt>
      22:	00 00       	nop
      24:	c2 c0       	rjmp	.+388    	; 0x1aa <__bad_interrupt>
      26:	00 00       	nop
      28:	c0 c0       	rjmp	.+384    	; 0x1aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	be c0       	rjmp	.+380    	; 0x1aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	bc c0       	rjmp	.+376    	; 0x1aa <__bad_interrupt>
      32:	00 00       	nop
      34:	ba c0       	rjmp	.+372    	; 0x1aa <__bad_interrupt>
      36:	00 00       	nop
      38:	b8 c0       	rjmp	.+368    	; 0x1aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b6 c0       	rjmp	.+364    	; 0x1aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	b4 c0       	rjmp	.+360    	; 0x1aa <__bad_interrupt>
      42:	00 00       	nop
      44:	b2 c0       	rjmp	.+356    	; 0x1aa <__bad_interrupt>
      46:	00 00       	nop
      48:	b0 c0       	rjmp	.+352    	; 0x1aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ae c0       	rjmp	.+348    	; 0x1aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__vector_20>
      54:	aa c0       	rjmp	.+340    	; 0x1aa <__bad_interrupt>
      56:	00 00       	nop
      58:	a8 c0       	rjmp	.+336    	; 0x1aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__vector_23>
      60:	a4 c0       	rjmp	.+328    	; 0x1aa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__vector_25>
      68:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__vector_26>
      6c:	9e c0       	rjmp	.+316    	; 0x1aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	9c c0       	rjmp	.+312    	; 0x1aa <__bad_interrupt>
      72:	00 00       	nop
      74:	9b c0       	rjmp	.+310    	; 0x1ac <__vector_29>
      76:	00 00       	nop
      78:	98 c0       	rjmp	.+304    	; 0x1aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	96 c0       	rjmp	.+300    	; 0x1aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	94 c0       	rjmp	.+296    	; 0x1aa <__bad_interrupt>
      82:	00 00       	nop
      84:	92 c0       	rjmp	.+292    	; 0x1aa <__bad_interrupt>
      86:	00 00       	nop
      88:	90 c0       	rjmp	.+288    	; 0x1aa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8e c0       	rjmp	.+284    	; 0x1aa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 43 12 	jmp	0x2486	; 0x2486 <__vector_36>
      94:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_37>
      98:	88 c0       	rjmp	.+272    	; 0x1aa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	86 c0       	rjmp	.+268    	; 0x1aa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	84 c0       	rjmp	.+264    	; 0x1aa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	82 c0       	rjmp	.+260    	; 0x1aa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	80 c0       	rjmp	.+256    	; 0x1aa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7e c0       	rjmp	.+252    	; 0x1aa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7c c0       	rjmp	.+248    	; 0x1aa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7a c0       	rjmp	.+244    	; 0x1aa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	78 c0       	rjmp	.+240    	; 0x1aa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	76 c0       	rjmp	.+236    	; 0x1aa <__bad_interrupt>
      be:	00 00       	nop
      c0:	74 c0       	rjmp	.+232    	; 0x1aa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	72 c0       	rjmp	.+228    	; 0x1aa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	70 c0       	rjmp	.+224    	; 0x1aa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_51>
      d0:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_52>
      d4:	6a c0       	rjmp	.+212    	; 0x1aa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__vector_54>
      dc:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__vector_55>
      e0:	64 c0       	rjmp	.+200    	; 0x1aa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5f 04       	cpc	r5, r15
      e6:	68 04       	cpc	r6, r8
      e8:	71 04       	cpc	r7, r1
      ea:	7a 04       	cpc	r7, r10
      ec:	83 04       	cpc	r8, r3
      ee:	8c 04       	cpc	r8, r12
      f0:	cd 04       	cpc	r12, r13
      f2:	95 04       	cpc	r9, r5
      f4:	a3 04       	cpc	r10, r3
      f6:	b1 04       	cpc	r11, r1
      f8:	bf 04       	cpc	r11, r15
      fa:	66 06       	cpc	r6, r22
      fc:	45 06       	cpc	r4, r21
      fe:	48 06       	cpc	r4, r24
     100:	4b 06       	cpc	r4, r27
     102:	4e 06       	cpc	r4, r30
     104:	51 06       	cpc	r5, r17
     106:	54 06       	cpc	r5, r20
     108:	57 06       	cpc	r5, r23
     10a:	5a 06       	cpc	r5, r26
     10c:	5d 06       	cpc	r5, r29
     10e:	60 06       	cpc	r6, r16
     110:	93 06       	cpc	r9, r19
     112:	72 06       	cpc	r7, r18
     114:	75 06       	cpc	r7, r21
     116:	78 06       	cpc	r7, r24
     118:	7b 06       	cpc	r7, r27
     11a:	7e 06       	cpc	r7, r30
     11c:	81 06       	cpc	r8, r17
     11e:	84 06       	cpc	r8, r20
     120:	87 06       	cpc	r8, r23
     122:	8a 06       	cpc	r8, r26
     124:	8d 06       	cpc	r8, r29
     126:	34 07       	cpc	r19, r20
     128:	13 07       	cpc	r17, r19
     12a:	16 07       	cpc	r17, r22
     12c:	19 07       	cpc	r17, r25
     12e:	1c 07       	cpc	r17, r28
     130:	1f 07       	cpc	r17, r31
     132:	22 07       	cpc	r18, r18
     134:	25 07       	cpc	r18, r21
     136:	28 07       	cpc	r18, r24
     138:	2b 07       	cpc	r18, r27
     13a:	2e 07       	cpc	r18, r30
     13c:	55 0d       	add	r21, r5
     13e:	5a 0d       	add	r21, r10
     140:	5d 0d       	add	r21, r13
     142:	61 0d       	add	r22, r1
     144:	64 0d       	add	r22, r4
     146:	78 0d       	add	r23, r8
     148:	6f 0d       	add	r22, r15
     14a:	72 0d       	add	r23, r2
     14c:	e6 0d       	add	r30, r6
     14e:	eb 0d       	add	r30, r11
     150:	ee 0d       	add	r30, r14
     152:	f2 0d       	add	r31, r2
     154:	01 0e       	add	r0, r17
     156:	f5 0d       	add	r31, r5
     158:	f8 0d       	add	r31, r8
     15a:	fb 0d       	add	r31, r11
     15c:	28 11       	cpse	r18, r8
     15e:	2b 11       	cpse	r18, r11
     160:	2f 11       	cpse	r18, r15
     162:	33 11       	cpse	r19, r3
     164:	37 11       	cpse	r19, r7
     166:	3b 11       	cpse	r19, r11
     168:	3f 11       	cpse	r19, r15
     16a:	43 11       	cpse	r20, r3

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d1 e2       	ldi	r29, 0x21	; 33
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	ee ec       	ldi	r30, 0xCE	; 206
     180:	f9 e2       	ldi	r31, 0x29	; 41
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	0b bf       	out	0x3b, r16	; 59
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x14>
     188:	07 90       	elpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	aa 36       	cpi	r26, 0x6A	; 106
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0x10>

00000192 <__do_clear_bss>:
     192:	29 e0       	ldi	r18, 0x09	; 9
     194:	aa e6       	ldi	r26, 0x6A	; 106
     196:	b2 e0       	ldi	r27, 0x02	; 2
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a7 39       	cpi	r26, 0x97	; 151
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <main>
     1a6:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <_exit>

000001aa <__bad_interrupt>:
     1aa:	2a cf       	rjmp	.-428    	; 0x0 <__vectors>

000001ac <__vector_29>:
  ADMUX |= channel;
}

void AnalogInput::disable_digital_input_buffers ()
{
  DIDR0 |= 0xFF;
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	8f 93       	push	r24
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <__data_end>
     1be:	8f 91       	pop	r24
     1c0:	0f 90       	pop	r0
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	0f 90       	pop	r0
     1c6:	1f 90       	pop	r1
     1c8:	18 95       	reti

000001ca <_ZN11AnalogInput24select_voltage_referenceEv>:
     1ca:	ec e7       	ldi	r30, 0x7C	; 124
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 64       	ori	r24, 0x40	; 64
     1d2:	80 83       	st	Z, r24
     1d4:	08 95       	ret

000001d6 <_ZN11AnalogInput22switch_to_this_channelEv>:
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ec 01       	movw	r28, r24
     1dc:	ec e7       	ldi	r30, 0x7C	; 124
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	90 81       	ld	r25, Z
     1e2:	90 7e       	andi	r25, 0xE0	; 224
     1e4:	90 83       	st	Z, r25
     1e6:	ab e7       	ldi	r26, 0x7B	; 123
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	9c 91       	ld	r25, X
     1ec:	97 7f       	andi	r25, 0xF7	; 247
     1ee:	9c 93       	st	X, r25
     1f0:	90 81       	ld	r25, Z
     1f2:	88 81       	ld	r24, Y
     1f4:	89 2b       	or	r24, r25
     1f6:	80 83       	st	Z, r24
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <_ZN11AnalogInput12set_prescaleEv>:

void AnalogInput::set_prescale ()
{
  // Divide the clock speed (16MHz) by 128, to provide a frequency of
  // 125kHz to the ADC input clock.  The acceptable range is 50kHz to 200kHz.
  ADCSRA |= 0b00000111;
     1fe:	ea e7       	ldi	r30, 0x7A	; 122
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	87 60       	ori	r24, 0x07	; 7
     206:	80 83       	st	Z, r24
     208:	08 95       	ret

0000020a <_ZN11AnalogInput10enable_adcEv>:
}

void AnalogInput::enable_adc ()
{
  ADCSRA |= (1 << ADEN);
     20a:	ea e7       	ldi	r30, 0x7A	; 122
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	80 68       	ori	r24, 0x80	; 128
     212:	80 83       	st	Z, r24
     214:	08 95       	ret

00000216 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>:
{
  conversion_complete = true;
}

void AnalogInput::initialize (ANALOG_CHANNEL channel)
{
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	ec 01       	movw	r28, r24
  sei();
     21c:	78 94       	sei
  this->channel = channel;
     21e:	68 83       	st	Y, r22
  select_voltage_reference();
     220:	d4 df       	rcall	.-88     	; 0x1ca <_ZN11AnalogInput24select_voltage_referenceEv>
  ADMUX |= channel;
}

void AnalogInput::disable_digital_input_buffers ()
{
  DIDR0 |= 0xFF;
     222:	ee e7       	ldi	r30, 0x7E	; 126
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	80 83       	st	Z, r24
{
  sei();
  this->channel = channel;
  select_voltage_reference();
  disable_digital_input_buffers();
  set_prescale();
     22c:	ce 01       	movw	r24, r28
     22e:	e7 df       	rcall	.-50     	; 0x1fe <_ZN11AnalogInput12set_prescaleEv>
  enable_adc();
     230:	ce 01       	movw	r24, r28
     232:	eb df       	rcall	.-42     	; 0x20a <_ZN11AnalogInput10enable_adcEv>
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <_ZN11AnalogInput16start_conversionEv>:
  ADCSRA |= (1 << ADEN);
}

void AnalogInput::start_conversion ()
{
  conversion_complete = false;
     23a:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__data_end>
  ADCSRA |= (1 << ADIE); // Enable the ADC interrupt.
     23e:	ea e7       	ldi	r30, 0x7A	; 122
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	88 60       	ori	r24, 0x08	; 8
     246:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADSC); // Start the conversion.
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	08 95       	ret

00000250 <_ZN11AnalogInput4readEv>:
  set_prescale();
  enable_adc();
}

uint16_t AnalogInput::read ()
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
  switch_to_this_channel();
     256:	bf df       	rcall	.-130    	; 0x1d6 <_ZN11AnalogInput22switch_to_this_channelEv>
  start_conversion();
     258:	ce 01       	movw	r24, r28
     25a:	ef df       	rcall	.-34     	; 0x23a <_ZN11AnalogInput16start_conversionEv>
  while (!conversion_complete);
     25c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
     260:	88 23       	and	r24, r24
     262:	e1 f3       	breq	.-8      	; 0x25c <_ZN11AnalogInput4readEv+0xc>
  uint16_t low = ADCL;
     264:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  uint16_t high = ADCH;
     268:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     26c:	90 e0       	ldi	r25, 0x00	; 0
  return low + (high << 8);
     26e:	98 2f       	mov	r25, r24
     270:	88 27       	eor	r24, r24
}
     272:	82 0f       	add	r24, r18
     274:	91 1d       	adc	r25, r1
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <_ZN14Communications15initialize_uartEv>:
  send_byte(Message::LENGTH);
  send_byte(msg.address);
  send_byte(msg.first);    // switched the order so that least significant byte is send first
  send_byte(msg.second);
  send_byte(crc(msg));
}
     27c:	fc 01       	movw	r30, r24
     27e:	80 81       	ld	r24, Z
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	49 f0       	breq	.+18     	; 0x296 <_ZN14Communications15initialize_uartEv+0x1a>
     284:	18 f0       	brcs	.+6      	; 0x28c <_ZN14Communications15initialize_uartEv+0x10>
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	59 f0       	breq	.+22     	; 0x2a0 <_ZN14Communications15initialize_uartEv+0x24>
     28a:	0f c0       	rjmp	.+30     	; 0x2aa <_ZN14Communications15initialize_uartEv+0x2e>
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <_Z16uart0_initializej>
     294:	08 95       	ret
     296:	88 e0       	ldi	r24, 0x08	; 8
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <_Z16uart1_initializej>
     29e:	08 95       	ret
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <_Z16uart2_initializej>
     2a8:	08 95       	ret
     2aa:	88 e0       	ldi	r24, 0x08	; 8
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <_Z16uart3_initializej>
     2b2:	08 95       	ret

000002b4 <_ZN14Communications10initializeE11UART_MODULEP6Memory>:
     2b4:	fc 01       	movw	r30, r24
     2b6:	60 83       	st	Z, r22
     2b8:	52 83       	std	Z+2, r21	; 0x02
     2ba:	41 83       	std	Z+1, r20	; 0x01
     2bc:	df cf       	rjmp	.-66     	; 0x27c <_ZN14Communications15initialize_uartEv>
     2be:	08 95       	ret

000002c0 <_ZN14Communications9read_byteEv>:
     2c0:	fc 01       	movw	r30, r24
     2c2:	80 81       	ld	r24, Z
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	39 f0       	breq	.+14     	; 0x2d6 <_ZN14Communications9read_byteEv+0x16>
     2c8:	18 f0       	brcs	.+6      	; 0x2d0 <_ZN14Communications9read_byteEv+0x10>
     2ca:	82 30       	cpi	r24, 0x02	; 2
     2cc:	39 f0       	breq	.+14     	; 0x2dc <_ZN14Communications9read_byteEv+0x1c>
     2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <_ZN14Communications9read_byteEv+0x22>
     2d0:	0c 94 10 12 	jmp	0x2420	; 0x2420 <_Z15uart0_read_bytev>
     2d4:	08 95       	ret
     2d6:	0c 94 b7 12 	jmp	0x256e	; 0x256e <_Z15uart1_read_bytev>
     2da:	08 95       	ret
     2dc:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <_Z15uart2_read_bytev>
     2e0:	08 95       	ret
     2e2:	0c 94 05 14 	jmp	0x280a	; 0x280a <_Z15uart3_read_bytev>
     2e6:	08 95       	ret

000002e8 <_ZN14Communications9send_byteEh>:
     2e8:	fc 01       	movw	r30, r24
     2ea:	90 81       	ld	r25, Z
     2ec:	91 30       	cpi	r25, 0x01	; 1
     2ee:	41 f0       	breq	.+16     	; 0x300 <_ZN14Communications9send_byteEh+0x18>
     2f0:	18 f0       	brcs	.+6      	; 0x2f8 <_ZN14Communications9send_byteEh+0x10>
     2f2:	92 30       	cpi	r25, 0x02	; 2
     2f4:	49 f0       	breq	.+18     	; 0x308 <_ZN14Communications9send_byteEh+0x20>
     2f6:	0c c0       	rjmp	.+24     	; 0x310 <_ZN14Communications9send_byteEh+0x28>
     2f8:	86 2f       	mov	r24, r22
     2fa:	0c 94 2e 12 	jmp	0x245c	; 0x245c <_Z15uart0_send_byteh>
     2fe:	08 95       	ret
     300:	86 2f       	mov	r24, r22
     302:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <_Z15uart1_send_byteh>
     306:	08 95       	ret
     308:	86 2f       	mov	r24, r22
     30a:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <_Z15uart2_send_byteh>
     30e:	08 95       	ret
     310:	86 2f       	mov	r24, r22
     312:	0c 94 23 14 	jmp	0x2846	; 0x2846 <_Z15uart3_send_byteh>
     316:	08 95       	ret

00000318 <_ZN14Communications3crcEPK7Messageh>:
    otherwise:   uart3_send_byte(value);
  }
}

uint8_t Communications::crc (const Message messages [], uint8_t count)
{
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	00 d0       	rcall	.+0      	; 0x326 <_ZN14Communications3crcEPK7Messageh+0xe>
     326:	1f 92       	push	r1
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < count; ++i)
     32c:	44 23       	and	r20, r20
     32e:	81 f1       	breq	.+96     	; 0x390 <_ZN14Communications3crcEPK7Messageh+0x78>
     330:	8b 01       	movw	r16, r22
     332:	0e 5f       	subi	r16, 0xFE	; 254
     334:	1f 4f       	sbci	r17, 0xFF	; 255
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	7e 01       	movw	r14, r28
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	e8 0e       	add	r14, r24
     340:	f1 1c       	adc	r15, r1
			for (uint8_t k = 0; k < 8; ++k)
			{
				uint8_t sum = (value ^ data) & 0x01;
				value >>= 1;
				if (sum)
					value ^= CRC_POLYNOMIAL;
     342:	ec e8       	ldi	r30, 0x8C	; 140
	for (uint8_t i = 0; i < count; ++i)
	{
		uint8_t arr [] = {messages[i].address, messages[i].second, messages[i].first};
		for (uint8_t j = 0; j < 3; ++j)
		{
			uint8_t data = arr[j];
     344:	68 e0       	ldi	r22, 0x08	; 8
     346:	d8 01       	movw	r26, r16
     348:	12 97       	sbiw	r26, 0x02	; 2
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < count; ++i)
	{
		uint8_t arr [] = {messages[i].address, messages[i].second, messages[i].first};
     34a:	8c 91       	ld	r24, X
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	d8 01       	movw	r26, r16
     350:	8c 91       	ld	r24, X
     352:	8a 83       	std	Y+2, r24	; 0x02
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	8c 91       	ld	r24, X
     358:	8b 83       	std	Y+3, r24	; 0x03
     35a:	de 01       	movw	r26, r28
     35c:	11 96       	adiw	r26, 0x01	; 1
		for (uint8_t j = 0; j < 3; ++j)
		{
			uint8_t data = arr[j];
     35e:	5d 91       	ld	r21, X+
     360:	36 2f       	mov	r19, r22
			for (uint8_t k = 0; k < 8; ++k)
			{
				uint8_t sum = (value ^ data) & 0x01;
     362:	75 2f       	mov	r23, r21
     364:	72 27       	eor	r23, r18
				value >>= 1;
     366:	82 2f       	mov	r24, r18
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	95 95       	asr	r25
     36c:	87 95       	ror	r24
     36e:	28 2f       	mov	r18, r24
				if (sum)
     370:	70 ff       	sbrs	r23, 0
     372:	02 c0       	rjmp	.+4      	; 0x378 <_ZN14Communications3crcEPK7Messageh+0x60>
					value ^= CRC_POLYNOMIAL;
     374:	2e 2f       	mov	r18, r30
     376:	28 27       	eor	r18, r24
				data >>= 1;
     378:	56 95       	lsr	r21
     37a:	31 50       	subi	r19, 0x01	; 1
	{
		uint8_t arr [] = {messages[i].address, messages[i].second, messages[i].first};
		for (uint8_t j = 0; j < 3; ++j)
		{
			uint8_t data = arr[j];
			for (uint8_t k = 0; k < 8; ++k)
     37c:	91 f7       	brne	.-28     	; 0x362 <_ZN14Communications3crcEPK7Messageh+0x4a>
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < count; ++i)
	{
		uint8_t arr [] = {messages[i].address, messages[i].second, messages[i].first};
		for (uint8_t j = 0; j < 3; ++j)
     37e:	ae 15       	cp	r26, r14
     380:	bf 05       	cpc	r27, r15
     382:	69 f7       	brne	.-38     	; 0x35e <_ZN14Communications3crcEPK7Messageh+0x46>

uint8_t Communications::crc (const Message messages [], uint8_t count)
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < count; ++i)
     384:	ff 5f       	subi	r31, 0xFF	; 255
     386:	0d 5f       	subi	r16, 0xFD	; 253
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	f4 13       	cpse	r31, r20
     38c:	dc cf       	rjmp	.-72     	; 0x346 <_ZN14Communications3crcEPK7Messageh+0x2e>
     38e:	01 c0       	rjmp	.+2      	; 0x392 <_ZN14Communications3crcEPK7Messageh+0x7a>
}

uint8_t Communications::crc (const Message messages [], uint8_t count)
{
	const uint8_t CRC_POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
     390:	20 e0       	ldi	r18, 0x00	; 0
				data >>= 1;
			}
		}
	}
	return value;
}
     392:	82 2f       	mov	r24, r18
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	08 95       	ret

000003a8 <_ZN14Communications4sendEPK7Messageh>:
  send_byte(msg.second);
  send_byte(crc(msg));
}

void Communications::send (const Message * messages, uint8_t count)
{
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	7c 01       	movw	r14, r24
     3bc:	eb 01       	movw	r28, r22
     3be:	c4 2e       	mov	r12, r20
  uint8_t cyclic_redundancy_check = crc(messages, count);
     3c0:	ab df       	rcall	.-170    	; 0x318 <_ZN14Communications3crcEPK7Messageh>
     3c2:	b8 2e       	mov	r11, r24
  send_byte(FIRST_BYTE);
     3c4:	66 e0       	ldi	r22, 0x06	; 6
     3c6:	c7 01       	movw	r24, r14
     3c8:	8f df       	rcall	.-226    	; 0x2e8 <_ZN14Communications9send_byteEh>
  send_byte(SECOND_BYTE);
     3ca:	65 e8       	ldi	r22, 0x85	; 133
     3cc:	c7 01       	movw	r24, r14
     3ce:	8c df       	rcall	.-232    	; 0x2e8 <_ZN14Communications9send_byteEh>
  send_byte(ROBOT_ADDRESS);
     3d0:	64 e0       	ldi	r22, 0x04	; 4
     3d2:	c7 01       	movw	r24, r14
     3d4:	89 df       	rcall	.-238    	; 0x2e8 <_ZN14Communications9send_byteEh>
  send_byte(CONTROL_BOX_ADDRESS);
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	c7 01       	movw	r24, r14
     3da:	86 df       	rcall	.-244    	; 0x2e8 <_ZN14Communications9send_byteEh>
  send_byte(Message::LENGTH * count);
     3dc:	9c 2d       	mov	r25, r12
     3de:	99 0f       	add	r25, r25
     3e0:	69 2f       	mov	r22, r25
     3e2:	6c 0d       	add	r22, r12
     3e4:	c7 01       	movw	r24, r14
     3e6:	80 df       	rcall	.-256    	; 0x2e8 <_ZN14Communications9send_byteEh>
  for (int i = 0; i < count; ++i)
     3e8:	cc 20       	and	r12, r12
     3ea:	f1 f0       	breq	.+60     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3ec:	8e 01       	movw	r16, r28
     3ee:	0e 5f       	subi	r16, 0xFE	; 254
     3f0:	1f 4f       	sbci	r17, 0xFF	; 255
     3f2:	4c 2d       	mov	r20, r12
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	6a 01       	movw	r12, r20
     3f8:	cc 0c       	add	r12, r12
     3fa:	dd 1c       	adc	r13, r13
     3fc:	c4 0e       	add	r12, r20
     3fe:	d5 1e       	adc	r13, r21
     400:	cc 0e       	add	r12, r28
     402:	dd 1e       	adc	r13, r29
  {
    send_byte(messages->address);
     404:	68 81       	ld	r22, Y
     406:	c7 01       	movw	r24, r14
     408:	6f df       	rcall	.-290    	; 0x2e8 <_ZN14Communications9send_byteEh>
    send_byte(messages->second);
     40a:	f8 01       	movw	r30, r16
     40c:	60 81       	ld	r22, Z
     40e:	c7 01       	movw	r24, r14
     410:	6b df       	rcall	.-298    	; 0x2e8 <_ZN14Communications9send_byteEh>
     412:	f8 01       	movw	r30, r16
     414:	31 97       	sbiw	r30, 0x01	; 1
    send_byte(messages->first);
     416:	60 81       	ld	r22, Z
     418:	c7 01       	movw	r24, r14
     41a:	66 df       	rcall	.-308    	; 0x2e8 <_ZN14Communications9send_byteEh>
    ++messages;
     41c:	23 96       	adiw	r28, 0x03	; 3
     41e:	0d 5f       	subi	r16, 0xFD	; 253
     420:	1f 4f       	sbci	r17, 0xFF	; 255
  send_byte(FIRST_BYTE);
  send_byte(SECOND_BYTE);
  send_byte(ROBOT_ADDRESS);
  send_byte(CONTROL_BOX_ADDRESS);
  send_byte(Message::LENGTH * count);
  for (int i = 0; i < count; ++i)
     422:	cc 15       	cp	r28, r12
     424:	dd 05       	cpc	r29, r13
     426:	71 f7       	brne	.-36     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
    send_byte(messages->address);
    send_byte(messages->second);
    send_byte(messages->first);
    ++messages;
  }
  send_byte(cyclic_redundancy_check);
     428:	6b 2d       	mov	r22, r11
     42a:	c7 01       	movw	r24, r14
     42c:	5d df       	rcall	.-326    	; 0x2e8 <_ZN14Communications9send_byteEh>
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	bf 90       	pop	r11
     440:	08 95       	ret

00000442 <_ZN14Communications5parseEh>:
	}
	return value;
}

void Communications::parse (uint8_t byte)
{
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <_ZN14Communications5parseEh+0x12>
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	6c 01       	movw	r12, r24
  parser.push(byte);
     45c:	7c 01       	movw	r14, r24
     45e:	8c e9       	ldi	r24, 0x9C	; 156
     460:	e8 0e       	add	r14, r24
     462:	f1 1c       	adc	r15, r1
     464:	c7 01       	movw	r24, r14
     466:	3e d3       	rcall	.+1660   	; 0xae4 <_ZN18FastTransferParser4pushEh>
  if (parser.valid_messages())
     468:	c7 01       	movw	r24, r14
     46a:	9e d3       	rcall	.+1852   	; 0xba8 <_ZNK18FastTransferParser14valid_messagesEv>
     46c:	88 23       	and	r24, r24
     46e:	d1 f0       	breq	.+52     	; 0x4a4 <_ZN14Communications5parseEh+0x62>
  {
    uint8_t max = parser.num_messages();
     470:	c7 01       	movw	r24, r14
     472:	b1 d3       	rcall	.+1890   	; 0xbd6 <_ZNK18FastTransferParser12num_messagesEv>
     474:	08 2f       	mov	r16, r24
    for (uint8_t i = 0; i < max; ++i)
     476:	88 23       	and	r24, r24
     478:	91 f0       	breq	.+36     	; 0x49e <_ZN14Communications5parseEh+0x5c>
     47a:	10 e0       	ldi	r17, 0x00	; 0
      unread_messages.push(parser.get_message(i));
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	c8 0e       	add	r12, r24
     480:	d1 1c       	adc	r13, r1
     482:	61 2f       	mov	r22, r17
     484:	c7 01       	movw	r24, r14
     486:	47 d3       	rcall	.+1678   	; 0xb16 <_ZNK18FastTransferParser11get_messageEh>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	be 01       	movw	r22, r28
     490:	6f 5f       	subi	r22, 0xFF	; 255
     492:	7f 4f       	sbci	r23, 0xFF	; 255
     494:	c6 01       	movw	r24, r12
     496:	d5 d2       	rcall	.+1450   	; 0xa42 <_ZN12MessageQueue4pushERK7Message>
{
  parser.push(byte);
  if (parser.valid_messages())
  {
    uint8_t max = parser.num_messages();
    for (uint8_t i = 0; i < max; ++i)
     498:	1f 5f       	subi	r17, 0xFF	; 255
     49a:	10 13       	cpse	r17, r16
     49c:	f2 cf       	rjmp	.-28     	; 0x482 <_ZN14Communications5parseEh+0x40>
      unread_messages.push(parser.get_message(i));
    parser.clear();
     49e:	c7 01       	movw	r24, r14
     4a0:	37 d3       	rcall	.+1646   	; 0xb10 <_ZN18FastTransferParser5clearEv>
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <_ZN14Communications5parseEh+0x6e>
  }
  else if (parser.is_full())
     4a4:	c7 01       	movw	r24, r14
     4a6:	2c d3       	rcall	.+1624   	; 0xb00 <_ZNK18FastTransferParser7is_fullEv>
     4a8:	88 23       	and	r24, r24
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <_ZN14Communications5parseEh+0x6e>
    parser.clear();
     4ac:	c7 01       	movw	r24, r14
     4ae:	30 d3       	rcall	.+1632   	; 0xb10 <_ZN18FastTransferParser5clearEv>
}
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <_ZN14Communications4readEv>:
  */
  send (msgs, num_messages);
}

void Communications::read ()
{
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
  uint16_t byte = read_byte();
     4ce:	f8 de       	rcall	.-528    	; 0x2c0 <_ZN14Communications9read_byteEv>
     4d0:	bc 01       	movw	r22, r24
  while (!UART_ERROR(byte))
     4d2:	88 27       	eor	r24, r24
     4d4:	89 2b       	or	r24, r25
     4d6:	41 f4       	brne	.+16     	; 0x4e8 <_ZN14Communications4readEv+0x20>
  {
    parse(byte);
     4d8:	ce 01       	movw	r24, r28
     4da:	b3 df       	rcall	.-154    	; 0x442 <_ZN14Communications5parseEh>
    byte = read_byte();
     4dc:	ce 01       	movw	r24, r28
     4de:	f0 de       	rcall	.-544    	; 0x2c0 <_ZN14Communications9read_byteEv>
     4e0:	bc 01       	movw	r22, r24
}

void Communications::read ()
{
  uint16_t byte = read_byte();
  while (!UART_ERROR(byte))
     4e2:	88 27       	eor	r24, r24
     4e4:	89 2b       	or	r24, r25
     4e6:	c1 f3       	breq	.-16     	; 0x4d8 <_ZN14Communications4readEv+0x10>
  {
    parse(byte);
    byte = read_byte();
  }
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <_ZN14Communications7receiveEv>:
  this->memory = memory;
  initialize_uart();
}

void Communications::receive ()
{
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	8c 01       	movw	r16, r24
  read();
     4fa:	e6 df       	rcall	.-52     	; 0x4c8 <_ZN14Communications4readEv>
  send_byte(cyclic_redundancy_check);
}

uint8_t Communications::get_num_messages () const
{
  return unread_messages.count();
     4fc:	0d 5f       	subi	r16, 0xFD	; 253
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	c8 01       	movw	r24, r16
     502:	ea d2       	rcall	.+1492   	; 0xad8 <_ZNK12MessageQueue5countEv>
}

void Communications::receive ()
{
  read();
  memory->write(CONNECTED, get_num_messages());
     504:	68 2f       	mov	r22, r24
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
  while (get_num_messages() > 0)
     50e:	14 c0       	rjmp	.+40     	; 0x538 <_ZN14Communications7receiveEv+0x4a>
  return unread_messages.count();
}

Message Communications::get_next_message ()
{
  return unread_messages.pop();
     510:	c8 01       	movw	r24, r16
     512:	c2 d2       	rcall	.+1412   	; 0xa98 <_ZN12MessageQueue3popEv>
     514:	d6 2f       	mov	r29, r22
     516:	c7 2f       	mov	r28, r23
     518:	f8 2e       	mov	r15, r24
  memory->write(CONNECTED, get_num_messages());
  while (get_num_messages() > 0)
  {
    Message msg = get_next_message();
    uint16_t data = ((uint16_t)msg.first << 8) + msg.second;
    if (memory->valid_address(msg.address))
     51a:	86 2f       	mov	r24, r22
     51c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN6Memory13valid_addressEh>
     520:	88 23       	and	r24, r24
     522:	51 f0       	breq	.+20     	; 0x538 <_ZN14Communications7receiveEv+0x4a>
  read();
  memory->write(CONNECTED, get_num_messages());
  while (get_num_messages() > 0)
  {
    Message msg = get_next_message();
    uint16_t data = ((uint16_t)msg.first << 8) + msg.second;
     524:	2c 2f       	mov	r18, r28
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	32 2f       	mov	r19, r18
     52a:	22 27       	eor	r18, r18
     52c:	b9 01       	movw	r22, r18
     52e:	6f 0d       	add	r22, r15
     530:	71 1d       	adc	r23, r1
    if (memory->valid_address(msg.address))
      memory->write(msg.address, data);
     532:	8d 2f       	mov	r24, r29
     534:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
  send_byte(cyclic_redundancy_check);
}

uint8_t Communications::get_num_messages () const
{
  return unread_messages.count();
     538:	c8 01       	movw	r24, r16
     53a:	ce d2       	rcall	.+1436   	; 0xad8 <_ZNK12MessageQueue5countEv>

void Communications::receive ()
{
  read();
  memory->write(CONNECTED, get_num_messages());
  while (get_num_messages() > 0)
     53c:	81 11       	cpse	r24, r1
     53e:	e8 cf       	rjmp	.-48     	; 0x510 <_ZN14Communications7receiveEv+0x22>
    Message msg = get_next_message();
    uint16_t data = ((uint16_t)msg.first << 8) + msg.second;
    if (memory->valid_address(msg.address))
      memory->write(msg.address, data);
  }
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	08 95       	ret

0000054c <_ZN14Communications12stop_all_msgEP7MessageRj>:
}

/* New message construction */

void Communications::stop_all_msg(Message messages [], unsigned & size)
{
     54c:	fb 01       	movw	r30, r22
     54e:	32 96       	adiw	r30, 0x02	; 2
	unsigned count = 0;
	for (uint8_t i = 1; i < 6; ++i)
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	df 01       	movw	r26, r30
     554:	12 97       	sbiw	r26, 0x02	; 2
	{
		messages[i - 1].address = i;
     556:	8c 93       	st	X, r24
     558:	11 96       	adiw	r26, 0x01	; 1
		messages[i - 1].first = 0;
     55a:	1c 92       	st	X, r1
		messages[i - 1].second = 0;
     55c:	10 82       	st	Z, r1
/* New message construction */

void Communications::stop_all_msg(Message messages [], unsigned & size)
{
	unsigned count = 0;
	for (uint8_t i = 1; i < 6; ++i)
     55e:	8f 5f       	subi	r24, 0xFF	; 255
     560:	33 96       	adiw	r30, 0x03	; 3
     562:	86 30       	cpi	r24, 0x06	; 6
     564:	b1 f7       	brne	.-20     	; 0x552 <_ZN14Communications12stop_all_msgEP7MessageRj+0x6>
		messages[i - 1].address = i;
		messages[i - 1].first = 0;
		messages[i - 1].second = 0;
		++count;
	}
	size = count;
     566:	85 e0       	ldi	r24, 0x05	; 5
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	fa 01       	movw	r30, r20
     56c:	91 83       	std	Z+1, r25	; 0x01
     56e:	80 83       	st	Z, r24
     570:	08 95       	ret

00000572 <_ZN14Communications10create_msgEP7MessageRjhi>:
}

void Communications::create_msg (Message messages [], unsigned & size, uint8_t address, int speed)
{
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	fb 01       	movw	r30, r22
     57c:	32 96       	adiw	r30, 0x02	; 2
	unsigned count = 0;
	for (uint8_t i = 1; i < 6; ++i)
     57e:	81 e0       	ldi	r24, 0x01	; 1
	size = count;
}

void Communications::create_msg (Message messages [], unsigned & size, uint8_t address, int speed)
{
	unsigned count = 0;
     580:	a0 e0       	ldi	r26, 0x00	; 0
     582:	b0 e0       	ldi	r27, 0x00	; 0
	for (uint8_t i = 1; i < 6; ++i)
	{
		if (i == address)
     584:	82 17       	cp	r24, r18
     586:	39 f0       	breq	.+14     	; 0x596 <_ZN14Communications10create_msgEP7MessageRjhi+0x24>
     588:	ef 01       	movw	r28, r30
     58a:	22 97       	sbiw	r28, 0x02	; 2
			continue;
		messages[i - 1].address = i;
     58c:	88 83       	st	Y, r24
     58e:	21 96       	adiw	r28, 0x01	; 1
		messages[i - 1].first = 0;
     590:	18 82       	st	Y, r1
		messages[i - 1].second = 0;
     592:	10 82       	st	Z, r1
		++count;
     594:	11 96       	adiw	r26, 0x01	; 1
}

void Communications::create_msg (Message messages [], unsigned & size, uint8_t address, int speed)
{
	unsigned count = 0;
	for (uint8_t i = 1; i < 6; ++i)
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	33 96       	adiw	r30, 0x03	; 3
     59a:	86 30       	cpi	r24, 0x06	; 6
     59c:	99 f7       	brne	.-26     	; 0x584 <_ZN14Communications10create_msgEP7MessageRjhi+0x12>
		messages[i - 1].first = 0;
		messages[i - 1].second = 0;
		++count;
	}
	uint16_t unsigned_speed;
	if (speed < 0)
     59e:	11 23       	and	r17, r17
     5a0:	1c f4       	brge	.+6      	; 0x5a8 <_ZN14Communications10create_msgEP7MessageRjhi+0x36>
		unsigned_speed = ~(uint16_t)(speed * -1) + 1;
     5a2:	c0 2f       	mov	r28, r16
     5a4:	31 2f       	mov	r19, r17
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <_ZN14Communications10create_msgEP7MessageRjhi+0x3a>
	else
		unsigned_speed = (uint16_t)speed;
     5a8:	c0 2f       	mov	r28, r16
     5aa:	31 2f       	mov	r19, r17
	messages[address - 1].address = address;
     5ac:	82 2f       	mov	r24, r18
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	fc 01       	movw	r30, r24
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	8e 0f       	add	r24, r30
     5b8:	9f 1f       	adc	r25, r31
     5ba:	03 97       	sbiw	r24, 0x03	; 3
     5bc:	fb 01       	movw	r30, r22
     5be:	e8 0f       	add	r30, r24
     5c0:	f9 1f       	adc	r31, r25
     5c2:	20 83       	st	Z, r18
	messages[address - 1].first = unsigned_speed;
     5c4:	c1 83       	std	Z+1, r28	; 0x01
	messages[address - 1].second = unsigned_speed >> 8;
     5c6:	32 83       	std	Z+2, r19	; 0x02
	size = count + 1;
     5c8:	11 96       	adiw	r26, 0x01	; 1
     5ca:	fa 01       	movw	r30, r20
     5cc:	b1 83       	std	Z+1, r27	; 0x01
     5ce:	a0 83       	st	Z, r26
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	08 95       	ret

000005da <_ZN14Communications9estop_msgEP7MessageRj>:

void Communications::estop_msg (Message messages [], unsigned & size)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	eb 01       	movw	r28, r22
     5e0:	fb 01       	movw	r30, r22
     5e2:	32 96       	adiw	r30, 0x02	; 2
	unsigned count = 0;
	for (uint8_t i = 1; i < 6; ++i)
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	df 01       	movw	r26, r30
     5e8:	12 97       	sbiw	r26, 0x02	; 2
	{
		messages[i - 1].address = i;
     5ea:	8c 93       	st	X, r24
     5ec:	11 96       	adiw	r26, 0x01	; 1
		messages[i - 1].first = 0;
     5ee:	1c 92       	st	X, r1
		messages[i - 1].second = 0;
     5f0:	10 82       	st	Z, r1
}

void Communications::estop_msg (Message messages [], unsigned & size)
{
	unsigned count = 0;
	for (uint8_t i = 1; i < 6; ++i)
     5f2:	8f 5f       	subi	r24, 0xFF	; 255
     5f4:	33 96       	adiw	r30, 0x03	; 3
     5f6:	86 30       	cpi	r24, 0x06	; 6
     5f8:	b1 f7       	brne	.-20     	; 0x5e6 <_ZN14Communications9estop_msgEP7MessageRj+0xc>
		messages[i - 1].address = i;
		messages[i - 1].first = 0;
		messages[i - 1].second = 0;
		++count;
	}
	messages[6].address = MACRO_COMMAND;
     5fa:	88 e0       	ldi	r24, 0x08	; 8
     5fc:	8a 8b       	std	Y+18, r24	; 0x12
	messages[6].first = 0;
     5fe:	1b 8a       	std	Y+19, r1	; 0x13
	messages[6].second = 0;
     600:	1c 8a       	std	Y+20, r1	; 0x14
	size = count + 1;
     602:	86 e0       	ldi	r24, 0x06	; 6
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	fa 01       	movw	r30, r20
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
	memory->write(TRANSMIT_MACRO, 0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	88 e0       	ldi	r24, 0x08	; 8
     612:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <_ZN14Communications12joystick_msgEP7MessageRj>:

void Communications::joystick_msg (Message messages [], unsigned & size)
{
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	eb 01       	movw	r28, r22
     632:	8a 01       	movw	r16, r20
	static const double x_offset = 100;
	static const double y_offset = 50;
	static const double convert = 100.0 / 1023.0;
	static const uint16_t min_speed = 30;
	
	double x = (double)memory->read(JOYSTICK_LEFT_X);
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6Memory4readEh>
     63a:	bc 01       	movw	r22, r24
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 3c 14 	call	0x2878	; 0x2878 <__floatunsisf>
     644:	6b 01       	movw	r12, r22
     646:	7c 01       	movw	r14, r24
	double y = (double)memory->read(JOYSTICK_LEFT_Y);
     648:	81 e2       	ldi	r24, 0x21	; 33
     64a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6Memory4readEh>
     64e:	5c 01       	movw	r10, r24
	//uint16_t speed = memory->read(SLIDER_LEFT) * convert;
	speed = speed < min_speed ? min_speed : speed;
	
	uint16_t left_motor = 0;
	uint16_t right_motor = 0;
	if (x <= (center - x_offset))
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4e ec       	ldi	r20, 0xCE	; 206
     656:	53 e4       	ldi	r21, 0x43	; 67
     658:	c7 01       	movw	r24, r14
     65a:	b6 01       	movw	r22, r12
     65c:	0e 94 38 14 	call	0x2870	; 0x2870 <__cmpsf2>
     660:	18 16       	cp	r1, r24
     662:	44 f5       	brge	.+80     	; 0x6b4 <_ZN14Communications12joystick_msgEP7MessageRj+0x98>
	{
		left_motor = ~speed + 1;
		right_motor = speed;
	}
	else if (x > (center + x_offset))
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	49 e1       	ldi	r20, 0x19	; 25
     66a:	54 e4       	ldi	r21, 0x44	; 68
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 9d 14 	call	0x293a	; 0x293a <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	1c f1       	brlt	.+70     	; 0x6be <_ZN14Communications12joystick_msgEP7MessageRj+0xa2>
	static const double y_offset = 50;
	static const double convert = 100.0 / 1023.0;
	static const uint16_t min_speed = 30;
	
	double x = (double)memory->read(JOYSTICK_LEFT_X);
	double y = (double)memory->read(JOYSTICK_LEFT_Y);
     678:	b5 01       	movw	r22, r10
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 3c 14 	call	0x2878	; 0x2878 <__floatunsisf>
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
	else if (x > (center + x_offset))
	{
		left_motor = speed;
		right_motor = ~speed + 1;
	}
	else if (y < (center - y_offset))
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	47 ee       	ldi	r20, 0xE7	; 231
     68c:	53 e4       	ldi	r21, 0x43	; 67
     68e:	0e 94 38 14 	call	0x2870	; 0x2870 <__cmpsf2>
     692:	88 23       	and	r24, r24
     694:	cc f0       	brlt	.+50     	; 0x6c8 <_ZN14Communications12joystick_msgEP7MessageRj+0xac>
	{
		//left_motor = right_motor = ~speed + 1;
		left_motor = right_motor = speed;
	}
	else if (y > (center + y_offset))
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e8       	ldi	r19, 0x80	; 128
     69a:	4c e0       	ldi	r20, 0x0C	; 12
     69c:	54 e4       	ldi	r21, 0x44	; 68
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 9d 14 	call	0x293a	; 0x293a <__gesf2>
     6a6:	18 16       	cp	r1, r24
     6a8:	a4 f4       	brge	.+40     	; 0x6d2 <_ZN14Communications12joystick_msgEP7MessageRj+0xb6>
	{
		//left_motor = right_motor = speed;
		left_motor = right_motor = ~speed + 1;
     6aa:	2e ec       	ldi	r18, 0xCE	; 206
     6ac:	9f ef       	ldi	r25, 0xFF	; 255
     6ae:	4e ec       	ldi	r20, 0xCE	; 206
     6b0:	3f ef       	ldi	r19, 0xFF	; 255
     6b2:	13 c0       	rjmp	.+38     	; 0x6da <_ZN14Communications12joystick_msgEP7MessageRj+0xbe>
	uint16_t left_motor = 0;
	uint16_t right_motor = 0;
	if (x <= (center - x_offset))
	{
		left_motor = ~speed + 1;
		right_motor = speed;
     6b4:	22 e3       	ldi	r18, 0x32	; 50
     6b6:	90 e0       	ldi	r25, 0x00	; 0
	
	uint16_t left_motor = 0;
	uint16_t right_motor = 0;
	if (x <= (center - x_offset))
	{
		left_motor = ~speed + 1;
     6b8:	4e ec       	ldi	r20, 0xCE	; 206
     6ba:	3f ef       	ldi	r19, 0xFF	; 255
     6bc:	0e c0       	rjmp	.+28     	; 0x6da <_ZN14Communications12joystick_msgEP7MessageRj+0xbe>
		right_motor = speed;
	}
	else if (x > (center + x_offset))
	{
		left_motor = speed;
		right_motor = ~speed + 1;
     6be:	2e ec       	ldi	r18, 0xCE	; 206
     6c0:	9f ef       	ldi	r25, 0xFF	; 255
		left_motor = ~speed + 1;
		right_motor = speed;
	}
	else if (x > (center + x_offset))
	{
		left_motor = speed;
     6c2:	42 e3       	ldi	r20, 0x32	; 50
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	09 c0       	rjmp	.+18     	; 0x6da <_ZN14Communications12joystick_msgEP7MessageRj+0xbe>
		right_motor = ~speed + 1;
	}
	else if (y < (center - y_offset))
	{
		//left_motor = right_motor = ~speed + 1;
		left_motor = right_motor = speed;
     6c8:	22 e3       	ldi	r18, 0x32	; 50
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	42 e3       	ldi	r20, 0x32	; 50
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <_ZN14Communications12joystick_msgEP7MessageRj+0xbe>
	uint16_t speed = 50;
	//uint16_t speed = memory->read(SLIDER_LEFT) * convert;
	speed = speed < min_speed ? min_speed : speed;
	
	uint16_t left_motor = 0;
	uint16_t right_motor = 0;
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
	double y = (double)memory->read(JOYSTICK_LEFT_Y);
	uint16_t speed = 50;
	//uint16_t speed = memory->read(SLIDER_LEFT) * convert;
	speed = speed < min_speed ? min_speed : speed;
	
	uint16_t left_motor = 0;
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
	else if (y > (center + y_offset))
	{
		//left_motor = right_motor = speed;
		left_motor = right_motor = ~speed + 1;
	}
	messages[0].address = LEFT_MOTOR_SPEED;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	88 83       	st	Y, r24
	messages[0].first = left_motor;
     6de:	49 83       	std	Y+1, r20	; 0x01
	messages[0].second = left_motor >> 8;
     6e0:	3a 83       	std	Y+2, r19	; 0x02
	messages[1].address = RIGHT_MOTOR_SPEED;
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	8b 83       	std	Y+3, r24	; 0x03
	messages[1].first = right_motor;
     6e6:	2c 83       	std	Y+4, r18	; 0x04
	messages[1].second = right_motor >> 8;
     6e8:	9d 83       	std	Y+5, r25	; 0x05
	size = 2;
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	f8 01       	movw	r30, r16
     6f0:	91 83       	std	Z+1, r25	; 0x01
     6f2:	80 83       	st	Z, r24
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	08 95       	ret

0000070a <_ZN14Communications13bucket_up_msgEP7MessageRj>:

void Communications::bucket_up_msg (Message messages [], unsigned & size)
{
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
	create_msg(messages, size, BUCKET_ACTUATOR_SPEED, 20);
     70e:	04 e1       	ldi	r16, 0x14	; 20
     710:	10 e0       	ldi	r17, 0x00	; 0
     712:	24 e0       	ldi	r18, 0x04	; 4
     714:	2e df       	rcall	.-420    	; 0x572 <_ZN14Communications10create_msgEP7MessageRjhi>
}
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <_ZN14Communications15bucket_down_msgEP7MessageRj>:

void Communications::bucket_down_msg (Message messages [], unsigned & size)
{
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
	create_msg(messages, size, BUCKET_ACTUATOR_SPEED, -20);
     720:	0c ee       	ldi	r16, 0xEC	; 236
     722:	1f ef       	ldi	r17, 0xFF	; 255
     724:	24 e0       	ldi	r18, 0x04	; 4
     726:	25 df       	rcall	.-438    	; 0x572 <_ZN14Communications10create_msgEP7MessageRjhi>
}
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <_ZN14Communications10arm_up_msgEP7MessageRj>:

void Communications::arm_up_msg (Message messages [], unsigned & size)
{
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
	create_msg(messages, size, ARM_MOTOR_SPEED, 20);
     732:	04 e1       	ldi	r16, 0x14	; 20
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	23 e0       	ldi	r18, 0x03	; 3
     738:	1c df       	rcall	.-456    	; 0x572 <_ZN14Communications10create_msgEP7MessageRjhi>
}
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <_ZN14Communications12arm_down_msgEP7MessageRj>:

void Communications::arm_down_msg (Message messages [], unsigned & size)
{
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
	create_msg(messages, size, ARM_MOTOR_SPEED, -20);
     744:	0c ee       	ldi	r16, 0xEC	; 236
     746:	1f ef       	ldi	r17, 0xFF	; 255
     748:	23 e0       	ldi	r18, 0x03	; 3
     74a:	13 df       	rcall	.-474    	; 0x572 <_ZN14Communications10create_msgEP7MessageRjhi>
}
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <_ZN14Communications11plow_up_msgEP7MessageRj>:

void Communications::plow_up_msg (Message messages [], unsigned & size)
{
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
	create_msg(messages, size, PLOW_SPEED_DIRECTION, 50);
     756:	02 e3       	ldi	r16, 0x32	; 50
     758:	10 e0       	ldi	r17, 0x00	; 0
     75a:	25 e0       	ldi	r18, 0x05	; 5
     75c:	0a df       	rcall	.-492    	; 0x572 <_ZN14Communications10create_msgEP7MessageRjhi>
}
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	08 95       	ret

00000764 <_ZN14Communications13plow_down_msgEP7MessageRj>:

void Communications::plow_down_msg (Message messages [], unsigned & size)
{
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
	create_msg(messages, size, PLOW_SPEED_DIRECTION, -50);
     768:	0e ec       	ldi	r16, 0xCE	; 206
     76a:	1f ef       	ldi	r17, 0xFF	; 255
     76c:	25 e0       	ldi	r18, 0x05	; 5
     76e:	01 df       	rcall	.-510    	; 0x572 <_ZN14Communications10create_msgEP7MessageRjhi>
}
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <_ZN14Communications9macro_msgEP7MessageRjRK7Request>:

void Communications::macro_msg (Message messages [], unsigned & size, const Request & request)
{
     776:	fb 01       	movw	r30, r22
	uint16_t command = 0;
	uint16_t argument = 0;
	switch (request)
     778:	d9 01       	movw	r26, r18
     77a:	8c 91       	ld	r24, X
     77c:	8a 30       	cpi	r24, 0x0A	; 10
     77e:	59 f0       	breq	.+22     	; 0x796 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x20>
     780:	18 f4       	brcc	.+6      	; 0x788 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x12>
     782:	89 30       	cpi	r24, 0x09	; 9
     784:	31 f0       	breq	.+12     	; 0x792 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x1c>
     786:	0d c0       	rjmp	.+26     	; 0x7a2 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x2c>
     788:	8b 30       	cpi	r24, 0x0B	; 11
     78a:	39 f0       	breq	.+14     	; 0x79a <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x24>
     78c:	8c 30       	cpi	r24, 0x0C	; 12
     78e:	39 f0       	breq	.+14     	; 0x79e <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x28>
     790:	08 c0       	rjmp	.+16     	; 0x7a2 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x2c>
	{
		case MACRO_0:
		command = 0x0001;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x2e>
		argument = 0x0000;
		break;
		case MACRO_1:
		command = 0x0002;
     796:	82 e0       	ldi	r24, 0x02	; 2
		argument = 0x0000;
		break;
     798:	05 c0       	rjmp	.+10     	; 0x7a4 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x2e>
		case MACRO_2:
		command = 0x0003;
     79a:	83 e0       	ldi	r24, 0x03	; 3
		argument = 0x0000;
		break;
     79c:	03 c0       	rjmp	.+6      	; 0x7a4 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x2e>
		case MACRO_3:
		command = 0x0004;
     79e:	84 e0       	ldi	r24, 0x04	; 4
		argument = 0x0000;
		break;
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <_ZN14Communications9macro_msgEP7MessageRjRK7Request+0x2e>
	create_msg(messages, size, PLOW_SPEED_DIRECTION, -50);
}

void Communications::macro_msg (Message messages [], unsigned & size, const Request & request)
{
	uint16_t command = 0;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
		case MACRO_3:
		command = 0x0004;
		argument = 0x0000;
		break;
	}
	messages[0].address = MACRO_COMMAND;
     7a4:	98 e0       	ldi	r25, 0x08	; 8
     7a6:	90 83       	st	Z, r25
	messages[0].first = command;
     7a8:	81 83       	std	Z+1, r24	; 0x01
	messages[0].second = command >> 8;
     7aa:	12 82       	std	Z+2, r1	; 0x02
	messages[1].address = MACRO_ARGUMENT;
     7ac:	89 e0       	ldi	r24, 0x09	; 9
     7ae:	83 83       	std	Z+3, r24	; 0x03
	messages[1].first = argument;
     7b0:	14 82       	std	Z+4, r1	; 0x04
	messages[1].second = argument >> 8;
     7b2:	15 82       	std	Z+5, r1	; 0x05
	size = 2;
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	fa 01       	movw	r30, r20
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24
	memory->write(TRANSMIT_MACRO, (uint16_t)request);
     7be:	d9 01       	movw	r26, r18
     7c0:	6c 91       	ld	r22, X
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
     7ca:	08 95       	ret

000007cc <_ZN14Communications8transmitEv>:
      memory->write(msg.address, data);
  }
}

void Communications::transmit ()
{
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	c4 54       	subi	r28, 0x44	; 68
     7de:	d1 09       	sbc	r29, r1
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	8c 01       	movw	r16, r24
	const unsigned MAX_NUM_MESSAGES = 20;
	Message msgs [MAX_NUM_MESSAGES];
	unsigned num_messages = 0;
     7ec:	24 96       	adiw	r28, 0x04	; 4
     7ee:	1f ae       	std	Y+63, r1	; 0x3f
     7f0:	1e ae       	std	Y+62, r1	; 0x3e
     7f2:	24 97       	sbiw	r28, 0x04	; 4
	Request latest_request = (Request)memory->read(REQUEST);
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6Memory4readEh>
     7fa:	25 96       	adiw	r28, 0x05	; 5
     7fc:	8f af       	std	Y+63, r24	; 0x3f
     7fe:	25 97       	sbiw	r28, 0x05	; 5
	if (latest_request == EMERGENCY_STOP)
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	21 f5       	brne	.+72     	; 0x84c <_ZN14Communications8transmitEv+0x80>
	{
	  estop_msg(msgs, num_messages);
     804:	ae 01       	movw	r20, r28
     806:	4e 5b       	subi	r20, 0xBE	; 190
     808:	5f 4f       	sbci	r21, 0xFF	; 255
     80a:	be 01       	movw	r22, r28
     80c:	6a 5f       	subi	r22, 0xFA	; 250
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	c8 01       	movw	r24, r16
     812:	e3 de       	rcall	.-570    	; 0x5da <_ZN14Communications9estop_msgEP7MessageRj>
	  timeout.reset();
     814:	78 01       	movw	r14, r16
     816:	8f ec       	ldi	r24, 0xCF	; 207
     818:	e8 0e       	add	r14, r24
     81a:	f1 1c       	adc	r15, r1
     81c:	c7 01       	movw	r24, r14
     81e:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN12SimpleTimer15resetEv>
	  timeout.set_duration(1000); // reject all requests for 1 second
     822:	48 ee       	ldi	r20, 0xE8	; 232
     824:	53 e0       	ldi	r21, 0x03	; 3
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	c7 01       	movw	r24, r14
     82c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN12SimpleTimer112set_durationEm>
	  timeout.start();
     830:	c7 01       	movw	r24, r14
     832:	0e 94 df 10 	call	0x21be	; 0x21be <_ZN12SimpleTimer15startEv>
	  memory->write(MACRO_IN_PROGRESS, 0);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	86 e0       	ldi	r24, 0x06	; 6
     83c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
	  memory->write(TIMEOUT_IN_PROGRESS, 1);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	87 e0       	ldi	r24, 0x07	; 7
     846:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
     84a:	e0 c0       	rjmp	.+448    	; 0xa0c <_ZN14Communications8transmitEv+0x240>
	}
	else if (memory->read(TRANSMIT_MACRO))
     84c:	88 e0       	ldi	r24, 0x08	; 8
     84e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6Memory4readEh>
     852:	89 2b       	or	r24, r25
     854:	81 f0       	breq	.+32     	; 0x876 <_ZN14Communications8transmitEv+0xaa>
	{
		macro_msg(msgs, num_messages, (Request)memory->read(TRANSMIT_MACRO));
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6Memory4readEh>
     85c:	8d 83       	std	Y+5, r24	; 0x05
     85e:	9e 01       	movw	r18, r28
     860:	2b 5f       	subi	r18, 0xFB	; 251
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	ae 01       	movw	r20, r28
     866:	4e 5b       	subi	r20, 0xBE	; 190
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	be 01       	movw	r22, r28
     86c:	6a 5f       	subi	r22, 0xFA	; 250
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	c8 01       	movw	r24, r16
     872:	81 df       	rcall	.-254    	; 0x776 <_ZN14Communications9macro_msgEP7MessageRjRK7Request>
     874:	cb c0       	rjmp	.+406    	; 0xa0c <_ZN14Communications8transmitEv+0x240>
	}
	else if (timeout.is_finished() && !memory->read(MACRO_TYPE))
     876:	78 01       	movw	r14, r16
     878:	8f ec       	ldi	r24, 0xCF	; 207
     87a:	e8 0e       	add	r14, r24
     87c:	f1 1c       	adc	r15, r1
     87e:	c7 01       	movw	r24, r14
     880:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN12SimpleTimer111is_finishedEv>
     884:	88 23       	and	r24, r24
     886:	09 f4       	brne	.+2      	; 0x88a <_ZN14Communications8transmitEv+0xbe>
     888:	c1 c0       	rjmp	.+386    	; 0xa0c <_ZN14Communications8transmitEv+0x240>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6Memory4readEh>
     890:	89 2b       	or	r24, r25
     892:	09 f0       	breq	.+2      	; 0x896 <_ZN14Communications8transmitEv+0xca>
     894:	bb c0       	rjmp	.+374    	; 0xa0c <_ZN14Communications8transmitEv+0x240>
	{
		memory->write(TIMEOUT_IN_PROGRESS, 0);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	87 e0       	ldi	r24, 0x07	; 7
     89c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
		switch (latest_request)
     8a0:	25 96       	adiw	r28, 0x05	; 5
     8a2:	ef ad       	ldd	r30, Y+63	; 0x3f
     8a4:	25 97       	sbiw	r28, 0x05	; 5
     8a6:	4e 2f       	mov	r20, r30
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	fa 01       	movw	r30, r20
     8ac:	32 97       	sbiw	r30, 0x02	; 2
     8ae:	eb 30       	cpi	r30, 0x0B	; 11
     8b0:	f1 05       	cpc	r31, r1
     8b2:	08 f0       	brcs	.+2      	; 0x8b6 <_ZN14Communications8transmitEv+0xea>
     8b4:	7b c0       	rjmp	.+246    	; 0x9ac <_ZN14Communications8transmitEv+0x1e0>
     8b6:	ee 58       	subi	r30, 0x8E	; 142
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__tablejump2__>
		{
			case BUCKET_UP:      bucket_up_msg(msgs, num_messages);
     8be:	ae 01       	movw	r20, r28
     8c0:	4e 5b       	subi	r20, 0xBE	; 190
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
     8c4:	be 01       	movw	r22, r28
     8c6:	6a 5f       	subi	r22, 0xFA	; 250
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	c8 01       	movw	r24, r16
     8cc:	1e df       	rcall	.-452    	; 0x70a <_ZN14Communications13bucket_up_msgEP7MessageRj>
			when BUCKET_DOWN:    bucket_down_msg(msgs, num_messages);
     8ce:	76 c0       	rjmp	.+236    	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     8d0:	ae 01       	movw	r20, r28
     8d2:	4e 5b       	subi	r20, 0xBE	; 190
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	be 01       	movw	r22, r28
     8d8:	6a 5f       	subi	r22, 0xFA	; 250
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	c8 01       	movw	r24, r16
     8de:	1e df       	rcall	.-452    	; 0x71c <_ZN14Communications15bucket_down_msgEP7MessageRj>
			when ARM_UP:         arm_up_msg(msgs, num_messages);
     8e0:	6d c0       	rjmp	.+218    	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     8e2:	ae 01       	movw	r20, r28
     8e4:	4e 5b       	subi	r20, 0xBE	; 190
     8e6:	5f 4f       	sbci	r21, 0xFF	; 255
     8e8:	be 01       	movw	r22, r28
     8ea:	6a 5f       	subi	r22, 0xFA	; 250
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	c8 01       	movw	r24, r16
     8f0:	1e df       	rcall	.-452    	; 0x72e <_ZN14Communications10arm_up_msgEP7MessageRj>
			when ARM_DOWN:       arm_down_msg(msgs, num_messages);
     8f2:	64 c0       	rjmp	.+200    	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     8f4:	ae 01       	movw	r20, r28
     8f6:	4e 5b       	subi	r20, 0xBE	; 190
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	be 01       	movw	r22, r28
     8fc:	6a 5f       	subi	r22, 0xFA	; 250
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	c8 01       	movw	r24, r16
     902:	1e df       	rcall	.-452    	; 0x740 <_ZN14Communications12arm_down_msgEP7MessageRj>
			when PLOW_UP:        plow_up_msg(msgs, num_messages);
     904:	5b c0       	rjmp	.+182    	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     906:	ae 01       	movw	r20, r28
     908:	4e 5b       	subi	r20, 0xBE	; 190
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	be 01       	movw	r22, r28
     90e:	6a 5f       	subi	r22, 0xFA	; 250
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	c8 01       	movw	r24, r16
     914:	1e df       	rcall	.-452    	; 0x752 <_ZN14Communications11plow_up_msgEP7MessageRj>
			when PLOW_DOWN:      plow_down_msg(msgs, num_messages);
     916:	52 c0       	rjmp	.+164    	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     918:	ae 01       	movw	r20, r28
     91a:	4e 5b       	subi	r20, 0xBE	; 190
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	be 01       	movw	r22, r28
     920:	6a 5f       	subi	r22, 0xFA	; 250
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	c8 01       	movw	r24, r16
     926:	1e df       	rcall	.-452    	; 0x764 <_ZN14Communications13plow_down_msgEP7MessageRj>

			// Macros
			when MACRO_0:        macro_msg(msgs, num_messages, MACRO_0);
     928:	49 c0       	rjmp	.+146    	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	8c 83       	std	Y+4, r24	; 0x04
     92e:	9e 01       	movw	r18, r28
     930:	2c 5f       	subi	r18, 0xFC	; 252
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	ae 01       	movw	r20, r28
     936:	4e 5b       	subi	r20, 0xBE	; 190
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	be 01       	movw	r22, r28
     93c:	6a 5f       	subi	r22, 0xFA	; 250
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	c8 01       	movw	r24, r16
     942:	19 df       	rcall	.-462    	; 0x776 <_ZN14Communications9macro_msgEP7MessageRjRK7Request>
			when MACRO_1:        macro_msg(msgs, num_messages, MACRO_1);
     944:	3b c0       	rjmp	.+118    	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     946:	8a e0       	ldi	r24, 0x0A	; 10
     948:	8b 83       	std	Y+3, r24	; 0x03
     94a:	9e 01       	movw	r18, r28
     94c:	2d 5f       	subi	r18, 0xFD	; 253
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	ae 01       	movw	r20, r28
     952:	4e 5b       	subi	r20, 0xBE	; 190
     954:	5f 4f       	sbci	r21, 0xFF	; 255
     956:	be 01       	movw	r22, r28
     958:	6a 5f       	subi	r22, 0xFA	; 250
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	c8 01       	movw	r24, r16
     95e:	0b df       	rcall	.-490    	; 0x776 <_ZN14Communications9macro_msgEP7MessageRjRK7Request>
			when MACRO_2:        macro_msg(msgs, num_messages, MACRO_2);
     960:	2d c0       	rjmp	.+90     	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     962:	8b e0       	ldi	r24, 0x0B	; 11
     964:	8a 83       	std	Y+2, r24	; 0x02
     966:	9e 01       	movw	r18, r28
     968:	2e 5f       	subi	r18, 0xFE	; 254
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	ae 01       	movw	r20, r28
     96e:	4e 5b       	subi	r20, 0xBE	; 190
     970:	5f 4f       	sbci	r21, 0xFF	; 255
     972:	be 01       	movw	r22, r28
     974:	6a 5f       	subi	r22, 0xFA	; 250
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	c8 01       	movw	r24, r16
     97a:	fd de       	rcall	.-518    	; 0x776 <_ZN14Communications9macro_msgEP7MessageRjRK7Request>
			when MACRO_3:        macro_msg(msgs, num_messages, MACRO_3);
     97c:	1f c0       	rjmp	.+62     	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     97e:	8c e0       	ldi	r24, 0x0C	; 12
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	9e 01       	movw	r18, r28
     984:	2f 5f       	subi	r18, 0xFF	; 255
     986:	3f 4f       	sbci	r19, 0xFF	; 255
     988:	ae 01       	movw	r20, r28
     98a:	4e 5b       	subi	r20, 0xBE	; 190
     98c:	5f 4f       	sbci	r21, 0xFF	; 255
     98e:	be 01       	movw	r22, r28
     990:	6a 5f       	subi	r22, 0xFA	; 250
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	c8 01       	movw	r24, r16
     996:	ef de       	rcall	.-546    	; 0x776 <_ZN14Communications9macro_msgEP7MessageRjRK7Request>

			// Joystick
			when JOYSTICK:       joystick_msg(msgs, num_messages);
     998:	11 c0       	rjmp	.+34     	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     99a:	ae 01       	movw	r20, r28
     99c:	4e 5b       	subi	r20, 0xBE	; 190
     99e:	5f 4f       	sbci	r21, 0xFF	; 255
     9a0:	be 01       	movw	r22, r28
     9a2:	6a 5f       	subi	r22, 0xFA	; 250
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255
     9a6:	c8 01       	movw	r24, r16
     9a8:	39 de       	rcall	.-910    	; 0x61c <_ZN14Communications12joystick_msgEP7MessageRj>
			otherwise:           stop_all_msg(msgs, num_messages);
     9aa:	08 c0       	rjmp	.+16     	; 0x9bc <_ZN14Communications8transmitEv+0x1f0>
     9ac:	ae 01       	movw	r20, r28
     9ae:	4e 5b       	subi	r20, 0xBE	; 190
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	be 01       	movw	r22, r28
     9b4:	6a 5f       	subi	r22, 0xFA	; 250
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	c8 01       	movw	r24, r16
     9ba:	c8 dd       	rcall	.-1136   	; 0x54c <_ZN14Communications12stop_all_msgEP7MessageRj>
		}
		if (get_push_button_index(latest_request) >= 0)
     9bc:	ce 01       	movw	r24, r28
     9be:	8c 5b       	subi	r24, 0xBC	; 188
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	1a d1       	rcall	.+564    	; 0xbf8 <_Z21get_push_button_indexRK7Request>
     9c4:	99 23       	and	r25, r25
     9c6:	c4 f0       	brlt	.+48     	; 0x9f8 <_ZN14Communications8transmitEv+0x22c>
		{
			// reject other requests for one second
			timeout.reset();
     9c8:	c7 01       	movw	r24, r14
     9ca:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN12SimpleTimer15resetEv>
			timeout.set_duration(1000);
     9ce:	48 ee       	ldi	r20, 0xE8	; 232
     9d0:	53 e0       	ldi	r21, 0x03	; 3
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	c7 01       	movw	r24, r14
     9d8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN12SimpleTimer112set_durationEm>
			timeout.start();
     9dc:	c7 01       	movw	r24, r14
     9de:	0e 94 df 10 	call	0x21be	; 0x21be <_ZN12SimpleTimer15startEv>
			memory->write(MACRO_IN_PROGRESS, 1);
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	86 e0       	ldi	r24, 0x06	; 6
     9e8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
			memory->write(TIMEOUT_IN_PROGRESS, 1);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
     9f6:	0a c0       	rjmp	.+20     	; 0xa0c <_ZN14Communications8transmitEv+0x240>
		}
		else
		{
			memory->write(MACRO_IN_PROGRESS, 0);
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	86 e0       	ldi	r24, 0x06	; 6
     9fe:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
			memory->write(TIMEOUT_IN_PROGRESS, 0);
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	87 e0       	ldi	r24, 0x07	; 7
     a08:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN6Memory5writeEhj>
	}
  /*
	for (unsigned i = 0; i < num_messages; ++i)
	  send(msgs[i]);
  */
  send (msgs, num_messages);
     a0c:	23 96       	adiw	r28, 0x03	; 3
     a0e:	4f ad       	ldd	r20, Y+63	; 0x3f
     a10:	23 97       	sbiw	r28, 0x03	; 3
     a12:	be 01       	movw	r22, r28
     a14:	6a 5f       	subi	r22, 0xFA	; 250
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
     a18:	c8 01       	movw	r24, r16
     a1a:	c6 dc       	rcall	.-1652   	; 0x3a8 <_ZN14Communications4sendEPK7Messageh>
}
     a1c:	cc 5b       	subi	r28, 0xBC	; 188
     a1e:	df 4f       	sbci	r29, 0xFF	; 255
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	08 95       	ret

00000a38 <_ZN12MessageQueueC1Ev>:
}

bool MessageQueue::full () const
{
  return message_count >= SIZE;
}
     a38:	fc 01       	movw	r30, r24
     a3a:	10 82       	st	Z, r1
     a3c:	11 82       	std	Z+1, r1	; 0x01
     a3e:	12 82       	std	Z+2, r1	; 0x02
     a40:	08 95       	ret

00000a42 <_ZN12MessageQueue4pushERK7Message>:
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	dc 01       	movw	r26, r24
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	2c 91       	ld	r18, X
     a4c:	11 97       	sbiw	r26, 0x01	; 1
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	82 0f       	add	r24, r18
     a52:	11 96       	adiw	r26, 0x01	; 1
     a54:	8c 93       	st	X, r24
     a56:	11 97       	sbiw	r26, 0x01	; 1
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	f9 01       	movw	r30, r18
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	2e 0f       	add	r18, r30
     a66:	3f 1f       	adc	r19, r31
     a68:	fd 01       	movw	r30, r26
     a6a:	e2 0f       	add	r30, r18
     a6c:	f3 1f       	adc	r31, r19
     a6e:	eb 01       	movw	r28, r22
     a70:	28 81       	ld	r18, Y
     a72:	39 81       	ldd	r19, Y+1	; 0x01
     a74:	4a 81       	ldd	r20, Y+2	; 0x02
     a76:	20 83       	st	Z, r18
     a78:	31 83       	std	Z+1, r19	; 0x01
     a7a:	42 83       	std	Z+2, r20	; 0x02
     a7c:	82 33       	cpi	r24, 0x32	; 50
     a7e:	18 f0       	brcs	.+6      	; 0xa86 <_ZN12MessageQueue4pushERK7Message+0x44>
     a80:	11 96       	adiw	r26, 0x01	; 1
     a82:	1c 92       	st	X, r1
     a84:	11 97       	sbiw	r26, 0x01	; 1
     a86:	12 96       	adiw	r26, 0x02	; 2
     a88:	8c 91       	ld	r24, X
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	8c 93       	st	X, r24
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <_ZN12MessageQueue3popEv>:
     a98:	dc 01       	movw	r26, r24
     a9a:	9c 91       	ld	r25, X
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	89 0f       	add	r24, r25
     aa0:	29 2f       	mov	r18, r25
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	82 33       	cpi	r24, 0x32	; 50
     aa6:	10 f4       	brcc	.+4      	; 0xaac <_ZN12MessageQueue3popEv+0x14>
     aa8:	8c 93       	st	X, r24
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <_ZN12MessageQueue3popEv+0x16>
     aac:	1c 92       	st	X, r1
     aae:	12 96       	adiw	r26, 0x02	; 2
     ab0:	8c 91       	ld	r24, X
     ab2:	12 97       	sbiw	r26, 0x02	; 2
     ab4:	81 50       	subi	r24, 0x01	; 1
     ab6:	12 96       	adiw	r26, 0x02	; 2
     ab8:	8c 93       	st	X, r24
     aba:	12 97       	sbiw	r26, 0x02	; 2
     abc:	2f 5f       	subi	r18, 0xFF	; 255
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	f9 01       	movw	r30, r18
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	2e 0f       	add	r18, r30
     ac8:	3f 1f       	adc	r19, r31
     aca:	fd 01       	movw	r30, r26
     acc:	e2 0f       	add	r30, r18
     ace:	f3 1f       	adc	r31, r19
     ad0:	60 81       	ld	r22, Z
     ad2:	71 81       	ldd	r23, Z+1	; 0x01
     ad4:	82 81       	ldd	r24, Z+2	; 0x02
     ad6:	08 95       	ret

00000ad8 <_ZNK12MessageQueue5countEv>:

uint8_t MessageQueue::count () const
{
  return message_count;
     ad8:	fc 01       	movw	r30, r24
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	08 95       	ret

00000ade <_ZN18FastTransferParserC1Ev>:


uint8_t FastTransferParser::size () const
{
  return index;
}
     ade:	fc 01       	movw	r30, r24
     ae0:	12 aa       	std	Z+50, r1	; 0x32
     ae2:	08 95       	ret

00000ae4 <_ZN18FastTransferParser4pushEh>:
     ae4:	fc 01       	movw	r30, r24
     ae6:	22 a9       	ldd	r18, Z+50	; 0x32
     ae8:	21 11       	cpse	r18, r1
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <_ZN18FastTransferParser4pushEh+0xc>
     aec:	66 30       	cpi	r22, 0x06	; 6
     aee:	39 f4       	brne	.+14     	; 0xafe <_ZN18FastTransferParser4pushEh+0x1a>
     af0:	31 e0       	ldi	r19, 0x01	; 1
     af2:	32 0f       	add	r19, r18
     af4:	fc 01       	movw	r30, r24
     af6:	32 ab       	std	Z+50, r19	; 0x32
     af8:	e2 0f       	add	r30, r18
     afa:	f1 1d       	adc	r31, r1
     afc:	60 83       	st	Z, r22
     afe:	08 95       	ret

00000b00 <_ZNK18FastTransferParser7is_fullEv>:
     b00:	21 e0       	ldi	r18, 0x01	; 1
     b02:	fc 01       	movw	r30, r24
     b04:	82 a9       	ldd	r24, Z+50	; 0x32
     b06:	82 33       	cpi	r24, 0x32	; 50
     b08:	08 f4       	brcc	.+2      	; 0xb0c <_ZNK18FastTransferParser7is_fullEv+0xc>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	82 2f       	mov	r24, r18
     b0e:	08 95       	ret

00000b10 <_ZN18FastTransferParser5clearEv>:

void FastTransferParser::clear ()
{
  index = 0;
     b10:	fc 01       	movw	r30, r24
     b12:	12 aa       	std	Z+50, r1	; 0x32
     b14:	08 95       	ret

00000b16 <_ZNK18FastTransferParser11get_messageEh>:
}

Message FastTransferParser::get_message (uint8_t i) const
{
  uint8_t index = Message::DATA_INDEX + i * Message::LENGTH;
     b16:	26 2f       	mov	r18, r22
     b18:	22 0f       	add	r18, r18
     b1a:	62 0f       	add	r22, r18
     b1c:	6b 5f       	subi	r22, 0xFB	; 251
  Message msg;
  msg.address = buffer[index];
  msg.first = buffer[index + 1];
     b1e:	fc 01       	movw	r30, r24
     b20:	e6 0f       	add	r30, r22
     b22:	f1 1d       	adc	r31, r1
     b24:	71 81       	ldd	r23, Z+1	; 0x01
  msg.second = buffer[index + 2];
  return msg;
     b26:	60 81       	ld	r22, Z
}
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	08 95       	ret

00000b2c <_ZNK18FastTransferParser10verify_crcEv>:
    return 0;
  return buffer[Message::COUNT_INDEX] / Message::LENGTH;
}

bool FastTransferParser::verify_crc () const
{
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	7c 01       	movw	r14, r24
}


uint8_t FastTransferParser::size () const
{
  return index;
     b3a:	fc 01       	movw	r30, r24
     b3c:	c2 a9       	ldd	r28, Z+50	; 0x32

bool FastTransferParser::verify_crc () const
{
  const uint8_t CRC_POLYNOMIAL = 0x8C;
  uint8_t crc = 0;
  for (int i = 5; i < size() - 1; ++i)
     b3e:	0c 2f       	mov	r16, r28
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	01 50       	subi	r16, 0x01	; 1
     b44:	11 09       	sbc	r17, r1
     b46:	06 30       	cpi	r16, 0x06	; 6
     b48:	11 05       	cpc	r17, r1
     b4a:	fc f0       	brlt	.+62     	; 0xb8a <_ZNK18FastTransferParser10verify_crcEv+0x5e>
     b4c:	dc 01       	movw	r26, r24
     b4e:	15 96       	adiw	r26, 0x05	; 5
     b50:	e8 01       	movw	r28, r16
     b52:	c8 0f       	add	r28, r24
     b54:	d9 1f       	adc	r29, r25
     b56:	90 e0       	ldi	r25, 0x00	; 0
  {
    uint8_t data = buffer[i];
     b58:	88 e0       	ldi	r24, 0x08	; 8
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
    for (int j = 0; j < 8; ++j)
    {
      uint8_t sum = (crc ^ data) & 0x01;
      crc >>= 1;
      if (sum)
        crc ^= CRC_POLYNOMIAL;
     b5c:	ec e8       	ldi	r30, 0x8C	; 140
{
  const uint8_t CRC_POLYNOMIAL = 0x8C;
  uint8_t crc = 0;
  for (int i = 5; i < size() - 1; ++i)
  {
    uint8_t data = buffer[i];
     b5e:	6d 91       	ld	r22, X+
     b60:	48 2f       	mov	r20, r24
     b62:	5f 2f       	mov	r21, r31
    for (int j = 0; j < 8; ++j)
    {
      uint8_t sum = (crc ^ data) & 0x01;
     b64:	76 2f       	mov	r23, r22
     b66:	79 27       	eor	r23, r25
      crc >>= 1;
     b68:	29 2f       	mov	r18, r25
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	35 95       	asr	r19
     b6e:	27 95       	ror	r18
     b70:	92 2f       	mov	r25, r18
      if (sum)
     b72:	70 ff       	sbrs	r23, 0
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <_ZNK18FastTransferParser10verify_crcEv+0x4e>
        crc ^= CRC_POLYNOMIAL;
     b76:	9e 2f       	mov	r25, r30
     b78:	92 27       	eor	r25, r18
      data >>= 1;
     b7a:	66 95       	lsr	r22
     b7c:	41 50       	subi	r20, 0x01	; 1
     b7e:	51 09       	sbc	r21, r1
  const uint8_t CRC_POLYNOMIAL = 0x8C;
  uint8_t crc = 0;
  for (int i = 5; i < size() - 1; ++i)
  {
    uint8_t data = buffer[i];
    for (int j = 0; j < 8; ++j)
     b80:	89 f7       	brne	.-30     	; 0xb64 <_ZNK18FastTransferParser10verify_crcEv+0x38>

bool FastTransferParser::verify_crc () const
{
  const uint8_t CRC_POLYNOMIAL = 0x8C;
  uint8_t crc = 0;
  for (int i = 5; i < size() - 1; ++i)
     b82:	ac 17       	cp	r26, r28
     b84:	bd 07       	cpc	r27, r29
     b86:	59 f7       	brne	.-42     	; 0xb5e <_ZNK18FastTransferParser10verify_crcEv+0x32>
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <_ZNK18FastTransferParser10verify_crcEv+0x60>
}

bool FastTransferParser::verify_crc () const
{
  const uint8_t CRC_POLYNOMIAL = 0x8C;
  uint8_t crc = 0;
     b8a:	90 e0       	ldi	r25, 0x00	; 0
      if (sum)
        crc ^= CRC_POLYNOMIAL;
      data >>= 1;
    }
  }
  return crc == buffer[size() - 1];
     b8c:	f7 01       	movw	r30, r14
     b8e:	e0 0f       	add	r30, r16
     b90:	f1 1f       	adc	r31, r17
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	20 81       	ld	r18, Z
     b96:	29 13       	cpse	r18, r25
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	08 95       	ret

00000ba8 <_ZNK18FastTransferParser14valid_messagesEv>:
}


uint8_t FastTransferParser::size () const
{
  return index;
     ba8:	fc 01       	movw	r30, r24
     baa:	22 a9       	ldd	r18, Z+50	; 0x32


bool FastTransferParser::valid_messages () const
{
  // Verify that the size is at least the minimum
  if (size() < MINIMUM_SIZE)
     bac:	26 30       	cpi	r18, 0x06	; 6
     bae:	68 f0       	brcs	.+26     	; 0xbca <_ZNK18FastTransferParser14valid_messagesEv+0x22>
    return false;

  // Verify that the receiver address matches argument
  if (buffer[2] != 0x01)
     bb0:	32 81       	ldd	r19, Z+2	; 0x02
     bb2:	31 30       	cpi	r19, 0x01	; 1
     bb4:	61 f4       	brne	.+24     	; 0xbce <_ZNK18FastTransferParser14valid_messagesEv+0x26>
    return false;

  // Verify that the overall size makes sense according to the packet size
  if (buffer[4] + MINIMUM_SIZE != size())
     bb6:	44 81       	ldd	r20, Z+4	; 0x04
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	4a 5f       	subi	r20, 0xFA	; 250
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	42 17       	cp	r20, r18
     bc2:	53 07       	cpc	r21, r19
     bc4:	31 f4       	brne	.+12     	; 0xbd2 <_ZNK18FastTransferParser14valid_messagesEv+0x2a>
    return false;

  return verify_crc();
     bc6:	b2 cf       	rjmp	.-156    	; 0xb2c <_ZNK18FastTransferParser10verify_crcEv>
     bc8:	08 95       	ret

bool FastTransferParser::valid_messages () const
{
  // Verify that the size is at least the minimum
  if (size() < MINIMUM_SIZE)
    return false;
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	08 95       	ret

  // Verify that the receiver address matches argument
  if (buffer[2] != 0x01)
    return false;
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	08 95       	ret

  // Verify that the overall size makes sense according to the packet size
  if (buffer[4] + MINIMUM_SIZE != size())
    return false;
     bd2:	80 e0       	ldi	r24, 0x00	; 0

  return verify_crc();
}
     bd4:	08 95       	ret

00000bd6 <_ZNK18FastTransferParser12num_messagesEv>:
  msg.second = buffer[index + 2];
  return msg;
}

uint8_t FastTransferParser::num_messages () const
{
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	ec 01       	movw	r28, r24
  if (!valid_messages())
     bdc:	e5 df       	rcall	.-54     	; 0xba8 <_ZNK18FastTransferParser14valid_messagesEv>
     bde:	88 23       	and	r24, r24
     be0:	39 f0       	breq	.+14     	; 0xbf0 <_ZNK18FastTransferParser12num_messagesEv+0x1a>
    return 0;
  return buffer[Message::COUNT_INDEX] / Message::LENGTH;
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	9b ea       	ldi	r25, 0xAB	; 171
     be6:	89 9f       	mul	r24, r25
     be8:	81 2d       	mov	r24, r1
     bea:	11 24       	eor	r1, r1
     bec:	86 95       	lsr	r24
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <_ZNK18FastTransferParser12num_messagesEv+0x1c>
}

uint8_t FastTransferParser::num_messages () const
{
  if (!valid_messages())
    return 0;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
  return buffer[Message::COUNT_INDEX] / Message::LENGTH;
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_Z21get_push_button_indexRK7Request>:

int get_push_button_index (const Request & request)
{
  int index = -1;
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
    if (PUSH_BUTTON_REQUESTS[i] == request)
     bf8:	fc 01       	movw	r30, r24
     bfa:	50 81       	ld	r21, Z
     bfc:	e1 e4       	ldi	r30, 0x41	; 65
     bfe:	f2 e0       	ldi	r31, 0x02	; 2
#include "request.hpp"

int get_push_button_index (const Request & request)
{
  int index = -1;
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
#include "request.hpp"

int get_push_button_index (const Request & request)
{
  int index = -1;
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	9f ef       	ldi	r25, 0xFF	; 255
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
    if (PUSH_BUTTON_REQUESTS[i] == request)
     c08:	41 91       	ld	r20, Z+
     c0a:	45 13       	cpse	r20, r21
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <_Z21get_push_button_indexRK7Request+0x1a>
     c0e:	82 2f       	mov	r24, r18
     c10:	93 2f       	mov	r25, r19
#include "request.hpp"

int get_push_button_index (const Request & request)
{
  int index = -1;
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
     c12:	2f 5f       	subi	r18, 0xFF	; 255
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
     c16:	20 31       	cpi	r18, 0x10	; 16
     c18:	31 05       	cpc	r19, r1
     c1a:	b1 f7       	brne	.-20     	; 0xc08 <_Z21get_push_button_indexRK7Request+0x10>
    if (PUSH_BUTTON_REQUESTS[i] == request)
      index = i;
  return index;
     c1c:	08 95       	ret

00000c1e <_ZN16ControlBoxEngine10initializeEv>:

#define F_CPU 16000000UL
#include <util/delay.h>

void ControlBoxEngine::initialize ()
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
  sei();
     c24:	78 94       	sei
  memory.initialize();
     c26:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN6Memory10initializeEv>
  inputs.initialize(&memory);
     c2a:	be 01       	movw	r22, r28
     c2c:	ce 01       	movw	r24, r28
     c2e:	8f 52       	subi	r24, 0x2F	; 47
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	f8 d2       	rcall	.+1520   	; 0x1224 <_ZN12InputHandler10initializeEP6Memory>
  outputs.initialize(&memory);
     c34:	be 01       	movw	r22, r28
     c36:	ce 01       	movw	r24, r28
     c38:	8b 59       	subi	r24, 0x9B	; 155
     c3a:	9e 4f       	sbci	r25, 0xFE	; 254
     c3c:	c5 d4       	rcall	.+2442   	; 0x15c8 <_ZN13OutputHandler10initializeEP6Memory>
  communications.initialize(UART_1, &memory);
     c3e:	ae 01       	movw	r20, r28
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	ce 01       	movw	r24, r28
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	36 db       	rcall	.-2452   	; 0x2b4 <_ZN14Communications10initializeE11UART_MODULEP6Memory>
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <_ZN16ControlBoxEngine4loopEv>:

void ControlBoxEngine::loop ()
{
     c4e:	8c 01       	movw	r16, r24
  outputs.startup();
     c50:	7c 01       	movw	r14, r24
     c52:	8b e9       	ldi	r24, 0x9B	; 155
     c54:	e8 1a       	sub	r14, r24
     c56:	8e ef       	ldi	r24, 0xFE	; 254
     c58:	f8 0a       	sbc	r15, r24
     c5a:	c7 01       	movw	r24, r14
     c5c:	e8 d5       	rcall	.+3024   	; 0x182e <_ZN13OutputHandler7startupEv>
  while (1)
  {
    communications.receive();
     c5e:	e8 01       	movw	r28, r16
     c60:	21 96       	adiw	r28, 0x01	; 1
    inputs.poll();
     c62:	0f 52       	subi	r16, 0x2F	; 47
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
void ControlBoxEngine::loop ()
{
  outputs.startup();
  while (1)
  {
    communications.receive();
     c66:	ce 01       	movw	r24, r28
     c68:	42 dc       	rcall	.-1916   	; 0x4ee <_ZN14Communications7receiveEv>
    inputs.poll();
     c6a:	c8 01       	movw	r24, r16
     c6c:	bb d3       	rcall	.+1910   	; 0x13e4 <_ZN12InputHandler4pollEv>
    communications.transmit();
     c6e:	ce 01       	movw	r24, r28
     c70:	ad dd       	rcall	.-1190   	; 0x7cc <_ZN14Communications8transmitEv>
    outputs.refresh();
     c72:	c7 01       	movw	r24, r14
     c74:	62 d5       	rcall	.+2756   	; 0x173a <_ZN13OutputHandler7refreshEv>
  inputs.initialize(&memory);
  outputs.initialize(&memory);
  communications.initialize(UART_1, &memory);
}

void ControlBoxEngine::loop ()
     c76:	f7 cf       	rjmp	.-18     	; 0xc66 <_ZN16ControlBoxEngine4loopEv+0x18>

00000c78 <_ZL12DDR_REGISTER4Port>:
}

bool DigitalPin::is_high ()
{
  return read();
}
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	8b 30       	cpi	r24, 0x0B	; 11
     c7c:	91 05       	cpc	r25, r1
     c7e:	18 f5       	brcc	.+70     	; 0xcc6 <_ZL12DDR_REGISTER4Port+0x4e>
     c80:	fc 01       	movw	r30, r24
     c82:	e3 58       	subi	r30, 0x83	; 131
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__tablejump2__>
     c8a:	84 e2       	ldi	r24, 0x24	; 36
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	08 95       	ret
     c90:	87 e2       	ldi	r24, 0x27	; 39
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	08 95       	ret
     c96:	8a e2       	ldi	r24, 0x2A	; 42
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	08 95       	ret
     c9c:	8d e2       	ldi	r24, 0x2D	; 45
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	08 95       	ret
     ca2:	80 e3       	ldi	r24, 0x30	; 48
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	08 95       	ret
     ca8:	83 e3       	ldi	r24, 0x33	; 51
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	08 95       	ret
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	08 95       	ret
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	08 95       	ret
     cba:	87 e0       	ldi	r24, 0x07	; 7
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	08 95       	ret
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	08 95       	ret
     cc6:	8b e6       	ldi	r24, 0x6B	; 107
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	08 95       	ret
     ccc:	81 e2       	ldi	r24, 0x21	; 33
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	08 95       	ret

00000cd2 <_ZL13PORT_REGISTER4Port>:
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	8b 30       	cpi	r24, 0x0B	; 11
     cd6:	91 05       	cpc	r25, r1
     cd8:	18 f5       	brcc	.+70     	; 0xd20 <_ZL13PORT_REGISTER4Port+0x4e>
     cda:	fc 01       	movw	r30, r24
     cdc:	e8 57       	subi	r30, 0x78	; 120
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__tablejump2__>
     ce4:	85 e2       	ldi	r24, 0x25	; 37
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	08 95       	ret
     cea:	88 e2       	ldi	r24, 0x28	; 40
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	08 95       	ret
     cf0:	8b e2       	ldi	r24, 0x2B	; 43
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	08 95       	ret
     cf6:	8e e2       	ldi	r24, 0x2E	; 46
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	08 95       	ret
     cfc:	81 e3       	ldi	r24, 0x31	; 49
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	08 95       	ret
     d02:	84 e3       	ldi	r24, 0x34	; 52
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	08 95       	ret
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	08 95       	ret
     d0e:	85 e0       	ldi	r24, 0x05	; 5
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	08 95       	ret
     d14:	88 e0       	ldi	r24, 0x08	; 8
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	08 95       	ret
     d1a:	8b e0       	ldi	r24, 0x0B	; 11
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	08 95       	ret
     d20:	8b e6       	ldi	r24, 0x6B	; 107
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	08 95       	ret
     d26:	82 e2       	ldi	r24, 0x22	; 34
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	08 95       	ret

00000d2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>:
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	fc 01       	movw	r30, r24
     d36:	c6 2f       	mov	r28, r22
     d38:	d4 2f       	mov	r29, r20
     d3a:	60 83       	st	Z, r22
     d3c:	41 83       	std	Z+1, r20	; 0x01
     d3e:	22 83       	std	Z+2, r18	; 0x02
     d40:	21 11       	cpse	r18, r1
     d42:	16 c0       	rjmp	.+44     	; 0xd70 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x44>
     d44:	86 2f       	mov	r24, r22
     d46:	98 df       	rcall	.-208    	; 0xc78 <_ZL12DDR_REGISTER4Port>
     d48:	fc 01       	movw	r30, r24
     d4a:	90 81       	ld	r25, Z
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x2a>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	da 95       	dec	r29
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x26>
     d5a:	d2 2f       	mov	r29, r18
     d5c:	d0 95       	com	r29
     d5e:	9d 23       	and	r25, r29
     d60:	90 83       	st	Z, r25
     d62:	8c 2f       	mov	r24, r28
     d64:	b6 df       	rcall	.-148    	; 0xcd2 <_ZL13PORT_REGISTER4Port>
     d66:	fc 01       	movw	r30, r24
     d68:	20 81       	ld	r18, Z
     d6a:	2d 23       	and	r18, r29
     d6c:	20 83       	st	Z, r18
     d6e:	25 c0       	rjmp	.+74     	; 0xdba <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	b1 f4       	brne	.+44     	; 0xda0 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x74>
     d74:	86 2f       	mov	r24, r22
     d76:	80 df       	rcall	.-256    	; 0xc78 <_ZL12DDR_REGISTER4Port>
     d78:	fc 01       	movw	r30, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	01 e0       	ldi	r16, 0x01	; 1
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x5a>
     d82:	00 0f       	add	r16, r16
     d84:	11 1f       	adc	r17, r17
     d86:	da 95       	dec	r29
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x56>
     d8a:	90 2f       	mov	r25, r16
     d8c:	90 95       	com	r25
     d8e:	98 23       	and	r25, r24
     d90:	90 83       	st	Z, r25
     d92:	8c 2f       	mov	r24, r28
     d94:	9e df       	rcall	.-196    	; 0xcd2 <_ZL13PORT_REGISTER4Port>
     d96:	fc 01       	movw	r30, r24
     d98:	20 81       	ld	r18, Z
     d9a:	02 2b       	or	r16, r18
     d9c:	00 83       	st	Z, r16
     d9e:	0d c0       	rjmp	.+26     	; 0xdba <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x8e>
     da0:	86 2f       	mov	r24, r22
     da2:	6a df       	rcall	.-300    	; 0xc78 <_ZL12DDR_REGISTER4Port>
     da4:	fc 01       	movw	r30, r24
     da6:	40 81       	ld	r20, Z
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x86>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	da 95       	dec	r29
     db4:	e2 f7       	brpl	.-8      	; 0xdae <_ZN10DigitalPin10initializeE4Port3Pin4Mode+0x82>
     db6:	24 2b       	or	r18, r20
     db8:	20 83       	st	Z, r18
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <_ZN10DigitalPin5writeEb>:
     dc4:	cf 93       	push	r28
     dc6:	fc 01       	movw	r30, r24
     dc8:	c1 81       	ldd	r28, Z+1	; 0x01
     dca:	80 81       	ld	r24, Z
     dcc:	66 23       	and	r22, r22
     dce:	69 f0       	breq	.+26     	; 0xdea <_ZN10DigitalPin5writeEb+0x26>
     dd0:	80 df       	rcall	.-256    	; 0xcd2 <_ZL13PORT_REGISTER4Port>
     dd2:	fc 01       	movw	r30, r24
     dd4:	40 81       	ld	r20, Z
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <_ZN10DigitalPin5writeEb+0x1c>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	ca 95       	dec	r28
     de2:	e2 f7       	brpl	.-8      	; 0xddc <_ZN10DigitalPin5writeEb+0x18>
     de4:	24 2b       	or	r18, r20
     de6:	20 83       	st	Z, r18
     de8:	0d c0       	rjmp	.+26     	; 0xe04 <_ZN10DigitalPin5writeEb+0x40>
     dea:	73 df       	rcall	.-282    	; 0xcd2 <_ZL13PORT_REGISTER4Port>
     dec:	fc 01       	movw	r30, r24
     dee:	40 81       	ld	r20, Z
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <_ZN10DigitalPin5writeEb+0x36>
     df6:	22 0f       	add	r18, r18
     df8:	33 1f       	adc	r19, r19
     dfa:	ca 95       	dec	r28
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <_ZN10DigitalPin5writeEb+0x32>
     dfe:	20 95       	com	r18
     e00:	24 23       	and	r18, r20
     e02:	20 83       	st	Z, r18
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <_ZN10DigitalPin4readEv>:
     e08:	dc 01       	movw	r26, r24
     e0a:	11 96       	adiw	r26, 0x01	; 1
     e0c:	2c 91       	ld	r18, X
     e0e:	11 97       	sbiw	r26, 0x01	; 1
     e10:	ec 91       	ld	r30, X
     e12:	8e 2f       	mov	r24, r30
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	8b 30       	cpi	r24, 0x0B	; 11
     e18:	91 05       	cpc	r25, r1
     e1a:	18 f5       	brcc	.+70     	; 0xe62 <_ZN10DigitalPin4readEv+0x5a>
     e1c:	fc 01       	movw	r30, r24
     e1e:	ed 56       	subi	r30, 0x6D	; 109
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__tablejump2__>
     e26:	e3 e2       	ldi	r30, 0x23	; 35
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	20 c0       	rjmp	.+64     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e2c:	e6 e2       	ldi	r30, 0x26	; 38
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	1d c0       	rjmp	.+58     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e32:	e9 e2       	ldi	r30, 0x29	; 41
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	1a c0       	rjmp	.+52     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e38:	ec e2       	ldi	r30, 0x2C	; 44
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	17 c0       	rjmp	.+46     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e3e:	ef e2       	ldi	r30, 0x2F	; 47
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	14 c0       	rjmp	.+40     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e44:	e2 e3       	ldi	r30, 0x32	; 50
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	11 c0       	rjmp	.+34     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e4a:	e0 e0       	ldi	r30, 0x00	; 0
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	0e c0       	rjmp	.+28     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e50:	e3 e0       	ldi	r30, 0x03	; 3
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	0b c0       	rjmp	.+22     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e56:	e6 e0       	ldi	r30, 0x06	; 6
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e5c:	e9 e0       	ldi	r30, 0x09	; 9
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e62:	eb e6       	ldi	r30, 0x6B	; 107
     e64:	f2 e0       	ldi	r31, 0x02	; 2
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <_ZN10DigitalPin4readEv+0x64>
     e68:	e0 e2       	ldi	r30, 0x20	; 32
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <_ZN10DigitalPin4readEv+0x6e>
     e72:	95 95       	asr	r25
     e74:	87 95       	ror	r24
     e76:	2a 95       	dec	r18
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <_ZN10DigitalPin4readEv+0x6a>
     e7a:	81 70       	andi	r24, 0x01	; 1
     e7c:	08 95       	ret

00000e7e <_ZN10DigitalPin6is_lowEv>:

bool DigitalPin::is_low ()
{
  return !read();
     e7e:	c4 df       	rcall	.-120    	; 0xe08 <_ZN10DigitalPin4readEv>
}
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	89 27       	eor	r24, r25
     e84:	08 95       	ret

00000e86 <_ZN8Expander11set_addressEh>:
#include "expander.hpp"

void Expander::set_address (uint8_t address)
{
  this->address = address;
     e86:	fc 01       	movw	r30, r24
     e88:	61 93       	st	Z+, r22
     e8a:	cf 01       	movw	r24, r30
  i2c.set_address(address);
     e8c:	50 c5       	rjmp	.+2720   	; 0x192e <_ZN3I2C11set_addressEh>
     e8e:	08 95       	ret

00000e90 <_ZN8Expander14write_registerEhh>:
}

void Expander::write_register (uint8_t reg_addr, uint8_t value)
{
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <_ZN8Expander14write_registerEhh+0xe>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	e6 2e       	mov	r14, r22
     ea4:	f4 2e       	mov	r15, r20
  i2c.set_address(address);
     ea6:	8c 01       	movw	r16, r24
     ea8:	0f 5f       	subi	r16, 0xFF	; 255
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	fc 01       	movw	r30, r24
     eae:	60 81       	ld	r22, Z
     eb0:	c8 01       	movw	r24, r16
     eb2:	3d d5       	rcall	.+2682   	; 0x192e <_ZN3I2C11set_addressEh>
  uint8_t msg [] = {reg_addr, value};
     eb4:	e9 82       	std	Y+1, r14	; 0x01
     eb6:	fa 82       	std	Y+2, r15	; 0x02
  i2c.write(msg, 2);
     eb8:	42 e0       	ldi	r20, 0x02	; 2
     eba:	be 01       	movw	r22, r28
     ebc:	6f 5f       	subi	r22, 0xFF	; 255
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	c8 01       	movw	r24, r16
     ec2:	b9 d5       	rcall	.+2930   	; 0x1a36 <_ZN3I2C5writeEPhh>
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	08 95       	ret

00000ed6 <_ZN8Expander13read_registerEh>:

uint8_t Expander::read_register (uint8_t reg_addr)
{
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	00 d0       	rcall	.+0      	; 0xee0 <_ZN8Expander13read_registerEh+0xa>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	6a 83       	std	Y+2, r22	; 0x02
  i2c.set_address(address);
     ee6:	8c 01       	movw	r16, r24
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	fc 01       	movw	r30, r24
     eee:	60 81       	ld	r22, Z
     ef0:	c8 01       	movw	r24, r16
     ef2:	1d d5       	rcall	.+2618   	; 0x192e <_ZN3I2C11set_addressEh>
  i2c.write(&reg_addr, 1);
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	be 01       	movw	r22, r28
     ef8:	6e 5f       	subi	r22, 0xFE	; 254
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	c8 01       	movw	r24, r16
     efe:	9b d5       	rcall	.+2870   	; 0x1a36 <_ZN3I2C5writeEPhh>
  uint8_t value;
  i2c.read(&value, 1);
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	c8 01       	movw	r24, r16
     f0a:	33 d6       	rcall	.+3174   	; 0x1b72 <_ZN3I2C4readEPhh>
  return value;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	08 95       	ret

00000f1c <_ZN11ExpanderPin4readEv>:
  this->pin = pin;
  set_mode(mode);
}

bool ExpanderPin::read ()
{
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	ec 01       	movw	r28, r24
  uint8_t reg_addr = (port == A) ? GPIOA : GPIOB;
     f22:	88 81       	ld	r24, Y
     f24:	88 23       	and	r24, r24
     f26:	11 f0       	breq	.+4      	; 0xf2c <_ZN11ExpanderPin4readEv+0x10>
     f28:	63 e1       	ldi	r22, 0x13	; 19
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <_ZN11ExpanderPin4readEv+0x12>
     f2c:	62 e1       	ldi	r22, 0x12	; 18
  return expander->read_register(reg_addr) & (1 << pin);
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	d1 df       	rcall	.-94     	; 0xed6 <_ZN8Expander13read_registerEh>
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	c9 01       	movw	r24, r18
     f3a:	09 80       	ldd	r0, Y+1	; 0x01
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <_ZN11ExpanderPin4readEv+0x26>
     f3e:	95 95       	asr	r25
     f40:	87 95       	ror	r24
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <_ZN11ExpanderPin4readEv+0x22>
}
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <_ZN11ExpanderPin5writeEb>:

void ExpanderPin::write (bool value)
{
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	ec 01       	movw	r28, r24
  uint8_t reg_addr = (port == A) ? GPIOA : GPIOB;
     f56:	88 81       	ld	r24, Y
     f58:	88 23       	and	r24, r24
     f5a:	11 f0       	breq	.+4      	; 0xf60 <_ZN11ExpanderPin5writeEb+0x12>
     f5c:	13 e1       	ldi	r17, 0x13	; 19
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <_ZN11ExpanderPin5writeEb+0x14>
     f60:	12 e1       	ldi	r17, 0x12	; 18
  if (value)
     f62:	66 23       	and	r22, r22
     f64:	91 f0       	breq	.+36     	; 0xf8a <_ZN11ExpanderPin5writeEb+0x3c>
    expander->write_register(reg_addr, expander->read_register(reg_addr) | (1 << pin));
     f66:	61 2f       	mov	r22, r17
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	b4 df       	rcall	.-152    	; 0xed6 <_ZN8Expander13read_registerEh>
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	09 80       	ldd	r0, Y+1	; 0x01
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <_ZN11ExpanderPin5writeEb+0x2c>
     f76:	44 0f       	add	r20, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <_ZN11ExpanderPin5writeEb+0x28>
     f7e:	48 2b       	or	r20, r24
     f80:	61 2f       	mov	r22, r17
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	84 df       	rcall	.-248    	; 0xe90 <_ZN8Expander14write_registerEhh>
     f88:	12 c0       	rjmp	.+36     	; 0xfae <_ZN11ExpanderPin5writeEb+0x60>
  else
    expander->write_register(reg_addr, expander->read_register(reg_addr) & ~(1 << pin));
     f8a:	61 2f       	mov	r22, r17
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	a2 df       	rcall	.-188    	; 0xed6 <_ZN8Expander13read_registerEh>
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	09 80       	ldd	r0, Y+1	; 0x01
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <_ZN11ExpanderPin5writeEb+0x50>
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <_ZN11ExpanderPin5writeEb+0x4c>
     fa2:	40 95       	com	r20
     fa4:	48 23       	and	r20, r24
     fa6:	61 2f       	mov	r22, r17
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	71 df       	rcall	.-286    	; 0xe90 <_ZN8Expander14write_registerEhh>
}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	08 95       	ret

00000fb6 <_ZN11ExpanderPin8set_modeE4Mode>:

void ExpanderPin::set_mode (Mode mode)
{
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
  this->mode = mode;
     fbe:	6a 83       	std	Y+2, r22	; 0x02
  uint8_t addr = (port == A) ? IODIRA : IODIRB;
     fc0:	11 e0       	ldi	r17, 0x01	; 1
     fc2:	88 81       	ld	r24, Y
     fc4:	81 11       	cpse	r24, r1
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <_ZN11ExpanderPin8set_modeE4Mode+0x14>
     fc8:	10 e0       	ldi	r17, 0x00	; 0
  if (mode == INPUT)
     fca:	61 11       	cpse	r22, r1
     fcc:	12 c0       	rjmp	.+36     	; 0xff2 <_ZN11ExpanderPin8set_modeE4Mode+0x3c>
    expander->write_register(addr, expander->read_register(addr) | (1 << pin));
     fce:	61 2f       	mov	r22, r17
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	80 df       	rcall	.-256    	; 0xed6 <_ZN8Expander13read_registerEh>
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	09 80       	ldd	r0, Y+1	; 0x01
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <_ZN11ExpanderPin8set_modeE4Mode+0x2c>
     fde:	44 0f       	add	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <_ZN11ExpanderPin8set_modeE4Mode+0x28>
     fe6:	48 2b       	or	r20, r24
     fe8:	61 2f       	mov	r22, r17
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	50 df       	rcall	.-352    	; 0xe90 <_ZN8Expander14write_registerEhh>
     ff0:	12 c0       	rjmp	.+36     	; 0x1016 <_ZN11ExpanderPin8set_modeE4Mode+0x60>
  else
    expander->write_register(addr, expander->read_register(addr) & ~(1 << pin));
     ff2:	61 2f       	mov	r22, r17
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	6e df       	rcall	.-292    	; 0xed6 <_ZN8Expander13read_registerEh>
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	09 80       	ldd	r0, Y+1	; 0x01
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <_ZN11ExpanderPin8set_modeE4Mode+0x50>
    1002:	44 0f       	add	r20, r20
    1004:	55 1f       	adc	r21, r21
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <_ZN11ExpanderPin8set_modeE4Mode+0x4c>
    100a:	40 95       	com	r20
    100c:	48 23       	and	r20, r24
    100e:	61 2f       	mov	r22, r17
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	3d df       	rcall	.-390    	; 0xe90 <_ZN8Expander14write_registerEhh>
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	08 95       	ret

0000101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>:
const uint8_t IODIRB = 0x01;
const uint8_t GPIOA  = 0x12;
const uint8_t GPIOB  = 0x13;

void ExpanderPin::initialize (Expander * expander, Port port, Pin pin, Mode mode)
{
    101e:	0f 93       	push	r16
  this->expander = expander;
    1020:	fc 01       	movw	r30, r24
    1022:	74 83       	std	Z+4, r23	; 0x04
    1024:	63 83       	std	Z+3, r22	; 0x03
  this->port = port;
    1026:	40 83       	st	Z, r20
  this->pin = pin;
    1028:	21 83       	std	Z+1, r18	; 0x01
  set_mode(mode);
    102a:	60 2f       	mov	r22, r16
    102c:	c4 df       	rcall	.-120    	; 0xfb6 <_ZN11ExpanderPin8set_modeE4Mode>
}
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <_ZN12InputHandler20initialize_expandersEv>:
  initialize_joysticks();
  initialize_potentiometers();
}

void InputHandler::initialize_expanders ()
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
  expander_left.set_address(0x20);
    1038:	60 e2       	ldi	r22, 0x20	; 32
    103a:	03 96       	adiw	r24, 0x03	; 3
    103c:	24 df       	rcall	.-440    	; 0xe86 <_ZN8Expander11set_addressEh>
  expander_right.set_address(0x27);
    103e:	67 e2       	ldi	r22, 0x27	; 39
    1040:	ce 01       	movw	r24, r28
    1042:	43 96       	adiw	r24, 0x13	; 19
    1044:	20 df       	rcall	.-448    	; 0xe86 <_ZN8Expander11set_addressEh>
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <_ZN12InputHandler23initialize_push_buttonsEv>:

void InputHandler::initialize_push_buttons ()
{
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
  // Left push-buttons
  push_buttons[0].initialize(&expander_left, A, ZERO, INPUT);
    1058:	7c 01       	movw	r14, r24
    105a:	83 e0       	ldi	r24, 0x03	; 3
    105c:	e8 0e       	add	r14, r24
    105e:	f1 1c       	adc	r15, r1
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	b7 01       	movw	r22, r14
    1068:	ce 01       	movw	r24, r28
    106a:	83 96       	adiw	r24, 0x23	; 35
    106c:	d8 df       	rcall	.-80     	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[1].initialize(&expander_left, A, TWO,  INPUT);
    106e:	22 e0       	ldi	r18, 0x02	; 2
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	b7 01       	movw	r22, r14
    1074:	ce 01       	movw	r24, r28
    1076:	88 96       	adiw	r24, 0x28	; 40
    1078:	d2 df       	rcall	.-92     	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[2].initialize(&expander_left, A, FOUR, INPUT);
    107a:	24 e0       	ldi	r18, 0x04	; 4
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	b7 01       	movw	r22, r14
    1080:	ce 01       	movw	r24, r28
    1082:	8d 96       	adiw	r24, 0x2d	; 45
    1084:	cc df       	rcall	.-104    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[3].initialize(&expander_left, A, SIX,  INPUT);
    1086:	26 e0       	ldi	r18, 0x06	; 6
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	b7 01       	movw	r22, r14
    108c:	ce 01       	movw	r24, r28
    108e:	c2 96       	adiw	r24, 0x32	; 50
    1090:	c6 df       	rcall	.-116    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[4].initialize(&expander_left, B, ZERO, INPUT);
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	41 e0       	ldi	r20, 0x01	; 1
    1096:	b7 01       	movw	r22, r14
    1098:	ce 01       	movw	r24, r28
    109a:	c7 96       	adiw	r24, 0x37	; 55
    109c:	c0 df       	rcall	.-128    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[5].initialize(&expander_left, B, TWO,  INPUT);
    109e:	22 e0       	ldi	r18, 0x02	; 2
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	b7 01       	movw	r22, r14
    10a4:	ce 01       	movw	r24, r28
    10a6:	cc 96       	adiw	r24, 0x3c	; 60
    10a8:	ba df       	rcall	.-140    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[6].initialize(&expander_left, B, FOUR, INPUT);
    10aa:	24 e0       	ldi	r18, 0x04	; 4
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	b7 01       	movw	r22, r14
    10b0:	ce 01       	movw	r24, r28
    10b2:	8f 5b       	subi	r24, 0xBF	; 191
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	b3 df       	rcall	.-154    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[7].initialize(&expander_left, B, SIX,  INPUT);
    10b8:	26 e0       	ldi	r18, 0x06	; 6
    10ba:	41 e0       	ldi	r20, 0x01	; 1
    10bc:	b7 01       	movw	r22, r14
    10be:	ce 01       	movw	r24, r28
    10c0:	8a 5b       	subi	r24, 0xBA	; 186
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	ac df       	rcall	.-168    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>

  // Right push-buttons
  push_buttons[8].initialize(&expander_right, A, ZERO, INPUT);
    10c6:	7e 01       	movw	r14, r28
    10c8:	83 e1       	ldi	r24, 0x13	; 19
    10ca:	e8 0e       	add	r14, r24
    10cc:	f1 1c       	adc	r15, r1
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	b7 01       	movw	r22, r14
    10d4:	ce 01       	movw	r24, r28
    10d6:	85 5b       	subi	r24, 0xB5	; 181
    10d8:	9f 4f       	sbci	r25, 0xFF	; 255
    10da:	a1 df       	rcall	.-190    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[9].initialize(&expander_right, A, TWO,  INPUT);
    10dc:	22 e0       	ldi	r18, 0x02	; 2
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	b7 01       	movw	r22, r14
    10e2:	ce 01       	movw	r24, r28
    10e4:	80 5b       	subi	r24, 0xB0	; 176
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	9a df       	rcall	.-204    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[10].initialize(&expander_right, A, FOUR, INPUT);
    10ea:	24 e0       	ldi	r18, 0x04	; 4
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	b7 01       	movw	r22, r14
    10f0:	ce 01       	movw	r24, r28
    10f2:	8b 5a       	subi	r24, 0xAB	; 171
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	93 df       	rcall	.-218    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[11].initialize(&expander_right, A, SIX,  INPUT);
    10f8:	26 e0       	ldi	r18, 0x06	; 6
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	b7 01       	movw	r22, r14
    10fe:	ce 01       	movw	r24, r28
    1100:	86 5a       	subi	r24, 0xA6	; 166
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	8c df       	rcall	.-232    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[12].initialize(&expander_right, B, ZERO, INPUT);
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	b7 01       	movw	r22, r14
    110c:	ce 01       	movw	r24, r28
    110e:	81 5a       	subi	r24, 0xA1	; 161
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	85 df       	rcall	.-246    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[13].initialize(&expander_right, B, TWO,  INPUT);
    1114:	22 e0       	ldi	r18, 0x02	; 2
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	b7 01       	movw	r22, r14
    111a:	ce 01       	movw	r24, r28
    111c:	8c 59       	subi	r24, 0x9C	; 156
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	7e df       	rcall	.-260    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[14].initialize(&expander_right, B, FOUR, INPUT);
    1122:	24 e0       	ldi	r18, 0x04	; 4
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	b7 01       	movw	r22, r14
    1128:	ce 01       	movw	r24, r28
    112a:	87 59       	subi	r24, 0x97	; 151
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	77 df       	rcall	.-274    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_buttons[15].initialize(&expander_right, B, SIX,  INPUT);
    1130:	26 e0       	ldi	r18, 0x06	; 6
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	b7 01       	movw	r22, r14
    1136:	ce 01       	movw	r24, r28
    1138:	82 59       	subi	r24, 0x92	; 146
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	70 df       	rcall	.-288    	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	08 95       	ret

0000114a <_ZN12InputHandler25initialize_arcade_buttonsEv>:

void InputHandler::initialize_arcade_buttons ()
{
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	ec 01       	movw	r28, r24
  arcade_buttons[0].initialize(K, TWO, INPUT_PULLUP);   // emergency stop
    1150:	22 e0       	ldi	r18, 0x02	; 2
    1152:	42 e0       	ldi	r20, 0x02	; 2
    1154:	69 e0       	ldi	r22, 0x09	; 9
    1156:	8d 58       	subi	r24, 0x8D	; 141
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	e8 dd       	rcall	.-1072   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[1].initialize(B, SIX, INPUT_PULLUP);   // n/a
    115c:	22 e0       	ldi	r18, 0x02	; 2
    115e:	46 e0       	ldi	r20, 0x06	; 6
    1160:	61 e0       	ldi	r22, 0x01	; 1
    1162:	ce 01       	movw	r24, r28
    1164:	8a 58       	subi	r24, 0x8A	; 138
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	e1 dd       	rcall	.-1086   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[2].initialize(B, FOUR, INPUT_PULLUP);  // n/a
    116a:	22 e0       	ldi	r18, 0x02	; 2
    116c:	44 e0       	ldi	r20, 0x04	; 4
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	ce 01       	movw	r24, r28
    1172:	87 58       	subi	r24, 0x87	; 135
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	da dd       	rcall	.-1100   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[3].initialize(B, ZERO, INPUT_PULLUP);  // arm up
    1178:	22 e0       	ldi	r18, 0x02	; 2
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	ce 01       	movw	r24, r28
    1180:	84 58       	subi	r24, 0x84	; 132
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	d3 dd       	rcall	.-1114   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[4].initialize(E, FOUR, INPUT_PULLUP);  // lower bucket
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	44 e0       	ldi	r20, 0x04	; 4
    118a:	64 e0       	ldi	r22, 0x04	; 4
    118c:	ce 01       	movw	r24, r28
    118e:	81 58       	subi	r24, 0x81	; 129
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	cc dd       	rcall	.-1128   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[5].initialize(B, FIVE, INPUT_PULLUP);  // raise bucket
    1194:	22 e0       	ldi	r18, 0x02	; 2
    1196:	45 e0       	ldi	r20, 0x05	; 5
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	ce 01       	movw	r24, r28
    119c:	8e 57       	subi	r24, 0x7E	; 126
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	c5 dd       	rcall	.-1142   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[6].initialize(E, SIX, INPUT_PULLUP);   // arm down
    11a2:	22 e0       	ldi	r18, 0x02	; 2
    11a4:	46 e0       	ldi	r20, 0x06	; 6
    11a6:	64 e0       	ldi	r22, 0x04	; 4
    11a8:	ce 01       	movw	r24, r28
    11aa:	8b 57       	subi	r24, 0x7B	; 123
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	be dd       	rcall	.-1156   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[7].initialize(E, SEVEN, INPUT_PULLUP); // plow up
    11b0:	22 e0       	ldi	r18, 0x02	; 2
    11b2:	47 e0       	ldi	r20, 0x07	; 7
    11b4:	64 e0       	ldi	r22, 0x04	; 4
    11b6:	ce 01       	movw	r24, r28
    11b8:	88 57       	subi	r24, 0x78	; 120
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	b7 dd       	rcall	.-1170   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  arcade_buttons[8].initialize(E, FIVE, INPUT_PULLUP);  // plow down
    11be:	22 e0       	ldi	r18, 0x02	; 2
    11c0:	45 e0       	ldi	r20, 0x05	; 5
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	ce 01       	movw	r24, r28
    11c6:	85 57       	subi	r24, 0x75	; 117
    11c8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ca:	b0 dd       	rcall	.-1184   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <_ZN12InputHandler20initialize_joysticksEv>:

void InputHandler::initialize_joysticks ()
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
  joystick_left_y.initialize(CHANNEL_ZERO);
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	81 57       	subi	r24, 0x71	; 113
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	1b d8       	rcall	.-4042   	; 0x216 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
  joystick_left_x.initialize(CHANNEL_ONE);
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	ce 01       	movw	r24, r28
    11e4:	82 57       	subi	r24, 0x72	; 114
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	16 d8       	rcall	.-4052   	; 0x216 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
  joystick_right_x.initialize(CHANNEL_SIX);
    11ea:	66 e0       	ldi	r22, 0x06	; 6
    11ec:	ce 01       	movw	r24, r28
    11ee:	80 57       	subi	r24, 0x70	; 112
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	11 d8       	rcall	.-4062   	; 0x216 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
  joystick_right_y.initialize(CHANNEL_SEVEN);
    11f4:	67 e0       	ldi	r22, 0x07	; 7
    11f6:	ce 01       	movw	r24, r28
    11f8:	8f 56       	subi	r24, 0x6F	; 111
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	0c d8       	rcall	.-4072   	; 0x216 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <_ZN12InputHandler25initialize_potentiometersEv>:

void InputHandler::initialize_potentiometers ()
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	ec 01       	movw	r28, r24
  potentiometer_left.initialize(CHANNEL_TWO);
    120a:	62 e0       	ldi	r22, 0x02	; 2
    120c:	8e 56       	subi	r24, 0x6E	; 110
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	02 d8       	rcall	.-4092   	; 0x216 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
  potentiometer_right.initialize(CHANNEL_FIVE);
    1212:	65 e0       	ldi	r22, 0x05	; 5
    1214:	ce 01       	movw	r24, r28
    1216:	8d 56       	subi	r24, 0x6D	; 109
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN11AnalogInput10initializeE14ANALOG_CHANNEL>
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <_ZN12InputHandler10initializeEP6Memory>:
#include "../memory/memory_variables.hpp"

/*------------------------------ Initialization ------------------------------*/

void InputHandler::initialize (Memory * memory)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	ec 01       	movw	r28, r24
  this->memory = memory;
    122a:	7a 83       	std	Y+2, r23	; 0x02
    122c:	69 83       	std	Y+1, r22	; 0x01
  initialize_expanders();
    122e:	01 df       	rcall	.-510    	; 0x1032 <_ZN12InputHandler20initialize_expandersEv>
  initialize_push_buttons();
    1230:	ce 01       	movw	r24, r28
    1232:	0c df       	rcall	.-488    	; 0x104c <_ZN12InputHandler23initialize_push_buttonsEv>
  initialize_arcade_buttons();
    1234:	ce 01       	movw	r24, r28
    1236:	89 df       	rcall	.-238    	; 0x114a <_ZN12InputHandler25initialize_arcade_buttonsEv>
  initialize_joysticks();
    1238:	ce 01       	movw	r24, r28
    123a:	cb df       	rcall	.-106    	; 0x11d2 <_ZN12InputHandler20initialize_joysticksEv>
  initialize_potentiometers();
    123c:	ce 01       	movw	r24, r28
    123e:	e2 df       	rcall	.-60     	; 0x1204 <_ZN12InputHandler25initialize_potentiometersEv>
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <_ZN12InputHandler19detect_push_buttonsEv>:
  detect_joystick();
  memory->write(REQUEST, (uint16_t)request);
}

void InputHandler::detect_push_buttons ()
{
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
  if (valid_request())
    125a:	fc 01       	movw	r30, r24
    125c:	20 81       	ld	r18, Z
    125e:	21 11       	cpse	r18, r1
    1260:	21 c0       	rjmp	.+66     	; 0x12a4 <_ZN12InputHandler19detect_push_buttonsEv+0x5e>
    1262:	5c 01       	movw	r10, r24
    1264:	8c 01       	movw	r16, r24
    1266:	0d 5d       	subi	r16, 0xDD	; 221
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	c0 e0       	ldi	r28, 0x00	; 0
    126c:	d0 e0       	ldi	r29, 0x00	; 0
    126e:	e1 2c       	mov	r14, r1
    1270:	f1 2c       	mov	r15, r1
    1272:	c1 2c       	mov	r12, r1
    1274:	d1 2c       	mov	r13, r1
    return;
  int index = 0;
  int count = 0;
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
  {
    if (!push_buttons[i].read())
    1276:	c8 01       	movw	r24, r16
    1278:	51 de       	rcall	.-862    	; 0xf1c <_ZN11ExpanderPin4readEv>
    127a:	81 11       	cpse	r24, r1
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <_ZN12InputHandler19detect_push_buttonsEv+0x40>
    {
      ++count;
    127e:	ff ef       	ldi	r31, 0xFF	; 255
    1280:	ef 1a       	sub	r14, r31
    1282:	ff 0a       	sbc	r15, r31
    1284:	6e 01       	movw	r12, r28
{
  if (valid_request())
    return;
  int index = 0;
  int count = 0;
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
    1286:	21 96       	adiw	r28, 0x01	; 1
    1288:	0b 5f       	subi	r16, 0xFB	; 251
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	c0 31       	cpi	r28, 0x10	; 16
    128e:	d1 05       	cpc	r29, r1
    1290:	91 f7       	brne	.-28     	; 0x1276 <_ZN12InputHandler19detect_push_buttonsEv+0x30>
    {
      ++count;
      index = i;
    }
  }
  if (count == 1)
    1292:	ea 94       	dec	r14
    1294:	ef 28       	or	r14, r15
    1296:	31 f4       	brne	.+12     	; 0x12a4 <_ZN12InputHandler19detect_push_buttonsEv+0x5e>
    request = PUSH_BUTTON_REQUESTS[index];
    1298:	f6 01       	movw	r30, r12
    129a:	e6 5a       	subi	r30, 0xA6	; 166
    129c:	fd 4f       	sbci	r31, 0xFD	; 253
    129e:	80 81       	ld	r24, Z
    12a0:	f5 01       	movw	r30, r10
    12a2:	80 83       	st	Z, r24
}
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	08 95       	ret

000012ba <_ZN12InputHandler21detect_arcade_buttonsEv>:

void InputHandler::detect_arcade_buttons ()
{
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
  if (valid_request())
    12ce:	fc 01       	movw	r30, r24
    12d0:	20 81       	ld	r18, Z
    12d2:	21 11       	cpse	r18, r1
    12d4:	21 c0       	rjmp	.+66     	; 0x1318 <_ZN12InputHandler21detect_arcade_buttonsEv+0x5e>
    12d6:	6c 01       	movw	r12, r24
    12d8:	8c 01       	movw	r16, r24
    12da:	0d 58       	subi	r16, 0x8D	; 141
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	c0 e0       	ldi	r28, 0x00	; 0
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
    12e2:	e1 2c       	mov	r14, r1
    12e4:	f1 2c       	mov	r15, r1
    12e6:	a1 2c       	mov	r10, r1
    12e8:	b1 2c       	mov	r11, r1
    return;
  int index = 0;
  int count = 0;
  for (int i = 0; i < NUM_ARCADE_BUTTONS; ++i)
  {
    bool button_pressed = arcade_buttons[i].is_low();
    12ea:	c8 01       	movw	r24, r16
    12ec:	c8 dd       	rcall	.-1136   	; 0xe7e <_ZN10DigitalPin6is_lowEv>
    if (button_pressed)
    12ee:	88 23       	and	r24, r24
    12f0:	21 f0       	breq	.+8      	; 0x12fa <_ZN12InputHandler21detect_arcade_buttonsEv+0x40>
    {
      ++count;
    12f2:	ff ef       	ldi	r31, 0xFF	; 255
    12f4:	ef 1a       	sub	r14, r31
    12f6:	ff 0a       	sbc	r15, r31
    12f8:	5e 01       	movw	r10, r28
{
  if (valid_request())
    return;
  int index = 0;
  int count = 0;
  for (int i = 0; i < NUM_ARCADE_BUTTONS; ++i)
    12fa:	21 96       	adiw	r28, 0x01	; 1
    12fc:	0d 5f       	subi	r16, 0xFD	; 253
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	c9 30       	cpi	r28, 0x09	; 9
    1302:	d1 05       	cpc	r29, r1
    1304:	91 f7       	brne	.-28     	; 0x12ea <_ZN12InputHandler21detect_arcade_buttonsEv+0x30>
    {
      ++count;
      index = i;
    }
  }
  if (count == 1)
    1306:	ea 94       	dec	r14
    1308:	ef 28       	or	r14, r15
    130a:	31 f4       	brne	.+12     	; 0x1318 <_ZN12InputHandler21detect_arcade_buttonsEv+0x5e>
  {
    request = ARCADE_BUTTON_REQUESTS [index];
    130c:	f5 01       	movw	r30, r10
    130e:	ef 5a       	subi	r30, 0xAF	; 175
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	80 81       	ld	r24, Z
    1314:	f6 01       	movw	r30, r12
    1316:	80 83       	st	Z, r24
  }
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	bf 90       	pop	r11
    132a:	af 90       	pop	r10
    132c:	08 95       	ret

0000132e <_ZN12InputHandler15detect_joystickEv>:

void InputHandler::detect_joystick ()
{
    132e:	af 92       	push	r10
    1330:	bf 92       	push	r11
    1332:	cf 92       	push	r12
    1334:	df 92       	push	r13
    1336:	ef 92       	push	r14
    1338:	ff 92       	push	r15
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	ec 01       	movw	r28, r24
  uint16_t left_x = joystick_left_x.read();
    1344:	82 57       	subi	r24, 0x72	; 114
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11AnalogInput4readEv>
    134c:	8c 01       	movw	r16, r24
  uint16_t left_y = joystick_left_y.read();
    134e:	ce 01       	movw	r24, r28
    1350:	81 57       	subi	r24, 0x71	; 113
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11AnalogInput4readEv>
    1358:	7c 01       	movw	r14, r24
  uint16_t right_x = joystick_right_x.read();
    135a:	ce 01       	movw	r24, r28
    135c:	80 57       	subi	r24, 0x70	; 112
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11AnalogInput4readEv>
    1364:	5c 01       	movw	r10, r24
  uint16_t right_y = joystick_right_y.read();
    1366:	ce 01       	movw	r24, r28
    1368:	8f 56       	subi	r24, 0x6F	; 111
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11AnalogInput4readEv>
    1370:	6c 01       	movw	r12, r24
  
  memory->write(JOYSTICK_LEFT_X,  left_x);
    1372:	b8 01       	movw	r22, r16
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	a5 d4       	rcall	.+2378   	; 0x1cc2 <_ZN6Memory5writeEhj>
  memory->write(JOYSTICK_LEFT_Y, left_y);
    1378:	b7 01       	movw	r22, r14
    137a:	81 e2       	ldi	r24, 0x21	; 33
    137c:	a2 d4       	rcall	.+2372   	; 0x1cc2 <_ZN6Memory5writeEhj>
  memory->write(JOYSTICK_RIGHT_X, right_x);
    137e:	b5 01       	movw	r22, r10
    1380:	82 e2       	ldi	r24, 0x22	; 34
    1382:	9f d4       	rcall	.+2366   	; 0x1cc2 <_ZN6Memory5writeEhj>
  memory->write(JOYSTICK_RIGHT_Y, right_y);
    1384:	b6 01       	movw	r22, r12
    1386:	83 e2       	ldi	r24, 0x23	; 35
    1388:	9c d4       	rcall	.+2360   	; 0x1cc2 <_ZN6Memory5writeEhj>
  memory->write(SLIDER_LEFT,    potentiometer_left.read());
    138a:	ce 01       	movw	r24, r28
    138c:	8e 56       	subi	r24, 0x6E	; 110
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11AnalogInput4readEv>
    1394:	bc 01       	movw	r22, r24
    1396:	84 e2       	ldi	r24, 0x24	; 36
    1398:	94 d4       	rcall	.+2344   	; 0x1cc2 <_ZN6Memory5writeEhj>
  memory->write(SLIDER_RIGHT,   potentiometer_right.read());
    139a:	ce 01       	movw	r24, r28
    139c:	8d 56       	subi	r24, 0x6D	; 109
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11AnalogInput4readEv>
    13a4:	bc 01       	movw	r22, r24
    13a6:	85 e2       	ldi	r24, 0x25	; 37
    13a8:	8c d4       	rcall	.+2328   	; 0x1cc2 <_ZN6Memory5writeEhj>
  if (valid_request())
    13aa:	88 81       	ld	r24, Y
    13ac:	81 11       	cpse	r24, r1
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <_ZN12InputHandler15detect_joystickEv+0xa0>
    return;
  const int offset = 50;
  bool x_is_neutral = (left_x > 512 - offset) && (left_x < 512 + offset);
    13b0:	0f 5c       	subi	r16, 0xCF	; 207
    13b2:	11 40       	sbci	r17, 0x01	; 1
  bool y_is_neutral = (left_y > 512 - offset) && (left_y < 512 + offset);
  if (x_is_neutral && y_is_neutral)
    13b4:	03 36       	cpi	r16, 0x63	; 99
    13b6:	11 05       	cpc	r17, r1
    13b8:	40 f4       	brcc	.+16     	; 0x13ca <_ZN12InputHandler15detect_joystickEv+0x9c>
  memory->write(SLIDER_RIGHT,   potentiometer_right.read());
  if (valid_request())
    return;
  const int offset = 50;
  bool x_is_neutral = (left_x > 512 - offset) && (left_x < 512 + offset);
  bool y_is_neutral = (left_y > 512 - offset) && (left_y < 512 + offset);
    13ba:	8f ec       	ldi	r24, 0xCF	; 207
    13bc:	e8 1a       	sub	r14, r24
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	f8 0a       	sbc	r15, r24
  if (x_is_neutral && y_is_neutral)
    13c2:	83 e6       	ldi	r24, 0x63	; 99
    13c4:	e8 16       	cp	r14, r24
    13c6:	f1 04       	cpc	r15, r1
    13c8:	10 f0       	brcs	.+4      	; 0x13ce <_ZN12InputHandler15detect_joystickEv+0xa0>
    return;
  request = JOYSTICK;
    13ca:	88 e0       	ldi	r24, 0x08	; 8
    13cc:	88 83       	st	Y, r24
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	08 95       	ret

000013e4 <_ZN12InputHandler4pollEv>:
}

/*-------------------- Reading Input and Setting Request ---------------------*/

void InputHandler::poll ()
{
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
  request = NO_REQUEST;
    13ea:	18 82       	st	Y, r1
  detect_arcade_buttons();
    13ec:	66 df       	rcall	.-308    	; 0x12ba <_ZN12InputHandler21detect_arcade_buttonsEv>
  detect_push_buttons();
    13ee:	ce 01       	movw	r24, r28
    13f0:	2a df       	rcall	.-428    	; 0x1246 <_ZN12InputHandler19detect_push_buttonsEv>
  detect_joystick();
    13f2:	ce 01       	movw	r24, r28
    13f4:	9c df       	rcall	.-200    	; 0x132e <_ZN12InputHandler15detect_joystickEv>
  memory->write(REQUEST, (uint16_t)request);
    13f6:	68 81       	ld	r22, Y
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	62 d4       	rcall	.+2244   	; 0x1cc2 <_ZN6Memory5writeEhj>
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <_ZN13OutputHandler20initialize_expandersEv>:
  refresh_panel_leds();
  screen.refresh();
}

void OutputHandler::initialize_expanders ()
{
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	ec 01       	movw	r28, r24
  expander_left.set_address(0x20);
    140a:	60 e2       	ldi	r22, 0x20	; 32
    140c:	89 5f       	subi	r24, 0xF9	; 249
    140e:	9d 4f       	sbci	r25, 0xFD	; 253
    1410:	3a dd       	rcall	.-1420   	; 0xe86 <_ZN8Expander11set_addressEh>
  expander_right.set_address(0x27);
    1412:	67 e2       	ldi	r22, 0x27	; 39
    1414:	ce 01       	movw	r24, r28
    1416:	89 5e       	subi	r24, 0xE9	; 233
    1418:	9d 4f       	sbci	r25, 0xFD	; 253
    141a:	35 dd       	rcall	.-1430   	; 0xe86 <_ZN8Expander11set_addressEh>
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <_ZN13OutputHandler27initialize_push_button_ledsEv>:

void OutputHandler::initialize_push_button_leds ()
{
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ec 01       	movw	r28, r24
  // Left push-button LEDs
  push_button_leds[0].initialize(&expander_left, A, ONE, OUTPUT);
    142e:	7c 01       	movw	r14, r24
    1430:	89 ef       	ldi	r24, 0xF9	; 249
    1432:	e8 1a       	sub	r14, r24
    1434:	8d ef       	ldi	r24, 0xFD	; 253
    1436:	f8 0a       	sbc	r15, r24
    1438:	01 e0       	ldi	r16, 0x01	; 1
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	b7 01       	movw	r22, r14
    1440:	ce 01       	movw	r24, r28
    1442:	89 5d       	subi	r24, 0xD9	; 217
    1444:	9d 4f       	sbci	r25, 0xFD	; 253
    1446:	eb dd       	rcall	.-1066   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[1].initialize(&expander_left, A, THREE, OUTPUT);
    1448:	23 e0       	ldi	r18, 0x03	; 3
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	b7 01       	movw	r22, r14
    144e:	ce 01       	movw	r24, r28
    1450:	84 5d       	subi	r24, 0xD4	; 212
    1452:	9d 4f       	sbci	r25, 0xFD	; 253
    1454:	e4 dd       	rcall	.-1080   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[2].initialize(&expander_left, A, FIVE, OUTPUT);
    1456:	25 e0       	ldi	r18, 0x05	; 5
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	b7 01       	movw	r22, r14
    145c:	ce 01       	movw	r24, r28
    145e:	8f 5c       	subi	r24, 0xCF	; 207
    1460:	9d 4f       	sbci	r25, 0xFD	; 253
    1462:	dd dd       	rcall	.-1094   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[3].initialize(&expander_left, A, SEVEN, OUTPUT);
    1464:	27 e0       	ldi	r18, 0x07	; 7
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	b7 01       	movw	r22, r14
    146a:	ce 01       	movw	r24, r28
    146c:	8a 5c       	subi	r24, 0xCA	; 202
    146e:	9d 4f       	sbci	r25, 0xFD	; 253
    1470:	d6 dd       	rcall	.-1108   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[4].initialize(&expander_left, B, ONE, OUTPUT);
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	b7 01       	movw	r22, r14
    1478:	ce 01       	movw	r24, r28
    147a:	85 5c       	subi	r24, 0xC5	; 197
    147c:	9d 4f       	sbci	r25, 0xFD	; 253
    147e:	cf dd       	rcall	.-1122   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[5].initialize(&expander_left, B, THREE, OUTPUT);
    1480:	23 e0       	ldi	r18, 0x03	; 3
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	b7 01       	movw	r22, r14
    1486:	ce 01       	movw	r24, r28
    1488:	80 5c       	subi	r24, 0xC0	; 192
    148a:	9d 4f       	sbci	r25, 0xFD	; 253
    148c:	c8 dd       	rcall	.-1136   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[6].initialize(&expander_left, B, FIVE, OUTPUT);
    148e:	25 e0       	ldi	r18, 0x05	; 5
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	b7 01       	movw	r22, r14
    1494:	ce 01       	movw	r24, r28
    1496:	8b 5b       	subi	r24, 0xBB	; 187
    1498:	9d 4f       	sbci	r25, 0xFD	; 253
    149a:	c1 dd       	rcall	.-1150   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[7].initialize(&expander_left, B, SEVEN, OUTPUT);
    149c:	27 e0       	ldi	r18, 0x07	; 7
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	b7 01       	movw	r22, r14
    14a2:	ce 01       	movw	r24, r28
    14a4:	86 5b       	subi	r24, 0xB6	; 182
    14a6:	9d 4f       	sbci	r25, 0xFD	; 253
    14a8:	ba dd       	rcall	.-1164   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>

  // Right push-button LEDs
  push_button_leds[8].initialize(&expander_right, A, ONE, OUTPUT);
    14aa:	7e 01       	movw	r14, r28
    14ac:	89 ee       	ldi	r24, 0xE9	; 233
    14ae:	e8 1a       	sub	r14, r24
    14b0:	8d ef       	ldi	r24, 0xFD	; 253
    14b2:	f8 0a       	sbc	r15, r24
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	b7 01       	movw	r22, r14
    14ba:	ce 01       	movw	r24, r28
    14bc:	81 5b       	subi	r24, 0xB1	; 177
    14be:	9d 4f       	sbci	r25, 0xFD	; 253
    14c0:	ae dd       	rcall	.-1188   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[9].initialize(&expander_right, A, THREE, OUTPUT);
    14c2:	23 e0       	ldi	r18, 0x03	; 3
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	b7 01       	movw	r22, r14
    14c8:	ce 01       	movw	r24, r28
    14ca:	8c 5a       	subi	r24, 0xAC	; 172
    14cc:	9d 4f       	sbci	r25, 0xFD	; 253
    14ce:	a7 dd       	rcall	.-1202   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[10].initialize(&expander_right, A, FIVE, OUTPUT);
    14d0:	25 e0       	ldi	r18, 0x05	; 5
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	b7 01       	movw	r22, r14
    14d6:	ce 01       	movw	r24, r28
    14d8:	87 5a       	subi	r24, 0xA7	; 167
    14da:	9d 4f       	sbci	r25, 0xFD	; 253
    14dc:	a0 dd       	rcall	.-1216   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[11].initialize(&expander_right, A, SEVEN, OUTPUT);
    14de:	27 e0       	ldi	r18, 0x07	; 7
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	b7 01       	movw	r22, r14
    14e4:	ce 01       	movw	r24, r28
    14e6:	82 5a       	subi	r24, 0xA2	; 162
    14e8:	9d 4f       	sbci	r25, 0xFD	; 253
    14ea:	99 dd       	rcall	.-1230   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[12].initialize(&expander_right, B, ONE, OUTPUT);
    14ec:	21 e0       	ldi	r18, 0x01	; 1
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	b7 01       	movw	r22, r14
    14f2:	ce 01       	movw	r24, r28
    14f4:	8d 59       	subi	r24, 0x9D	; 157
    14f6:	9d 4f       	sbci	r25, 0xFD	; 253
    14f8:	92 dd       	rcall	.-1244   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[13].initialize(&expander_right, B, THREE, OUTPUT);
    14fa:	23 e0       	ldi	r18, 0x03	; 3
    14fc:	41 e0       	ldi	r20, 0x01	; 1
    14fe:	b7 01       	movw	r22, r14
    1500:	ce 01       	movw	r24, r28
    1502:	88 59       	subi	r24, 0x98	; 152
    1504:	9d 4f       	sbci	r25, 0xFD	; 253
    1506:	8b dd       	rcall	.-1258   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[14].initialize(&expander_right, B, FIVE, OUTPUT);
    1508:	25 e0       	ldi	r18, 0x05	; 5
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	b7 01       	movw	r22, r14
    150e:	ce 01       	movw	r24, r28
    1510:	83 59       	subi	r24, 0x93	; 147
    1512:	9d 4f       	sbci	r25, 0xFD	; 253
    1514:	84 dd       	rcall	.-1272   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
  push_button_leds[15].initialize(&expander_right, B, SEVEN, OUTPUT);
    1516:	27 e0       	ldi	r18, 0x07	; 7
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	b7 01       	movw	r22, r14
    151c:	ce 01       	movw	r24, r28
    151e:	8e 58       	subi	r24, 0x8E	; 142
    1520:	9d 4f       	sbci	r25, 0xFD	; 253
    1522:	7d dd       	rcall	.-1286   	; 0x101e <_ZN11ExpanderPin10initializeEP8Expander4Port3Pin4Mode>
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	08 95       	ret

00001530 <_ZN13OutputHandler21initialize_panel_ledsEv>:

void OutputHandler::initialize_panel_leds ()
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	8c 01       	movw	r16, r24
  panel_leds[0].initialize(C, ZERO, OUTPUT);
    153a:	ec 01       	movw	r28, r24
    153c:	c9 58       	subi	r28, 0x89	; 137
    153e:	dd 4f       	sbci	r29, 0xFD	; 253
    1540:	21 e0       	ldi	r18, 0x01	; 1
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	62 e0       	ldi	r22, 0x02	; 2
    1546:	ce 01       	movw	r24, r28
    1548:	f1 db       	rcall	.-2078   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  panel_leds[1].initialize(C, ONE, OUTPUT);
    154a:	21 e0       	ldi	r18, 0x01	; 1
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	62 e0       	ldi	r22, 0x02	; 2
    1550:	c8 01       	movw	r24, r16
    1552:	86 58       	subi	r24, 0x86	; 134
    1554:	9d 4f       	sbci	r25, 0xFD	; 253
    1556:	ea db       	rcall	.-2092   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  panel_leds[2].initialize(C, TWO, OUTPUT);
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	42 e0       	ldi	r20, 0x02	; 2
    155c:	62 e0       	ldi	r22, 0x02	; 2
    155e:	c8 01       	movw	r24, r16
    1560:	83 58       	subi	r24, 0x83	; 131
    1562:	9d 4f       	sbci	r25, 0xFD	; 253
    1564:	e3 db       	rcall	.-2106   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  panel_leds[3].initialize(C, THREE, OUTPUT);
    1566:	21 e0       	ldi	r18, 0x01	; 1
    1568:	43 e0       	ldi	r20, 0x03	; 3
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	c8 01       	movw	r24, r16
    156e:	80 58       	subi	r24, 0x80	; 128
    1570:	9d 4f       	sbci	r25, 0xFD	; 253
    1572:	dc db       	rcall	.-2120   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  panel_leds[4].initialize(C, FOUR, OUTPUT);
    1574:	21 e0       	ldi	r18, 0x01	; 1
    1576:	44 e0       	ldi	r20, 0x04	; 4
    1578:	62 e0       	ldi	r22, 0x02	; 2
    157a:	c8 01       	movw	r24, r16
    157c:	8d 57       	subi	r24, 0x7D	; 125
    157e:	9d 4f       	sbci	r25, 0xFD	; 253
    1580:	d5 db       	rcall	.-2134   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  panel_leds[5].initialize(C, FIVE, OUTPUT);
    1582:	21 e0       	ldi	r18, 0x01	; 1
    1584:	45 e0       	ldi	r20, 0x05	; 5
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	c8 01       	movw	r24, r16
    158a:	8a 57       	subi	r24, 0x7A	; 122
    158c:	9d 4f       	sbci	r25, 0xFD	; 253
    158e:	ce db       	rcall	.-2148   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  panel_leds[6].initialize(C, SIX, OUTPUT);
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	46 e0       	ldi	r20, 0x06	; 6
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	c8 01       	movw	r24, r16
    1598:	87 57       	subi	r24, 0x77	; 119
    159a:	9d 4f       	sbci	r25, 0xFD	; 253
    159c:	c7 db       	rcall	.-2162   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
  panel_leds[7].initialize(C, SEVEN, OUTPUT);
    159e:	21 e0       	ldi	r18, 0x01	; 1
    15a0:	47 e0       	ldi	r20, 0x07	; 7
    15a2:	62 e0       	ldi	r22, 0x02	; 2
    15a4:	c8 01       	movw	r24, r16
    15a6:	84 57       	subi	r24, 0x74	; 116
    15a8:	9d 4f       	sbci	r25, 0xFD	; 253
    15aa:	c0 db       	rcall	.-2176   	; 0xd2c <_ZN10DigitalPin10initializeE4Port3Pin4Mode>
    15ac:	01 57       	subi	r16, 0x71	; 113
    15ae:	1d 4f       	sbci	r17, 0xFD	; 253
  for (int i = 0; i < 8; ++i)
    panel_leds[i].write(0);
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	ce 01       	movw	r24, r28
    15b4:	07 dc       	rcall	.-2034   	; 0xdc4 <_ZN10DigitalPin5writeEb>
    15b6:	23 96       	adiw	r28, 0x03	; 3
  panel_leds[3].initialize(C, THREE, OUTPUT);
  panel_leds[4].initialize(C, FOUR, OUTPUT);
  panel_leds[5].initialize(C, FIVE, OUTPUT);
  panel_leds[6].initialize(C, SIX, OUTPUT);
  panel_leds[7].initialize(C, SEVEN, OUTPUT);
  for (int i = 0; i < 8; ++i)
    15b8:	c0 17       	cp	r28, r16
    15ba:	d1 07       	cpc	r29, r17
    15bc:	c9 f7       	brne	.-14     	; 0x15b0 <_ZN13OutputHandler21initialize_panel_ledsEv+0x80>
    panel_leds[i].write(0);
}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	08 95       	ret

000015c8 <_ZN13OutputHandler10initializeEP6Memory>:

#define F_CPU 16000000UL
#include <util/delay.h>

void OutputHandler::initialize (Memory * memory)
{
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	8b 01       	movw	r16, r22
  this->memory = memory;
    15d4:	79 83       	std	Y+1, r23	; 0x01
    15d6:	68 83       	st	Y, r22
  initialize_expanders();
    15d8:	15 df       	rcall	.-470    	; 0x1404 <_ZN13OutputHandler20initialize_expandersEv>
  initialize_push_button_leds();
    15da:	ce 01       	movw	r24, r28
    15dc:	22 df       	rcall	.-444    	; 0x1422 <_ZN13OutputHandler27initialize_push_button_ledsEv>
  initialize_panel_leds();
    15de:	ce 01       	movw	r24, r28
    15e0:	a7 df       	rcall	.-178    	; 0x1530 <_ZN13OutputHandler21initialize_panel_ledsEv>
  screen.initialize(memory, UART_3);
    15e2:	43 e0       	ldi	r20, 0x03	; 3
    15e4:	b8 01       	movw	r22, r16
    15e6:	ce 01       	movw	r24, r28
    15e8:	02 96       	adiw	r24, 0x02	; 2
    15ea:	ed d3       	rcall	.+2010   	; 0x1dc6 <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE>
}
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <_ZN13OutputHandler18refresh_panel_ledsEv>:
		push_button_leds[index].write(1);
	}
}

void OutputHandler::refresh_panel_leds ()
{
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	ec 01       	movw	r28, r24
  if (memory->read(CONNECTED))
    15fc:	84 e0       	ldi	r24, 0x04	; 4
    15fe:	7b d3       	rcall	.+1782   	; 0x1cf6 <_ZN6Memory4readEh>
    1600:	89 2b       	or	r24, r25
    1602:	59 f0       	breq	.+22     	; 0x161a <_ZN13OutputHandler18refresh_panel_ledsEv+0x24>
  {
    panel_leds[0].write(1);
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	ce 01       	movw	r24, r28
    1608:	89 58       	subi	r24, 0x89	; 137
    160a:	9d 4f       	sbci	r25, 0xFD	; 253
    160c:	db db       	rcall	.-2122   	; 0xdc4 <_ZN10DigitalPin5writeEb>
	panel_leds[4].write(0);
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	ce 01       	movw	r24, r28
    1612:	8d 57       	subi	r24, 0x7D	; 125
    1614:	9d 4f       	sbci	r25, 0xFD	; 253
    1616:	d6 db       	rcall	.-2132   	; 0xdc4 <_ZN10DigitalPin5writeEb>
    1618:	0a c0       	rjmp	.+20     	; 0x162e <_ZN13OutputHandler18refresh_panel_ledsEv+0x38>
  }
  else
  {
    panel_leds[0].write(0);
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	ce 01       	movw	r24, r28
    161e:	89 58       	subi	r24, 0x89	; 137
    1620:	9d 4f       	sbci	r25, 0xFD	; 253
    1622:	d0 db       	rcall	.-2144   	; 0xdc4 <_ZN10DigitalPin5writeEb>
    panel_leds[4].write(1);
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	ce 01       	movw	r24, r28
    1628:	8d 57       	subi	r24, 0x7D	; 125
    162a:	9d 4f       	sbci	r25, 0xFD	; 253
    162c:	cb db       	rcall	.-2154   	; 0xdc4 <_ZN10DigitalPin5writeEb>
  }
  
  if (memory->read(TIMEOUT_IN_PROGRESS))
    162e:	87 e0       	ldi	r24, 0x07	; 7
    1630:	62 d3       	rcall	.+1732   	; 0x1cf6 <_ZN6Memory4readEh>
    1632:	89 2b       	or	r24, r25
    1634:	59 f0       	breq	.+22     	; 0x164c <_ZN13OutputHandler18refresh_panel_ledsEv+0x56>
  {
	panel_leds[3].write(0);
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	ce 01       	movw	r24, r28
    163a:	80 58       	subi	r24, 0x80	; 128
    163c:	9d 4f       	sbci	r25, 0xFD	; 253
    163e:	c2 db       	rcall	.-2172   	; 0xdc4 <_ZN10DigitalPin5writeEb>
	panel_leds[7].write(1);
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	ce 01       	movw	r24, r28
    1644:	84 57       	subi	r24, 0x74	; 116
    1646:	9d 4f       	sbci	r25, 0xFD	; 253
    1648:	bd db       	rcall	.-2182   	; 0xdc4 <_ZN10DigitalPin5writeEb>
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <_ZN13OutputHandler18refresh_panel_ledsEv+0x6a>
  }
  else
  {
	panel_leds[3].write(1);
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	ce 01       	movw	r24, r28
    1650:	80 58       	subi	r24, 0x80	; 128
    1652:	9d 4f       	sbci	r25, 0xFD	; 253
    1654:	b7 db       	rcall	.-2194   	; 0xdc4 <_ZN10DigitalPin5writeEb>
	panel_leds[7].write(0);
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	ce 01       	movw	r24, r28
    165a:	84 57       	subi	r24, 0x74	; 116
    165c:	9d 4f       	sbci	r25, 0xFD	; 253
    165e:	b2 db       	rcall	.-2204   	; 0xdc4 <_ZN10DigitalPin5writeEb>
  }
  
  if (memory->read(MACRO_TYPE))
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	49 d3       	rcall	.+1682   	; 0x1cf6 <_ZN6Memory4readEh>
    1664:	89 2b       	or	r24, r25
    1666:	59 f0       	breq	.+22     	; 0x167e <_ZN13OutputHandler18refresh_panel_ledsEv+0x88>
  {
	  panel_leds[2].write(0);
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	ce 01       	movw	r24, r28
    166c:	83 58       	subi	r24, 0x83	; 131
    166e:	9d 4f       	sbci	r25, 0xFD	; 253
    1670:	a9 db       	rcall	.-2222   	; 0xdc4 <_ZN10DigitalPin5writeEb>
	  panel_leds[6].write(1);
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	ce 01       	movw	r24, r28
    1676:	87 57       	subi	r24, 0x77	; 119
    1678:	9d 4f       	sbci	r25, 0xFD	; 253
    167a:	a4 db       	rcall	.-2232   	; 0xdc4 <_ZN10DigitalPin5writeEb>
    167c:	0a c0       	rjmp	.+20     	; 0x1692 <_ZN13OutputHandler18refresh_panel_ledsEv+0x9c>
  }
  else
  {
	  panel_leds[2].write(1);
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	ce 01       	movw	r24, r28
    1682:	83 58       	subi	r24, 0x83	; 131
    1684:	9d 4f       	sbci	r25, 0xFD	; 253
    1686:	9e db       	rcall	.-2244   	; 0xdc4 <_ZN10DigitalPin5writeEb>
	  panel_leds[6].write(0);
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	ce 01       	movw	r24, r28
    168c:	87 57       	subi	r24, 0x77	; 119
    168e:	9d 4f       	sbci	r25, 0xFD	; 253
    1690:	99 db       	rcall	.-2254   	; 0xdc4 <_ZN10DigitalPin5writeEb>
  }
}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <_ZN13OutputHandler25turn_off_push_button_ledsEv>:

void OutputHandler::turn_off_push_button_leds ()
{
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	ec 01       	movw	r28, r24
    16a2:	c9 5d       	subi	r28, 0xD9	; 217
    16a4:	dd 4f       	sbci	r29, 0xFD	; 253
    16a6:	8c 01       	movw	r16, r24
    16a8:	09 58       	subi	r16, 0x89	; 137
    16aa:	1d 4f       	sbci	r17, 0xFD	; 253
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
    push_button_leds[i].write(0);
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	ce 01       	movw	r24, r28
    16b0:	4e dc       	rcall	.-1892   	; 0xf4e <_ZN11ExpanderPin5writeEb>
    16b2:	25 96       	adiw	r28, 0x05	; 5
  }
}

void OutputHandler::turn_off_push_button_leds ()
{
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
    16b4:	c0 17       	cp	r28, r16
    16b6:	d1 07       	cpc	r29, r17
    16b8:	c9 f7       	brne	.-14     	; 0x16ac <_ZN13OutputHandler25turn_off_push_button_ledsEv+0x14>
    push_button_leds[i].write(0);
}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	08 95       	ret

000016c4 <_ZN13OutputHandler24refresh_push_button_ledsEv>:
  }
}
*/

void OutputHandler::refresh_push_button_leds ()
{
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	1f 92       	push	r1
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8c 01       	movw	r16, r24
	static int count = 0;
	if (!memory->read(MACRO_IN_PROGRESS))
    16d4:	86 e0       	ldi	r24, 0x06	; 6
    16d6:	0f d3       	rcall	.+1566   	; 0x1cf6 <_ZN6Memory4readEh>
    16d8:	89 2b       	or	r24, r25
    16da:	31 f4       	brne	.+12     	; 0x16e8 <_ZN13OutputHandler24refresh_push_button_ledsEv+0x24>
	{
		turn_off_push_button_leds();
    16dc:	c8 01       	movw	r24, r16
    16de:	dc df       	rcall	.-72     	; 0x1698 <_ZN13OutputHandler25turn_off_push_button_ledsEv>
		count = 0;
    16e0:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <_ZZN13OutputHandler24refresh_push_button_ledsEvE5count+0x1>
    16e4:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <_ZZN13OutputHandler24refresh_push_button_ledsEvE5count>
	}
	Request request = (Request)memory->read(REQUEST);
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	05 d3       	rcall	.+1546   	; 0x1cf6 <_ZN6Memory4readEh>
    16ec:	89 83       	std	Y+1, r24	; 0x01
	if (request == NO_REQUEST)
    16ee:	88 23       	and	r24, r24
    16f0:	f1 f0       	breq	.+60     	; 0x172e <_ZN13OutputHandler24refresh_push_button_ledsEv+0x6a>
	{
		return;
	}
	int index = get_push_button_index(request);
    16f2:	ce 01       	movw	r24, r28
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	80 da       	rcall	.-2816   	; 0xbf8 <_Z21get_push_button_indexRK7Request>
	if (index >= 0 && count == 0)
    16f8:	99 23       	and	r25, r25
    16fa:	cc f0       	brlt	.+50     	; 0x172e <_ZN13OutputHandler24refresh_push_button_ledsEv+0x6a>
    16fc:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <_ZZN13OutputHandler24refresh_push_button_ledsEvE5count>
    1700:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <_ZZN13OutputHandler24refresh_push_button_ledsEvE5count+0x1>
    1704:	23 2b       	or	r18, r19
    1706:	99 f4       	brne	.+38     	; 0x172e <_ZN13OutputHandler24refresh_push_button_ledsEv+0x6a>
	{
		++count;
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <_ZZN13OutputHandler24refresh_push_button_ledsEvE5count+0x1>
    1710:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <_ZZN13OutputHandler24refresh_push_button_ledsEvE5count>
		push_button_leds[index].write(1);
    1714:	9c 01       	movw	r18, r24
    1716:	22 0f       	add	r18, r18
    1718:	33 1f       	adc	r19, r19
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	82 0f       	add	r24, r18
    1720:	93 1f       	adc	r25, r19
    1722:	89 5d       	subi	r24, 0xD9	; 217
    1724:	9d 4f       	sbci	r25, 0xFD	; 253
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	80 0f       	add	r24, r16
    172a:	91 1f       	adc	r25, r17
    172c:	10 dc       	rcall	.-2016   	; 0xf4e <_ZN11ExpanderPin5writeEb>
	}
}
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <_ZN13OutputHandler7refreshEv>:
  // flash the push-button LEDs
  spiral();
}

void OutputHandler::refresh ()
{
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	ec 01       	movw	r28, r24
  refresh_push_button_leds();
    1740:	c1 df       	rcall	.-126    	; 0x16c4 <_ZN13OutputHandler24refresh_push_button_ledsEv>
  refresh_panel_leds();
    1742:	ce 01       	movw	r24, r28
    1744:	58 df       	rcall	.-336    	; 0x15f6 <_ZN13OutputHandler18refresh_panel_ledsEv>
  screen.refresh();
    1746:	ce 01       	movw	r24, r28
    1748:	02 96       	adiw	r24, 0x02	; 2
    174a:	21 d4       	rcall	.+2114   	; 0x1f8e <_ZNK11TouchScreen7refreshEv>
}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <_ZN13OutputHandler6spiralEv>:
  for (int i = 0; i < NUM_PUSH_BUTTONS; ++i)
    push_button_leds[i].write(0);
}

void OutputHandler::spiral ()
{
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	a0 97       	sbiw	r28, 0x20	; 32
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	6c 01       	movw	r12, r24
  int indices [] = {0, 1, 8, 9, 11, 13, 15, 14, 7, 6, 4, 2, 3, 10, 12, 5};
    1778:	20 e2       	ldi	r18, 0x20	; 32
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	f2 e0       	ldi	r31, 0x02	; 2
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	dc 01       	movw	r26, r24
    1784:	01 90       	ld	r0, Z+
    1786:	0d 92       	st	X+, r0
    1788:	2a 95       	dec	r18
    178a:	e1 f7       	brne	.-8      	; 0x1784 <_ZN13OutputHandler6spiralEv+0x32>
    178c:	8e 01       	movw	r16, r28
    178e:	0f 5d       	subi	r16, 0xDF	; 223
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	7c 01       	movw	r14, r24
    1794:	58 01       	movw	r10, r16
  const int pause = 50;
  for (int j = 0; j < 16; ++j)
  {
	int index = indices[15 - j];
	push_button_leds[index].write(1);
    1796:	f5 01       	movw	r30, r10
    1798:	92 91       	ld	r25, -Z
    179a:	82 91       	ld	r24, -Z
    179c:	5f 01       	movw	r10, r30
    179e:	9c 01       	movw	r18, r24
    17a0:	22 0f       	add	r18, r18
    17a2:	33 1f       	adc	r19, r19
    17a4:	22 0f       	add	r18, r18
    17a6:	33 1f       	adc	r19, r19
    17a8:	82 0f       	add	r24, r18
    17aa:	93 1f       	adc	r25, r19
    17ac:	89 5d       	subi	r24, 0xD9	; 217
    17ae:	9d 4f       	sbci	r25, 0xFD	; 253
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	8c 0d       	add	r24, r12
    17b4:	9d 1d       	adc	r25, r13
    17b6:	cb db       	rcall	.-2154   	; 0xf4e <_ZN11ExpanderPin5writeEb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17b8:	ff ef       	ldi	r31, 0xFF	; 255
    17ba:	20 e7       	ldi	r18, 0x70	; 112
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	f1 50       	subi	r31, 0x01	; 1
    17c0:	20 40       	sbci	r18, 0x00	; 0
    17c2:	80 40       	sbci	r24, 0x00	; 0
    17c4:	e1 f7       	brne	.-8      	; 0x17be <_ZN13OutputHandler6spiralEv+0x6c>
    17c6:	00 c0       	rjmp	.+0      	; 0x17c8 <_ZN13OutputHandler6spiralEv+0x76>
    17c8:	00 00       	nop

void OutputHandler::spiral ()
{
  int indices [] = {0, 1, 8, 9, 11, 13, 15, 14, 7, 6, 4, 2, 3, 10, 12, 5};
  const int pause = 50;
  for (int j = 0; j < 16; ++j)
    17ca:	ae 14       	cp	r10, r14
    17cc:	bf 04       	cpc	r11, r15
    17ce:	19 f7       	brne	.-58     	; 0x1796 <_ZN13OutputHandler6spiralEv+0x44>
	_delay_ms(pause);
  }
  for (int j = 0; j < 16; ++j)
  {
	int index = indices[15 - j];
	push_button_leds[index].write(0);
    17d0:	f8 01       	movw	r30, r16
    17d2:	32 91       	ld	r19, -Z
    17d4:	22 91       	ld	r18, -Z
    17d6:	8f 01       	movw	r16, r30
    17d8:	c9 01       	movw	r24, r18
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	28 0f       	add	r18, r24
    17e4:	39 1f       	adc	r19, r25
    17e6:	c9 01       	movw	r24, r18
    17e8:	89 5d       	subi	r24, 0xD9	; 217
    17ea:	9d 4f       	sbci	r25, 0xFD	; 253
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	8c 0d       	add	r24, r12
    17f0:	9d 1d       	adc	r25, r13
    17f2:	ad db       	rcall	.-2214   	; 0xf4e <_ZN11ExpanderPin5writeEb>
    17f4:	ff ef       	ldi	r31, 0xFF	; 255
    17f6:	20 e7       	ldi	r18, 0x70	; 112
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	f1 50       	subi	r31, 0x01	; 1
    17fc:	20 40       	sbci	r18, 0x00	; 0
    17fe:	80 40       	sbci	r24, 0x00	; 0
    1800:	e1 f7       	brne	.-8      	; 0x17fa <_ZN13OutputHandler6spiralEv+0xa8>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <_ZN13OutputHandler6spiralEv+0xb2>
    1804:	00 00       	nop
  {
	int index = indices[15 - j];
	push_button_leds[index].write(1);
	_delay_ms(pause);
  }
  for (int j = 0; j < 16; ++j)
    1806:	e0 16       	cp	r14, r16
    1808:	f1 06       	cpc	r15, r17
    180a:	11 f7       	brne	.-60     	; 0x17d0 <_ZN13OutputHandler6spiralEv+0x7e>
  {
	int index = indices[15 - j];
	push_button_leds[index].write(0);
	_delay_ms(pause);
  }
}
    180c:	a0 96       	adiw	r28, 0x20	; 32
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	08 95       	ret

0000182e <_ZN13OutputHandler7startupEv>:
  initialize_panel_leds();
  screen.initialize(memory, UART_3);
}

void OutputHandler::startup ()
{
    182e:	4f 92       	push	r4
    1830:	5f 92       	push	r5
    1832:	6f 92       	push	r6
    1834:	7f 92       	push	r7
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	7c 01       	movw	r14, r24
  // flash the panel-mounted LEDs
  for (int i = 0; i < 4; ++i)
    1850:	61 2c       	mov	r6, r1
    1852:	71 2c       	mov	r7, r1
  initialize_panel_leds();
  screen.initialize(memory, UART_3);
}

void OutputHandler::startup ()
{
    1854:	41 2c       	mov	r4, r1
    1856:	51 2c       	mov	r5, r1
    1858:	0f 2e       	mov	r0, r31
    185a:	f3 e0       	ldi	r31, 0x03	; 3
    185c:	af 2e       	mov	r10, r31
    185e:	b1 2c       	mov	r11, r1
    1860:	f0 2d       	mov	r31, r0
    1862:	3e c0       	rjmp	.+124    	; 0x18e0 <_ZN13OutputHandler7startupEv+0xb2>
  // flash the panel-mounted LEDs
  for (int i = 0; i < 4; ++i)
  {
	  for (int j = 0; j < 4; ++j)
	  {
		int index = i % 2 ? 3 - j : j;
    1864:	c1 14       	cp	r12, r1
    1866:	d1 04       	cpc	r13, r1
    1868:	21 f0       	breq	.+8      	; 0x1872 <_ZN13OutputHandler7startupEv+0x44>
    186a:	e5 01       	movw	r28, r10
    186c:	c8 19       	sub	r28, r8
    186e:	d9 09       	sbc	r29, r9
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <_ZN13OutputHandler7startupEv+0x46>
    1872:	e4 01       	movw	r28, r8
	    panel_leds[index].write(1);
    1874:	8e 01       	movw	r16, r28
    1876:	00 0f       	add	r16, r16
    1878:	11 1f       	adc	r17, r17
    187a:	0c 0f       	add	r16, r28
    187c:	1d 1f       	adc	r17, r29
    187e:	09 58       	subi	r16, 0x89	; 137
    1880:	1d 4f       	sbci	r17, 0xFD	; 253
    1882:	0e 0d       	add	r16, r14
    1884:	1f 1d       	adc	r17, r15
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	c8 01       	movw	r24, r16
    188a:	9c da       	rcall	.-2760   	; 0xdc4 <_ZN10DigitalPin5writeEb>
		panel_leds[index + 4].write(1);
    188c:	24 96       	adiw	r28, 0x04	; 4
    188e:	ce 01       	movw	r24, r28
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	c8 0f       	add	r28, r24
    1896:	d9 1f       	adc	r29, r25
    1898:	c9 58       	subi	r28, 0x89	; 137
    189a:	dd 4f       	sbci	r29, 0xFD	; 253
    189c:	ce 0d       	add	r28, r14
    189e:	df 1d       	adc	r29, r15
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	ce 01       	movw	r24, r28
    18a4:	8f da       	rcall	.-2786   	; 0xdc4 <_ZN10DigitalPin5writeEb>
    18a6:	2f ef       	ldi	r18, 0xFF	; 255
    18a8:	80 e7       	ldi	r24, 0x70	; 112
    18aa:	92 e0       	ldi	r25, 0x02	; 2
    18ac:	21 50       	subi	r18, 0x01	; 1
    18ae:	80 40       	sbci	r24, 0x00	; 0
    18b0:	90 40       	sbci	r25, 0x00	; 0
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <_ZN13OutputHandler7startupEv+0x7e>
    18b4:	00 c0       	rjmp	.+0      	; 0x18b6 <_ZN13OutputHandler7startupEv+0x88>
    18b6:	00 00       	nop
		_delay_ms(50);
		panel_leds[index].write(0);
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	c8 01       	movw	r24, r16
    18bc:	83 da       	rcall	.-2810   	; 0xdc4 <_ZN10DigitalPin5writeEb>
		panel_leds[index + 4].write(0);
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	ce 01       	movw	r24, r28
    18c2:	80 da       	rcall	.-2816   	; 0xdc4 <_ZN10DigitalPin5writeEb>
void OutputHandler::startup ()
{
  // flash the panel-mounted LEDs
  for (int i = 0; i < 4; ++i)
  {
	  for (int j = 0; j < 4; ++j)
    18c4:	2f ef       	ldi	r18, 0xFF	; 255
    18c6:	82 1a       	sub	r8, r18
    18c8:	92 0a       	sbc	r9, r18
    18ca:	84 e0       	ldi	r24, 0x04	; 4
    18cc:	88 16       	cp	r8, r24
    18ce:	91 04       	cpc	r9, r1
    18d0:	49 f6       	brne	.-110    	; 0x1864 <_ZN13OutputHandler7startupEv+0x36>
}

void OutputHandler::startup ()
{
  // flash the panel-mounted LEDs
  for (int i = 0; i < 4; ++i)
    18d2:	9f ef       	ldi	r25, 0xFF	; 255
    18d4:	69 1a       	sub	r6, r25
    18d6:	79 0a       	sbc	r7, r25
    18d8:	24 e0       	ldi	r18, 0x04	; 4
    18da:	62 16       	cp	r6, r18
    18dc:	71 04       	cpc	r7, r1
    18de:	39 f0       	breq	.+14     	; 0x18ee <_ZN13OutputHandler7startupEv+0xc0>
  initialize_panel_leds();
  screen.initialize(memory, UART_3);
}

void OutputHandler::startup ()
{
    18e0:	84 2c       	mov	r8, r4
    18e2:	95 2c       	mov	r9, r5
  // flash the panel-mounted LEDs
  for (int i = 0; i < 4; ++i)
  {
	  for (int j = 0; j < 4; ++j)
	  {
		int index = i % 2 ? 3 - j : j;
    18e4:	63 01       	movw	r12, r6
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	c8 22       	and	r12, r24
    18ea:	dd 24       	eor	r13, r13
    18ec:	bb cf       	rjmp	.-138    	; 0x1864 <_ZN13OutputHandler7startupEv+0x36>
		panel_leds[index + 4].write(0);
	  }	
  }

  // flash the push-button LEDs
  spiral();
    18ee:	c7 01       	movw	r24, r14
    18f0:	30 df       	rcall	.-416    	; 0x1752 <_ZN13OutputHandler6spiralEv>
}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	9f 90       	pop	r9
    1908:	8f 90       	pop	r8
    190a:	7f 90       	pop	r7
    190c:	6f 90       	pop	r6
    190e:	5f 90       	pop	r5
    1910:	4f 90       	pop	r4
    1912:	08 95       	ret

00001914 <_Z10copy_rangePhS_h>:
}

void I2C::stop ()
{
  TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  state = DONE;
    1914:	44 23       	and	r20, r20
    1916:	51 f0       	breq	.+20     	; 0x192c <_Z10copy_rangePhS_h+0x18>
    1918:	a8 2f       	mov	r26, r24
    191a:	b9 2f       	mov	r27, r25
    191c:	fb 01       	movw	r30, r22
    191e:	64 0f       	add	r22, r20
    1920:	71 1d       	adc	r23, r1
    1922:	8d 91       	ld	r24, X+
    1924:	81 93       	st	Z+, r24
    1926:	e6 17       	cp	r30, r22
    1928:	f7 07       	cpc	r31, r23
    192a:	d9 f7       	brne	.-10     	; 0x1922 <_Z10copy_rangePhS_h+0xe>
    192c:	08 95       	ret

0000192e <_ZN3I2C11set_addressEh>:
    192e:	66 0f       	add	r22, r22
    1930:	fc 01       	movw	r30, r24
    1932:	61 83       	std	Z+1, r22	; 0x01
    1934:	08 95       	ret

00001936 <_ZN3I2C12send_addressENS_9DirectionE>:
    1936:	fc 01       	movw	r30, r24
    1938:	61 11       	cpse	r22, r1
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <_ZN3I2C12send_addressENS_9DirectionE+0xe>
    193c:	81 81       	ldd	r24, Z+1	; 0x01
    193e:	81 60       	ori	r24, 0x01	; 1
    1940:	81 83       	std	Z+1, r24	; 0x01
    1942:	03 c0       	rjmp	.+6      	; 0x194a <_ZN3I2C12send_addressENS_9DirectionE+0x14>
    1944:	81 81       	ldd	r24, Z+1	; 0x01
    1946:	8e 7f       	andi	r24, 0xFE	; 254
    1948:	81 83       	std	Z+1, r24	; 0x01
    194a:	81 81       	ldd	r24, Z+1	; 0x01
    194c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1950:	84 e8       	ldi	r24, 0x84	; 132
    1952:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	80 83       	st	Z, r24
    195a:	08 95       	ret

0000195c <_ZN3I2C14read_data_byteEv>:
    195c:	fc 01       	movw	r30, r24
    195e:	84 85       	ldd	r24, Z+12	; 0x0c
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	25 85       	ldd	r18, Z+13	; 0x0d
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	21 50       	subi	r18, 0x01	; 1
    1968:	31 09       	sbc	r19, r1
    196a:	82 17       	cp	r24, r18
    196c:	93 07       	cpc	r25, r19
    196e:	31 f4       	brne	.+12     	; 0x197c <_ZN3I2C14read_data_byteEv+0x20>
    1970:	ac eb       	ldi	r26, 0xBC	; 188
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	9c 91       	ld	r25, X
    1976:	80 e4       	ldi	r24, 0x40	; 64
    1978:	89 27       	eor	r24, r25
    197a:	8c 93       	st	X, r24
    197c:	84 e8       	ldi	r24, 0x84	; 132
    197e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1982:	86 e0       	ldi	r24, 0x06	; 6
    1984:	80 83       	st	Z, r24
    1986:	08 95       	ret

00001988 <_ZN3I2C4failEv>:
}

void I2C::fail ()
{
    1988:	fc 01       	movw	r30, r24
  TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    198a:	84 e9       	ldi	r24, 0x94	; 148
    198c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  index = 0;
    1990:	14 86       	std	Z+12, r1	; 0x0c
  state = START;
    1992:	10 82       	st	Z, r1
  ++fail_count;
    1994:	86 85       	ldd	r24, Z+14	; 0x0e
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	86 87       	std	Z+14, r24	; 0x0e
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    199a:	85 e3       	ldi	r24, 0x35	; 53
    199c:	8a 95       	dec	r24
    199e:	f1 f7       	brne	.-4      	; 0x199c <_ZN3I2C4failEv+0x14>
    19a0:	00 00       	nop
    19a2:	08 95       	ret

000019a4 <_ZN3I2C12verify_startEv>:
  TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
  state = VERIFY_START;
}

void I2C::verify_start ()
{
    19a4:	fc 01       	movw	r30, r24
    *dest++ = *src++;
}

bool interrupt_flag_set ()
{
  return TWCR & (1 << TWINT);
    19a6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  state = VERIFY_START;
}

void I2C::verify_start ()
{
  if (!interrupt_flag_set())
    19aa:	99 23       	and	r25, r25
    19ac:	54 f4       	brge	.+20     	; 0x19c2 <_ZN3I2C12verify_startEv+0x1e>
  return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
  return (TWSR & 0xF8) == status;
    19ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    19b2:	88 7f       	andi	r24, 0xF8	; 248

void I2C::verify_start ()
{
  if (!interrupt_flag_set())
    return;
  if (check_status(TW_START))
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	19 f4       	brne	.+6      	; 0x19be <_ZN3I2C12verify_startEv+0x1a>
    state = SEND_ADDRESS;
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	80 83       	st	Z, r24
    19bc:	08 95       	ret
    19be:	cf 01       	movw	r24, r30
  else
    fail(); 
    19c0:	e3 cf       	rjmp	.-58     	; 0x1988 <_ZN3I2C4failEv>
    19c2:	08 95       	ret

000019c4 <_ZN3I2C25verify_write_address_sentEv>:
  TWCR = (1 << TWINT) | (1 << TWEN);
  state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
    19c4:	fc 01       	movw	r30, r24
    *dest++ = *src++;
}

bool interrupt_flag_set ()
{
  return TWCR & (1 << TWINT);
    19c6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  state = VERIFY_ADDRESS;
}

void I2C::verify_write_address_sent ()
{
  if (interrupt_flag_set())
    19ca:	99 23       	and	r25, r25
    19cc:	54 f4       	brge	.+20     	; 0x19e2 <_ZN3I2C25verify_write_address_sentEv+0x1e>
  return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
  return (TWSR & 0xF8) == status;
    19ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    19d2:	88 7f       	andi	r24, 0xF8	; 248

void I2C::verify_write_address_sent ()
{
  if (interrupt_flag_set())
  {
    if (check_status(TW_MT_SLA_ACK))
    19d4:	88 31       	cpi	r24, 0x18	; 24
    19d6:	19 f4       	brne	.+6      	; 0x19de <_ZN3I2C25verify_write_address_sentEv+0x1a>
      state = SEND_BYTE;
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	80 83       	st	Z, r24
    19dc:	08 95       	ret
    19de:	cf 01       	movw	r24, r30
    else
      fail(); 
    19e0:	d3 cf       	rjmp	.-90     	; 0x1988 <_ZN3I2C4failEv>
    19e2:	08 95       	ret

000019e4 <_ZN3I2C24verify_read_address_sentEv>:
  }
}

void I2C::verify_read_address_sent ()
{
    19e4:	fc 01       	movw	r30, r24
    *dest++ = *src++;
}

bool interrupt_flag_set ()
{
  return TWCR & (1 << TWINT);
    19e6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  }
}

void I2C::verify_read_address_sent ()
{
  if (interrupt_flag_set())
    19ea:	99 23       	and	r25, r25
    19ec:	54 f4       	brge	.+20     	; 0x1a02 <_ZN3I2C24verify_read_address_sentEv+0x1e>
  return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
  return (TWSR & 0xF8) == status;
    19ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    19f2:	88 7f       	andi	r24, 0xF8	; 248

void I2C::verify_read_address_sent ()
{
  if (interrupt_flag_set())
  {
    if (check_status(TW_MR_SLA_ACK))
    19f4:	80 34       	cpi	r24, 0x40	; 64
    19f6:	19 f4       	brne	.+6      	; 0x19fe <_ZN3I2C24verify_read_address_sentEv+0x1a>
      state = READ_BYTE;
    19f8:	85 e0       	ldi	r24, 0x05	; 5
    19fa:	80 83       	st	Z, r24
    19fc:	08 95       	ret
    19fe:	cf 01       	movw	r24, r30
    else
      fail();
    1a00:	c3 cf       	rjmp	.-122    	; 0x1988 <_ZN3I2C4failEv>
    1a02:	08 95       	ret

00001a04 <_ZN3I2C16verify_data_sentEv>:
    *dest++ = *src++;
}

bool interrupt_flag_set ()
{
  return TWCR & (1 << TWINT);
    1a04:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  state = VERIFY_DATA;
}

void I2C::verify_data_sent ()
{
  if (!interrupt_flag_set())
    1a08:	22 23       	and	r18, r18
    1a0a:	a4 f4       	brge	.+40     	; 0x1a34 <_ZN3I2C16verify_data_sentEv+0x30>
  return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
  return (TWSR & 0xF8) == status;
    1a0c:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1a10:	28 7f       	andi	r18, 0xF8	; 248

void I2C::verify_data_sent ()
{
  if (!interrupt_flag_set())
    return;
  if (check_status(TW_MT_DATA_ACK))
    1a12:	28 32       	cpi	r18, 0x28	; 40
    1a14:	71 f4       	brne	.+28     	; 0x1a32 <_ZN3I2C16verify_data_sentEv+0x2e>
  {
    if (++index < size)
    1a16:	fc 01       	movw	r30, r24
    1a18:	24 85       	ldd	r18, Z+12	; 0x0c
    1a1a:	2f 5f       	subi	r18, 0xFF	; 255
    1a1c:	24 87       	std	Z+12, r18	; 0x0c
    1a1e:	35 85       	ldd	r19, Z+13	; 0x0d
    1a20:	23 17       	cp	r18, r19
    1a22:	18 f4       	brcc	.+6      	; 0x1a2a <_ZN3I2C16verify_data_sentEv+0x26>
      state = SEND_BYTE;
    1a24:	24 e0       	ldi	r18, 0x04	; 4
    1a26:	20 83       	st	Z, r18
    1a28:	08 95       	ret
    else
      state = STOP;
    1a2a:	27 e0       	ldi	r18, 0x07	; 7
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	20 83       	st	Z, r18
    1a30:	08 95       	ret
  }
  else
    fail();
    1a32:	aa cf       	rjmp	.-172    	; 0x1988 <_ZN3I2C4failEv>
    1a34:	08 95       	ret

00001a36 <_ZN3I2C5writeEPhh>:
{
  this->address = address << 1;
}

int I2C::write (uint8_t * data, uint8_t size)
{
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	ec 01       	movw	r28, r24
    1a4e:	7b 01       	movw	r14, r22
    1a50:	14 2f       	mov	r17, r20
  copy_range(data, buffer, size);
    1a52:	bc 01       	movw	r22, r24
    1a54:	6e 5f       	subi	r22, 0xFE	; 254
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	c7 01       	movw	r24, r14
    1a5a:	5c df       	rcall	.-328    	; 0x1914 <_Z10copy_rangePhS_h>

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
  TWBR = (uint8_t)TWBR_VALUE;
    1a5c:	88 e4       	ldi	r24, 0x48	; 72
    1a5e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  this->size = size;
    1a62:	1d 87       	std	Y+13, r17	; 0x0d
  index = 0;
    1a64:	1c 86       	std	Y+12, r1	; 0x0c
  fail_count = 0;
    1a66:	1e 86       	std	Y+14, r1	; 0x0e
  state = START;
    1a68:	18 82       	st	Y, r1

int I2C::write (uint8_t * data, uint8_t size)
{
  copy_range(data, buffer, size);
  reset(size);
  while (state != DONE)
    1a6a:	e0 e0       	ldi	r30, 0x00	; 0
  }
}

void I2C::send_data_byte (uint8_t data)
{
  TWDR = data;
    1a6c:	0f 2e       	mov	r0, r31
    1a6e:	fb eb       	ldi	r31, 0xBB	; 187
    1a70:	cf 2e       	mov	r12, r31
    1a72:	d1 2c       	mov	r13, r1
    1a74:	f0 2d       	mov	r31, r0
  TWCR = (1 << TWINT) | (1 << TWEN);
    1a76:	0c eb       	ldi	r16, 0xBC	; 188
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f4 e8       	ldi	r31, 0x84	; 132
    1a7e:	9f 2e       	mov	r9, r31
    1a80:	f0 2d       	mov	r31, r0
  state = VERIFY_DATA;
    1a82:	0f 2e       	mov	r0, r31
    1a84:	f6 e0       	ldi	r31, 0x06	; 6
    1a86:	af 2e       	mov	r10, r31
    1a88:	f0 2d       	mov	r31, r0
  state = START;
}

void I2C::start ()
{
  TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f4 ee       	ldi	r31, 0xE4	; 228
    1a8e:	bf 2e       	mov	r11, r31
    1a90:	f0 2d       	mov	r31, r0
{
  copy_range(data, buffer, size);
  reset(size);
  while (state != DONE)
  {
    if (fail_count >= MAX_FAIL_COUNT)
    1a92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a94:	85 30       	cpi	r24, 0x05	; 5
    1a96:	a8 f5       	brcc	.+106    	; 0x1b02 <_ZN3I2C5writeEPhh+0xcc>
      return I2C_FAILURE;
    switch (state)
    1a98:	8e 2f       	mov	r24, r30
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	88 30       	cpi	r24, 0x08	; 8
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	38 f5       	brcc	.+78     	; 0x1af0 <_ZN3I2C5writeEPhh+0xba>
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e2 56       	subi	r30, 0x62	; 98
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	6e c7       	rjmp	.+3804   	; 0x2986 <__tablejump2__>
  state = START;
}

void I2C::start ()
{
  TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1aaa:	f8 01       	movw	r30, r16
    1aac:	b0 82       	st	Z, r11
  state = VERIFY_START;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	88 83       	st	Y, r24
    1ab2:	2d c0       	rjmp	.+90     	; 0x1b0e <_ZN3I2C5writeEPhh+0xd8>
    if (fail_count >= MAX_FAIL_COUNT)
      return I2C_FAILURE;
    switch (state)
    {
      case START:          start();
      when VERIFY_START:   verify_start();
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	76 df       	rcall	.-276    	; 0x19a4 <_ZN3I2C12verify_startEv>
      when SEND_ADDRESS:   send_address(WRITE);
    1ab8:	1e c0       	rjmp	.+60     	; 0x1af6 <_ZN3I2C5writeEPhh+0xc0>
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	ce 01       	movw	r24, r28
    1abe:	3b df       	rcall	.-394    	; 0x1936 <_ZN3I2C12send_addressENS_9DirectionE>
      when VERIFY_ADDRESS: verify_write_address_sent();
    1ac0:	1a c0       	rjmp	.+52     	; 0x1af6 <_ZN3I2C5writeEPhh+0xc0>
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	7f df       	rcall	.-258    	; 0x19c4 <_ZN3I2C25verify_write_address_sentEv>
      when SEND_BYTE:      send_data_byte(data[index]);
    1ac6:	17 c0       	rjmp	.+46     	; 0x1af6 <_ZN3I2C5writeEPhh+0xc0>
    1ac8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aca:	f7 01       	movw	r30, r14
    1acc:	e8 0f       	add	r30, r24
    1ace:	f1 1d       	adc	r31, r1
    1ad0:	80 81       	ld	r24, Z
  }
}

void I2C::send_data_byte (uint8_t data)
{
  TWDR = data;
    1ad2:	f6 01       	movw	r30, r12
    1ad4:	80 83       	st	Z, r24
  TWCR = (1 << TWINT) | (1 << TWEN);
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	90 82       	st	Z, r9
  state = VERIFY_DATA;
    1ada:	a8 82       	st	Y, r10
    1adc:	18 c0       	rjmp	.+48     	; 0x1b0e <_ZN3I2C5writeEPhh+0xd8>
      case START:          start();
      when VERIFY_START:   verify_start();
      when SEND_ADDRESS:   send_address(WRITE);
      when VERIFY_ADDRESS: verify_write_address_sent();
      when SEND_BYTE:      send_data_byte(data[index]);
      when VERIFY_DATA:    verify_data_sent();
    1ade:	ce 01       	movw	r24, r28
    1ae0:	91 df       	rcall	.-222    	; 0x1a04 <_ZN3I2C16verify_data_sentEv>
      when STOP:           stop();
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <_ZN3I2C5writeEPhh+0xc0>
    fail();
}

void I2C::stop ()
{
  TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ae4:	84 e9       	ldi	r24, 0x94	; 148
    1ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  state = DONE;
    1aea:	88 e0       	ldi	r24, 0x08	; 8
    1aec:	88 83       	st	Y, r24
    1aee:	0c c0       	rjmp	.+24     	; 0x1b08 <_ZN3I2C5writeEPhh+0xd2>
      when SEND_ADDRESS:   send_address(WRITE);
      when VERIFY_ADDRESS: verify_write_address_sent();
      when SEND_BYTE:      send_data_byte(data[index]);
      when VERIFY_DATA:    verify_data_sent();
      when STOP:           stop();
      otherwise:           state = DONE;
    1af0:	88 e0       	ldi	r24, 0x08	; 8
    1af2:	88 83       	st	Y, r24
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <_ZN3I2C5writeEPhh+0xd2>

int I2C::write (uint8_t * data, uint8_t size)
{
  copy_range(data, buffer, size);
  reset(size);
  while (state != DONE)
    1af6:	e8 81       	ld	r30, Y
    1af8:	e8 30       	cpi	r30, 0x08	; 8
    1afa:	59 f6       	brne	.-106    	; 0x1a92 <_ZN3I2C5writeEPhh+0x5c>
      when VERIFY_DATA:    verify_data_sent();
      when STOP:           stop();
      otherwise:           state = DONE;
    }
  }
  return I2C_SUCCESS;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	08 c0       	rjmp	.+16     	; 0x1b12 <_ZN3I2C5writeEPhh+0xdc>
  copy_range(data, buffer, size);
  reset(size);
  while (state != DONE)
  {
    if (fail_count >= MAX_FAIL_COUNT)
      return I2C_FAILURE;
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <_ZN3I2C5writeEPhh+0xdc>
      when VERIFY_DATA:    verify_data_sent();
      when STOP:           stop();
      otherwise:           state = DONE;
    }
  }
  return I2C_SUCCESS;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <_ZN3I2C5writeEPhh+0xdc>

int I2C::write (uint8_t * data, uint8_t size)
{
  copy_range(data, buffer, size);
  reset(size);
  while (state != DONE)
    1b0e:	e8 81       	ld	r30, Y
    1b10:	c0 cf       	rjmp	.-128    	; 0x1a92 <_ZN3I2C5writeEPhh+0x5c>
      when STOP:           stop();
      otherwise:           state = DONE;
    }
  }
  return I2C_SUCCESS;
}
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	cf 90       	pop	r12
    1b22:	bf 90       	pop	r11
    1b24:	af 90       	pop	r10
    1b26:	9f 90       	pop	r9
    1b28:	08 95       	ret

00001b2a <_ZN3I2C16verify_data_readEv>:
    *dest++ = *src++;
}

bool interrupt_flag_set ()
{
  return TWCR & (1 << TWINT);
    1b2a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    fail();
}

void I2C::verify_data_read ()
{
  if (!interrupt_flag_set())
    1b2e:	22 23       	and	r18, r18
    1b30:	fc f4       	brge	.+62     	; 0x1b70 <_ZN3I2C16verify_data_readEv+0x46>
    return;
  bool last_byte = !(TWCR & (1 << TWEA));
    1b32:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1b36:	26 ff       	sbrs	r18, 6
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <_ZN3I2C16verify_data_readEv+0x16>
    1b3a:	40 e5       	ldi	r20, 0x50	; 80
  State next_state = last_byte ? STOP : READ_BYTE;
    1b3c:	65 e0       	ldi	r22, 0x05	; 5
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <_ZN3I2C16verify_data_readEv+0x1a>
void I2C::verify_data_read ()
{
  if (!interrupt_flag_set())
    return;
  bool last_byte = !(TWCR & (1 << TWEA));
  uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
    1b40:	48 e5       	ldi	r20, 0x58	; 88
  State next_state = last_byte ? STOP : READ_BYTE;
    1b42:	67 e0       	ldi	r22, 0x07	; 7
  return TWCR & (1 << TWINT);
}

bool check_status (uint8_t status)
{
  return (TWSR & 0xF8) == status;
    1b44:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1b48:	28 7f       	andi	r18, 0xF8	; 248
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
  if (!interrupt_flag_set())
    return;
  bool last_byte = !(TWCR & (1 << TWEA));
  uint8_t status = last_byte ? TW_MR_DATA_NACK : TW_MR_DATA_ACK;
  State next_state = last_byte ? STOP : READ_BYTE;
  if (check_status(status))
    1b4e:	24 17       	cp	r18, r20
    1b50:	35 07       	cpc	r19, r21
    1b52:	69 f4       	brne	.+26     	; 0x1b6e <_ZN3I2C16verify_data_readEv+0x44>
  {
    buffer[index++] = TWDR;
    1b54:	fc 01       	movw	r30, r24
    1b56:	24 85       	ldd	r18, Z+12	; 0x0c
    1b58:	31 e0       	ldi	r19, 0x01	; 1
    1b5a:	32 0f       	add	r19, r18
    1b5c:	34 87       	std	Z+12, r19	; 0x0c
    1b5e:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b62:	e2 0f       	add	r30, r18
    1b64:	f1 1d       	adc	r31, r1
    1b66:	32 83       	std	Z+2, r19	; 0x02
    state = next_state;
    1b68:	fc 01       	movw	r30, r24
    1b6a:	60 83       	st	Z, r22
    1b6c:	08 95       	ret
  }
  else
    fail();
    1b6e:	0c cf       	rjmp	.-488    	; 0x1988 <_ZN3I2C4failEv>
    1b70:	08 95       	ret

00001b72 <_ZN3I2C4readEPhh>:
  }
  return I2C_SUCCESS;
}

int I2C::read (uint8_t * data, uint8_t size)
{
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	ec 01       	movw	r28, r24
    1b8a:	6b 01       	movw	r12, r22
    1b8c:	a4 2e       	mov	r10, r20

/*------------------------ Internal Helper Functions -------------------------*/

void I2C::reset (uint8_t size)
{
  TWBR = (uint8_t)TWBR_VALUE;
    1b8e:	88 e4       	ldi	r24, 0x48	; 72
    1b90:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  this->size = size;
    1b94:	4d 87       	std	Y+13, r20	; 0x0d
  index = 0;
    1b96:	1c 86       	std	Y+12, r1	; 0x0c
  fail_count = 0;
    1b98:	1e 86       	std	Y+14, r1	; 0x0e
  state = START;
    1b9a:	18 82       	st	Y, r1
}

int I2C::read (uint8_t * data, uint8_t size)
{
  reset(size);
  while (state != DONE)
    1b9c:	e0 e0       	ldi	r30, 0x00	; 0
  state = START;
}

void I2C::start ()
{
  TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b9e:	0f 2e       	mov	r0, r31
    1ba0:	fc eb       	ldi	r31, 0xBC	; 188
    1ba2:	ef 2e       	mov	r14, r31
    1ba4:	f1 2c       	mov	r15, r1
    1ba6:	f0 2d       	mov	r31, r0
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	f4 ee       	ldi	r31, 0xE4	; 228
    1bac:	9f 2e       	mov	r9, r31
    1bae:	f0 2d       	mov	r31, r0
  state = VERIFY_START;
    1bb0:	bb 24       	eor	r11, r11
    1bb2:	b3 94       	inc	r11
int I2C::read (uint8_t * data, uint8_t size)
{
  reset(size);
  while (state != DONE)
  {
    if (fail_count >= MAX_FAIL_COUNT)
    1bb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bb6:	85 30       	cpi	r24, 0x05	; 5
    1bb8:	90 f5       	brcc	.+100    	; 0x1c1e <_ZN3I2C4readEPhh+0xac>
      return I2C_FAILURE;   
    switch (state)
    1bba:	0e 2f       	mov	r16, r30
    1bbc:	10 e0       	ldi	r17, 0x00	; 0
    1bbe:	08 30       	cpi	r16, 0x08	; 8
    1bc0:	11 05       	cpc	r17, r1
    1bc2:	f8 f4       	brcc	.+62     	; 0x1c02 <_ZN3I2C4readEPhh+0x90>
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	ea 55       	subi	r30, 0x5A	; 90
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	dd c6       	rjmp	.+3514   	; 0x2986 <__tablejump2__>
  state = START;
}

void I2C::start ()
{
  TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1bcc:	f7 01       	movw	r30, r14
    1bce:	90 82       	st	Z, r9
  state = VERIFY_START;
    1bd0:	b8 82       	st	Y, r11
}

int I2C::read (uint8_t * data, uint8_t size)
{
  reset(size);
  while (state != DONE)
    1bd2:	eb 2d       	mov	r30, r11
    1bd4:	ef cf       	rjmp	.-34     	; 0x1bb4 <_ZN3I2C4readEPhh+0x42>
    if (fail_count >= MAX_FAIL_COUNT)
      return I2C_FAILURE;   
    switch (state)
    {
      case START:          start();
      when VERIFY_START:   verify_start();
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	e5 de       	rcall	.-566    	; 0x19a4 <_ZN3I2C12verify_startEv>
      when SEND_ADDRESS:   send_address(READ);
    1bda:	16 c0       	rjmp	.+44     	; 0x1c08 <_ZN3I2C4readEPhh+0x96>
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	ce 01       	movw	r24, r28
    1be0:	aa de       	rcall	.-684    	; 0x1936 <_ZN3I2C12send_addressENS_9DirectionE>
      when VERIFY_ADDRESS: verify_read_address_sent();
    1be2:	12 c0       	rjmp	.+36     	; 0x1c08 <_ZN3I2C4readEPhh+0x96>
    1be4:	ce 01       	movw	r24, r28
    1be6:	fe de       	rcall	.-516    	; 0x19e4 <_ZN3I2C24verify_read_address_sentEv>
      when READ_BYTE:      read_data_byte();
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <_ZN3I2C4readEPhh+0x96>
    1bea:	ce 01       	movw	r24, r28
    1bec:	b7 de       	rcall	.-658    	; 0x195c <_ZN3I2C14read_data_byteEv>
      when VERIFY_DATA:    verify_data_read();
    1bee:	0c c0       	rjmp	.+24     	; 0x1c08 <_ZN3I2C4readEPhh+0x96>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	9b df       	rcall	.-202    	; 0x1b2a <_ZN3I2C16verify_data_readEv>
      when STOP:           stop();
    1bf4:	09 c0       	rjmp	.+18     	; 0x1c08 <_ZN3I2C4readEPhh+0x96>
    fail();
}

void I2C::stop ()
{
  TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1bf6:	84 e9       	ldi	r24, 0x94	; 148
    1bf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  state = DONE;
    1bfc:	88 e0       	ldi	r24, 0x08	; 8
    1bfe:	88 83       	st	Y, r24
    1c00:	06 c0       	rjmp	.+12     	; 0x1c0e <_ZN3I2C4readEPhh+0x9c>
      when SEND_ADDRESS:   send_address(READ);
      when VERIFY_ADDRESS: verify_read_address_sent();
      when READ_BYTE:      read_data_byte();
      when VERIFY_DATA:    verify_data_read();
      when STOP:           stop();
      otherwise:           state = DONE;
    1c02:	88 e0       	ldi	r24, 0x08	; 8
    1c04:	88 83       	st	Y, r24
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <_ZN3I2C4readEPhh+0x9c>
}

int I2C::read (uint8_t * data, uint8_t size)
{
  reset(size);
  while (state != DONE)
    1c08:	e8 81       	ld	r30, Y
    1c0a:	e8 30       	cpi	r30, 0x08	; 8
    1c0c:	99 f6       	brne	.-90     	; 0x1bb4 <_ZN3I2C4readEPhh+0x42>
      when VERIFY_DATA:    verify_data_read();
      when STOP:           stop();
      otherwise:           state = DONE;
    }
  }
  copy_range(buffer, data, size);
    1c0e:	4a 2d       	mov	r20, r10
    1c10:	b6 01       	movw	r22, r12
    1c12:	ce 01       	movw	r24, r28
    1c14:	02 96       	adiw	r24, 0x02	; 2
    1c16:	7e de       	rcall	.-772    	; 0x1914 <_Z10copy_rangePhS_h>
  return I2C_SUCCESS;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <_ZN3I2C4readEPhh+0xb0>
{
  reset(size);
  while (state != DONE)
  {
    if (fail_count >= MAX_FAIL_COUNT)
      return I2C_FAILURE;   
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
      otherwise:           state = DONE;
    }
  }
  copy_range(buffer, data, size);
  return I2C_SUCCESS;
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	08 95       	ret

00001c3a <main>:

#define F_CPU 16000000UL
#include <util/delay.h>

int main ()
{
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	c4 5f       	subi	r28, 0xF4	; 244
    1c44:	d3 40       	sbci	r29, 0x03	; 3
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c50:	2f ef       	ldi	r18, 0xFF	; 255
    1c52:	83 ed       	ldi	r24, 0xD3	; 211
    1c54:	90 e3       	ldi	r25, 0x30	; 48
    1c56:	21 50       	subi	r18, 0x01	; 1
    1c58:	80 40       	sbci	r24, 0x00	; 0
    1c5a:	90 40       	sbci	r25, 0x00	; 0
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <main+0x1c>
    1c5e:	00 c0       	rjmp	.+0      	; 0x1c60 <main+0x26>
    1c60:	00 00       	nop
#include "../memory/memory.hpp"
#include "../uart/uart_module.hpp"
#include "../timer/SimpleTimer1.hpp"
#include "request.hpp"

class Communications
    1c62:	ce 01       	movw	r24, r28
    1c64:	05 96       	adiw	r24, 0x05	; 5
    1c66:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN12MessageQueueC1Ev>
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	82 56       	subi	r24, 0x62	; 98
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	0e 94 6f 05 	call	0xade	; 0xade <_ZN18FastTransferParserC1Ev>
    1c74:	ce 01       	movw	r24, r28
    1c76:	8f 52       	subi	r24, 0x2F	; 47
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	d9 d2       	rcall	.+1458   	; 0x222e <_ZN12SimpleTimer1C1Ev>
  _delay_ms(1000);
  ControlBoxEngine box;
  box.initialize();
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	0e 94 0f 06 	call	0xc1e	; 0xc1e <_ZN16ControlBoxEngine10initializeEv>
  box.loop();
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN16ControlBoxEngine4loopEv>
  return 0;
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	cc 50       	subi	r28, 0x0C	; 12
    1c92:	dc 4f       	sbci	r29, 0xFC	; 252
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <_ZN6Memory10initializeEv>:
}

/*-------------------------- Memory Implementation ---------------------------*/

void Memory::initialize ()
{
    1ca4:	ee e6       	ldi	r30, 0x6E	; 110
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	8e e6       	ldi	r24, 0x6E	; 110
    1caa:	98 e0       	ldi	r25, 0x08	; 8

/*------------------------- Variable Implementation --------------------------*/

void Variable::initialize ()
{
  value = 0;
    1cac:	11 82       	std	Z+1, r1	; 0x01
    1cae:	10 82       	st	Z, r1
  next = nullptr;
    1cb0:	13 82       	std	Z+3, r1	; 0x03
    1cb2:	12 82       	std	Z+2, r1	; 0x02
  prev = nullptr;
    1cb4:	15 82       	std	Z+5, r1	; 0x05
    1cb6:	14 82       	std	Z+4, r1	; 0x04
    1cb8:	36 96       	adiw	r30, 0x06	; 6

/*-------------------------- Memory Implementation ---------------------------*/

void Memory::initialize ()
{
  for (uint16_t i = 0; i < Memory::SIZE; ++i)
    1cba:	e8 17       	cp	r30, r24
    1cbc:	f9 07       	cpc	r31, r25
    1cbe:	b1 f7       	brne	.-20     	; 0x1cac <_ZN6Memory10initializeEv+0x8>
    variables[i].initialize();
}
    1cc0:	08 95       	ret

00001cc2 <_ZN6Memory5writeEhj>:

void Memory::write (uint8_t i, uint16_t value)
{
  Variable * ptr = &variables[i];
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	ff 1f       	adc	r31, r31
    1cca:	e8 0f       	add	r30, r24
    1ccc:	f9 1f       	adc	r31, r25
    1cce:	ee 0f       	add	r30, r30
    1cd0:	ff 1f       	adc	r31, r31
    1cd2:	e2 59       	subi	r30, 0x92	; 146
    1cd4:	fd 4f       	sbci	r31, 0xFD	; 253
  while (ptr->prev)
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <_ZN6Memory5writeEhj+0x18>
    ptr = ptr->prev;
    1cd8:	fc 01       	movw	r30, r24
}

void Memory::write (uint8_t i, uint16_t value)
{
  Variable * ptr = &variables[i];
  while (ptr->prev)
    1cda:	84 81       	ldd	r24, Z+4	; 0x04
    1cdc:	95 81       	ldd	r25, Z+5	; 0x05
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	d9 f7       	brne	.-10     	; 0x1cd8 <_ZN6Memory5writeEhj+0x16>
    ptr = ptr->prev;
  while (ptr)
    1ce2:	30 97       	sbiw	r30, 0x00	; 0
    1ce4:	39 f0       	breq	.+14     	; 0x1cf4 <_ZN6Memory5writeEhj+0x32>
  {
    ptr->value = value;
    1ce6:	71 83       	std	Z+1, r23	; 0x01
    1ce8:	60 83       	st	Z, r22
    ptr = ptr->next;
    1cea:	02 80       	ldd	r0, Z+2	; 0x02
    1cec:	f3 81       	ldd	r31, Z+3	; 0x03
    1cee:	e0 2d       	mov	r30, r0
void Memory::write (uint8_t i, uint16_t value)
{
  Variable * ptr = &variables[i];
  while (ptr->prev)
    ptr = ptr->prev;
  while (ptr)
    1cf0:	30 97       	sbiw	r30, 0x00	; 0
    1cf2:	c9 f7       	brne	.-14     	; 0x1ce6 <_ZN6Memory5writeEhj+0x24>
    1cf4:	08 95       	ret

00001cf6 <_ZN6Memory4readEh>:
  }
}

uint16_t Memory::read (uint8_t i)
{
  return variables[i].value;
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	e8 0f       	add	r30, r24
    1d00:	f9 1f       	adc	r31, r25
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	e2 59       	subi	r30, 0x92	; 146
    1d08:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	08 95       	ret

00001d10 <_ZN6Memory4linkEhh>:

void Memory::link (uint8_t i, uint8_t j)
{
  Variable * ptr = &variables[i];
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	fc 01       	movw	r30, r24
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	e8 0f       	add	r30, r24
    1d1a:	f9 1f       	adc	r31, r25
    1d1c:	ee 0f       	add	r30, r30
    1d1e:	ff 1f       	adc	r31, r31
    1d20:	e2 59       	subi	r30, 0x92	; 146
    1d22:	fd 4f       	sbci	r31, 0xFD	; 253
  while (ptr->next)
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <_ZN6Memory4linkEhh+0x18>
    ptr = ptr->next;
    1d26:	fc 01       	movw	r30, r24
}

void Memory::link (uint8_t i, uint8_t j)
{
  Variable * ptr = &variables[i];
  while (ptr->next)
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	d9 f7       	brne	.-10     	; 0x1d26 <_ZN6Memory4linkEhh+0x16>
    ptr = ptr->next;
  ptr->next = &variables[j];
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	cb 01       	movw	r24, r22
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	68 0f       	add	r22, r24
    1d3a:	79 1f       	adc	r23, r25
    1d3c:	66 0f       	add	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	62 59       	subi	r22, 0x92	; 146
    1d42:	7d 4f       	sbci	r23, 0xFD	; 253
    1d44:	73 83       	std	Z+3, r23	; 0x03
    1d46:	62 83       	std	Z+2, r22	; 0x02
    1d48:	08 95       	ret

00001d4a <_ZN6Memory13valid_addressEh>:
}

bool Memory::valid_address (uint8_t address)
{
  return address < Memory::SIZE;
}
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	08 95       	ret

00001d4e <_ZN11TouchScreen14assign_objectsEv>:
    otherwise:   uart3_initialize(UART3_BAUD_SELECT(SCREEN_BAUD, CLOCK_RATE));
  }
}

void TouchScreen::assign_objects ()
{
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	ec 01       	movw	r28, r24
    1d54:	fc 01       	movw	r30, r24
    1d56:	35 96       	adiw	r30, 0x05	; 5
    1d58:	9c 01       	movw	r18, r24
    1d5a:	2b 5f       	subi	r18, 0xFB	; 251
    1d5c:	3d 4f       	sbci	r19, 0xFD	; 253
  for (uint16_t i = 0; i < Memory::SIZE; ++i)
    objects[i] = NO_OBJECT;
    1d5e:	11 92       	st	Z+, r1
    1d60:	11 92       	st	Z+, r1
  }
}

void TouchScreen::assign_objects ()
{
  for (uint16_t i = 0; i < Memory::SIZE; ++i)
    1d62:	e2 17       	cp	r30, r18
    1d64:	f3 07       	cpc	r31, r19
    1d66:	d9 f7       	brne	.-10     	; 0x1d5e <_ZN11TouchScreen14assign_objectsEv+0x10>
    objects[i] = NO_OBJECT;
  
  // Form 0
  
  // Form 1
  objects[CONNECTED2] = Led0;
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	9e e0       	ldi	r25, 0x0E	; 14
    1d6c:	98 8b       	std	Y+16, r25	; 0x10
    1d6e:	8f 87       	std	Y+15, r24	; 0x0f
  memory->link(CONNECTED, CONNECTED2);
    1d70:	65 e0       	ldi	r22, 0x05	; 5
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	cd df       	rcall	.-102    	; 0x1d10 <_ZN6Memory4linkEhh>
  objects[MACRO_IN_PROGRESS] = Led3;
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	9e e0       	ldi	r25, 0x0E	; 14
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
  
  // Form 2
  objects[JOYSTICK_LEFT_X] = Gauge0;
    1d7e:	fe 01       	movw	r30, r28
    1d80:	eb 5b       	subi	r30, 0xBB	; 187
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	9b e0       	ldi	r25, 0x0B	; 11
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
  objects[JOYSTICK_LEFT_Y] = Gauge1;
    1d8c:	32 96       	adiw	r30, 0x02	; 2
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	9b e0       	ldi	r25, 0x0B	; 11
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
  objects[SLIDER_LEFT] = Gauge2;
    1d96:	36 96       	adiw	r30, 0x06	; 6
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	9b e0       	ldi	r25, 0x0B	; 11
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
  objects[JOYSTICK_RIGHT_X] = Gauge3;
    1da0:	34 97       	sbiw	r30, 0x04	; 4
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	9b e0       	ldi	r25, 0x0B	; 11
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
  objects[JOYSTICK_RIGHT_Y] = Gauge4;
    1daa:	32 96       	adiw	r30, 0x02	; 2
    1dac:	84 e0       	ldi	r24, 0x04	; 4
    1dae:	9b e0       	ldi	r25, 0x0B	; 11
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
  objects[SLIDER_RIGHT] = Gauge5;
    1db4:	c1 5b       	subi	r28, 0xB1	; 177
    1db6:	df 4f       	sbci	r29, 0xFF	; 255
    1db8:	85 e0       	ldi	r24, 0x05	; 5
    1dba:	9b e0       	ldi	r25, 0x0B	; 11
    1dbc:	99 83       	std	Y+1, r25	; 0x01
    1dbe:	88 83       	st	Y, r24
}
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	08 95       	ret

00001dc6 <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE>:
#define otherwise break;default

/*------------------------------ Initialization ------------------------------*/

void TouchScreen::initialize (Memory * memory, UART_MODULE uart_module)
{
    1dc6:	cf 93       	push	r28
    1dc8:	c4 2f       	mov	r28, r20
  this->page = 0x00;
    1dca:	fc 01       	movw	r30, r24
    1dcc:	11 82       	std	Z+1, r1	; 0x01
    1dce:	10 82       	st	Z, r1
  this->memory = memory;
    1dd0:	73 83       	std	Z+3, r23	; 0x03
    1dd2:	62 83       	std	Z+2, r22	; 0x02
  this->uart_module = uart_module;
    1dd4:	44 83       	std	Z+4, r20	; 0x04
  assign_objects();
    1dd6:	bb df       	rcall	.-138    	; 0x1d4e <_ZN11TouchScreen14assign_objectsEv>
  switch (uart_module)
    1dd8:	c1 30       	cpi	r28, 0x01	; 1
    1dda:	41 f0       	breq	.+16     	; 0x1dec <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE+0x26>
    1ddc:	18 f0       	brcs	.+6      	; 0x1de4 <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE+0x1e>
    1dde:	c2 30       	cpi	r28, 0x02	; 2
    1de0:	49 f0       	breq	.+18     	; 0x1df4 <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE+0x2e>
    1de2:	0c c0       	rjmp	.+24     	; 0x1dfc <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE+0x36>
  {
    case UART_0: uart0_initialize(UART0_BAUD_SELECT(SCREEN_BAUD, CLOCK_RATE));
    1de4:	87 e6       	ldi	r24, 0x67	; 103
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	07 d3       	rcall	.+1550   	; 0x23f8 <_Z16uart0_initializej>
    when UART_1: uart1_initialize(UART1_BAUD_SELECT(SCREEN_BAUD, CLOCK_RATE));
    1dea:	0b c0       	rjmp	.+22     	; 0x1e02 <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE+0x3c>
    1dec:	87 e6       	ldi	r24, 0x67	; 103
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	aa d3       	rcall	.+1876   	; 0x2546 <_Z16uart1_initializej>
    when UART_2: uart2_initialize(UART2_BAUD_SELECT(SCREEN_BAUD, CLOCK_RATE));
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE+0x3c>
    1df4:	87 e6       	ldi	r24, 0x67	; 103
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	4d d4       	rcall	.+2202   	; 0x2694 <_Z16uart2_initializej>
    otherwise:   uart3_initialize(UART3_BAUD_SELECT(SCREEN_BAUD, CLOCK_RATE));
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <_ZN11TouchScreen10initializeEP6Memory11UART_MODULE+0x3c>
    1dfc:	87 e6       	ldi	r24, 0x67	; 103
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	f0 d4       	rcall	.+2528   	; 0x27e2 <_Z16uart3_initializej>
  }
}
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <_ZNK11TouchScreen9send_byteEh>:

/*-------------------------- Screen Communications ---------------------------*/

void TouchScreen::send_byte (uint8_t value) const
{
  switch (uart_module)
    1e06:	fc 01       	movw	r30, r24
    1e08:	94 81       	ldd	r25, Z+4	; 0x04
    1e0a:	91 30       	cpi	r25, 0x01	; 1
    1e0c:	39 f0       	breq	.+14     	; 0x1e1c <_ZNK11TouchScreen9send_byteEh+0x16>
    1e0e:	18 f0       	brcs	.+6      	; 0x1e16 <_ZNK11TouchScreen9send_byteEh+0x10>
    1e10:	92 30       	cpi	r25, 0x02	; 2
    1e12:	39 f0       	breq	.+14     	; 0x1e22 <_ZNK11TouchScreen9send_byteEh+0x1c>
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <_ZNK11TouchScreen9send_byteEh+0x22>
  {
    case UART_0: uart0_send_byte(value);
    1e16:	86 2f       	mov	r24, r22
    1e18:	21 c3       	rjmp	.+1602   	; 0x245c <_Z15uart0_send_byteh>
    when UART_1: uart1_send_byte(value);
    1e1a:	08 95       	ret
    1e1c:	86 2f       	mov	r24, r22
    1e1e:	c5 c3       	rjmp	.+1930   	; 0x25aa <_Z15uart1_send_byteh>
    when UART_2: uart2_send_byte(value);
    1e20:	08 95       	ret
    1e22:	86 2f       	mov	r24, r22
    1e24:	69 c4       	rjmp	.+2258   	; 0x26f8 <_Z15uart2_send_byteh>
    otherwise:   uart3_send_byte(value);
    1e26:	08 95       	ret
    1e28:	86 2f       	mov	r24, r22
    1e2a:	0d c5       	rjmp	.+2586   	; 0x2846 <_Z15uart3_send_byteh>
    1e2c:	08 95       	ret

00001e2e <_ZNK11TouchScreen9read_byteEv>:
  }
}

uint8_t TouchScreen::read_byte () const
{
  switch (uart_module)
    1e2e:	fc 01       	movw	r30, r24
    1e30:	84 81       	ldd	r24, Z+4	; 0x04
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	41 f0       	breq	.+16     	; 0x1e46 <_ZNK11TouchScreen9read_byteEv+0x18>
    1e36:	28 f0       	brcs	.+10     	; 0x1e42 <_ZNK11TouchScreen9read_byteEv+0x14>
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	39 f0       	breq	.+14     	; 0x1e4a <_ZNK11TouchScreen9read_byteEv+0x1c>
    1e3c:	83 30       	cpi	r24, 0x03	; 3
    1e3e:	39 f0       	breq	.+14     	; 0x1e4e <_ZNK11TouchScreen9read_byteEv+0x20>
    1e40:	08 c0       	rjmp	.+16     	; 0x1e52 <_ZNK11TouchScreen9read_byteEv+0x24>
  {
    case UART_0: return uart0_read_byte();
    1e42:	ee c2       	rjmp	.+1500   	; 0x2420 <_Z15uart0_read_bytev>
    1e44:	08 95       	ret
    case UART_1: return uart1_read_byte();
    1e46:	93 c3       	rjmp	.+1830   	; 0x256e <_Z15uart1_read_bytev>
    1e48:	08 95       	ret
    case UART_2: return uart2_read_byte();
    1e4a:	38 c4       	rjmp	.+2160   	; 0x26bc <_Z15uart2_read_bytev>
    1e4c:	08 95       	ret
    case UART_3: return uart3_read_byte();
    1e4e:	dd c4       	rjmp	.+2490   	; 0x280a <_Z15uart3_read_bytev>
    1e50:	08 95       	ret
  }
  return 0;
    1e52:	80 e0       	ldi	r24, 0x00	; 0
}
    1e54:	08 95       	ret

00001e56 <_ZNK11TouchScreen12received_ackEv>:
	}
	return false;
}

bool TouchScreen::received_ack () const
{
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	1f 92       	push	r1
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	7c 01       	movw	r14, r24
  const uint16_t NACK = 0x0015;
  const uint16_t ACK = 0x0006;
  SimpleTimer0 timeout (200); //milliseconds
    1e68:	68 ec       	ldi	r22, 0xC8	; 200
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	41 d1       	rcall	.+642    	; 0x20f4 <_ZN12SimpleTimer0C1Ej>
  timeout.start();
    1e72:	ce 01       	movw	r24, r28
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	b1 d0       	rcall	.+354    	; 0x1fda <_ZN12SimpleTimer05startEv>
  while (!timeout.is_finished())
    1e78:	0a c0       	rjmp	.+20     	; 0x1e8e <_ZNK11TouchScreen12received_ackEv+0x38>
  {
    uint16_t val = read_byte();
    1e7a:	c7 01       	movw	r24, r14
    1e7c:	d8 df       	rcall	.-80     	; 0x1e2e <_ZNK11TouchScreen9read_byteEv>
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    if (val == NACK)
    1e82:	25 31       	cpi	r18, 0x15	; 21
    1e84:	31 05       	cpc	r19, r1
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <_ZNK11TouchScreen12received_ackEv+0x4a>
      return false;
    if (val == ACK)
    1e88:	26 30       	cpi	r18, 0x06	; 6
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	41 f0       	breq	.+16     	; 0x1e9e <_ZNK11TouchScreen12received_ackEv+0x48>
{
  const uint16_t NACK = 0x0015;
  const uint16_t ACK = 0x0006;
  SimpleTimer0 timeout (200); //milliseconds
  timeout.start();
  while (!timeout.is_finished())
    1e8e:	ce 01       	movw	r24, r28
    1e90:	01 96       	adiw	r24, 0x01	; 1
    1e92:	a7 d0       	rcall	.+334    	; 0x1fe2 <_ZN12SimpleTimer011is_finishedEv>
    1e94:	18 2f       	mov	r17, r24
    1e96:	88 23       	and	r24, r24
    1e98:	81 f3       	breq	.-32     	; 0x1e7a <_ZNK11TouchScreen12received_ackEv+0x24>
    if (val == NACK)
      return false;
    if (val == ACK)
      return true;
  }
  return false;
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
    1e9c:	01 c0       	rjmp	.+2      	; 0x1ea0 <_ZNK11TouchScreen12received_ackEv+0x4a>
  {
    uint16_t val = read_byte();
    if (val == NACK)
      return false;
    if (val == ACK)
      return true;
    1e9e:	11 e0       	ldi	r17, 0x01	; 1
  }
  return false;
}
    1ea0:	81 2f       	mov	r24, r17
    1ea2:	0f 90       	pop	r0
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	08 95       	ret

00001eb0 <_ZNK11TouchScreen12send_messageERK13ScreenMessage>:
  } while (!success && (i++ < MAX_ATTEMPTS));
  return success;
}
*/
bool TouchScreen::send_message (const ScreenMessage & msg) const
{
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	9c 01       	movw	r18, r24
	static bool good_screen_coms = true;
	const int MAX_ATTEMPTS = 10;
	if (good_screen_coms)
    1ebe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1ec2:	88 23       	and	r24, r24
    1ec4:	41 f1       	breq	.+80     	; 0x1f16 <_ZNK11TouchScreen12send_messageERK13ScreenMessage+0x66>
    1ec6:	eb 01       	movw	r28, r22
    1ec8:	89 01       	movw	r16, r18
    1eca:	e1 2c       	mov	r14, r1
    1ecc:	f1 2c       	mov	r15, r1
	{
		int i = 0;
		bool success = false;
		do
		{
			send_byte(msg.command);
    1ece:	68 81       	ld	r22, Y
    1ed0:	c8 01       	movw	r24, r16
    1ed2:	99 df       	rcall	.-206    	; 0x1e06 <_ZNK11TouchScreen9send_byteEh>
			send_byte(msg.object_type);
    1ed4:	69 81       	ldd	r22, Y+1	; 0x01
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	96 df       	rcall	.-212    	; 0x1e06 <_ZNK11TouchScreen9send_byteEh>
			send_byte(msg.object_index);
    1eda:	6a 81       	ldd	r22, Y+2	; 0x02
    1edc:	c8 01       	movw	r24, r16
    1ede:	93 df       	rcall	.-218    	; 0x1e06 <_ZNK11TouchScreen9send_byteEh>
			send_byte(msg.value_msb);
    1ee0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	90 df       	rcall	.-224    	; 0x1e06 <_ZNK11TouchScreen9send_byteEh>
			send_byte(msg.value_lsb);
    1ee6:	6c 81       	ldd	r22, Y+4	; 0x04
    1ee8:	c8 01       	movw	r24, r16
    1eea:	8d df       	rcall	.-230    	; 0x1e06 <_ZNK11TouchScreen9send_byteEh>
			send_byte(msg.checksum);
    1eec:	6d 81       	ldd	r22, Y+5	; 0x05
    1eee:	c8 01       	movw	r24, r16
    1ef0:	8a df       	rcall	.-236    	; 0x1e06 <_ZNK11TouchScreen9send_byteEh>
			success = received_ack();
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	b0 df       	rcall	.-160    	; 0x1e56 <_ZNK11TouchScreen12received_ackEv>
			++i;
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255
    1ef8:	e9 1a       	sub	r14, r25
    1efa:	f9 0a       	sbc	r15, r25
	const int MAX_ATTEMPTS = 10;
	if (good_screen_coms)
	{
		int i = 0;
		bool success = false;
		do
    1efc:	81 11       	cpse	r24, r1
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <_ZNK11TouchScreen12send_messageERK13ScreenMessage+0x5a>
			send_byte(msg.value_msb);
			send_byte(msg.value_lsb);
			send_byte(msg.checksum);
			success = received_ack();
			++i;
		} while (!success && (i < MAX_ATTEMPTS));
    1f00:	9a e0       	ldi	r25, 0x0A	; 10
    1f02:	e9 16       	cp	r14, r25
    1f04:	f1 04       	cpc	r15, r1
    1f06:	19 f7       	brne	.-58     	; 0x1ece <_ZNK11TouchScreen12send_messageERK13ScreenMessage+0x1e>
    1f08:	04 c0       	rjmp	.+8      	; 0x1f12 <_ZNK11TouchScreen12send_messageERK13ScreenMessage+0x62>
		if (i >= MAX_ATTEMPTS)
    1f0a:	9a e0       	ldi	r25, 0x0A	; 10
    1f0c:	e9 16       	cp	r14, r25
    1f0e:	f1 04       	cpc	r15, r1
    1f10:	14 f0       	brlt	.+4      	; 0x1f16 <_ZNK11TouchScreen12send_messageERK13ScreenMessage+0x66>
			good_screen_coms = false;
    1f12:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
		return success;
	}
	return false;
}
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	08 95       	ret

00001f24 <_ZNK11TouchScreen13update_objectEj>:
  for (uint16_t i = 0; i < Memory::SIZE; ++i)
    update_object(i);
}

void TouchScreen::update_object (uint16_t i) const
{
    1f24:	ef 92       	push	r14
    1f26:	ff 92       	push	r15
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <_ZNK11TouchScreen13update_objectEj+0xe>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <_ZNK11TouchScreen13update_objectEj+0x10>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <_ZNK11TouchScreen13update_objectEj+0x12>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	7c 01       	movw	r14, r24
  uint16_t object = objects[i];
    1f3c:	fb 01       	movw	r30, r22
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	e8 0f       	add	r30, r24
    1f44:	f9 1f       	adc	r31, r25
    1f46:	05 81       	ldd	r16, Z+5	; 0x05
    1f48:	16 81       	ldd	r17, Z+6	; 0x06
  if (object == NO_OBJECT)
    1f4a:	01 15       	cp	r16, r1
    1f4c:	11 05       	cpc	r17, r1
    1f4e:	91 f0       	breq	.+36     	; 0x1f74 <_ZNK11TouchScreen13update_objectEj+0x50>
    return;
  uint16_t value = memory->read(i);
    1f50:	86 2f       	mov	r24, r22
    1f52:	d1 de       	rcall	.-606    	; 0x1cf6 <_ZN6Memory4readEh>
  
  ScreenMessage msg;
  msg.command      = 0x01;
    1f54:	21 e0       	ldi	r18, 0x01	; 1
    1f56:	29 83       	std	Y+1, r18	; 0x01
  msg.object_type  = object >> 8;
    1f58:	1a 83       	std	Y+2, r17	; 0x02
  msg.object_index = object;
    1f5a:	0b 83       	std	Y+3, r16	; 0x03
  msg.value_msb    = value >> 8;
    1f5c:	9c 83       	std	Y+4, r25	; 0x04
  msg.value_lsb    = value;
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	20 27       	eor	r18, r16
    1f62:	21 27       	eor	r18, r17
    1f64:	28 27       	eor	r18, r24
  uint8_t value_msb;
  uint8_t value_lsb;
  uint8_t checksum;
  uint8_t calculate_correct_checksum ()
  {
    return command ^ object_type ^ object_index ^ value_msb ^ value_lsb;
    1f66:	92 27       	eor	r25, r18
  msg.checksum     = msg.calculate_correct_checksum();
    1f68:	9e 83       	std	Y+6, r25	; 0x06
  send_message(msg);
    1f6a:	be 01       	movw	r22, r28
    1f6c:	6f 5f       	subi	r22, 0xFF	; 255
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	c7 01       	movw	r24, r14
    1f72:	9e df       	rcall	.-196    	; 0x1eb0 <_ZNK11TouchScreen12send_messageERK13ScreenMessage>
}
    1f74:	26 96       	adiw	r28, 0x06	; 6
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	08 95       	ret

00001f8e <_ZNK11TouchScreen7refreshEv>:
}

/*----------------------------- Updating Screen ------------------------------*/

void TouchScreen::refresh () const
{
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
  static int count = 0;
  static const int rate = 10;
  if (count++ >= rate)
    1f96:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <_ZZNK11TouchScreen7refreshEvE5count>
    1f9a:	30 91 6f 08 	lds	r19, 0x086F	; 0x80086f <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    1f9e:	2a 30       	cpi	r18, 0x0A	; 10
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	2c f0       	brlt	.+10     	; 0x1fae <_ZNK11TouchScreen7refreshEv+0x20>
  {
	count = 0;
    1fa4:	10 92 6f 08 	sts	0x086F, r1	; 0x80086f <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    1fa8:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <_ZZNK11TouchScreen7refreshEvE5count>
    return;
    1fac:	11 c0       	rjmp	.+34     	; 0x1fd0 <_ZNK11TouchScreen7refreshEv+0x42>
    1fae:	8c 01       	movw	r16, r24

void TouchScreen::refresh () const
{
  static int count = 0;
  static const int rate = 10;
  if (count++ >= rate)
    1fb0:	2f 5f       	subi	r18, 0xFF	; 255
    1fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb4:	30 93 6f 08 	sts	0x086F, r19	; 0x80086f <_ZZNK11TouchScreen7refreshEvE5count+0x1>
    1fb8:	20 93 6e 08 	sts	0x086E, r18	; 0x80086e <_ZZNK11TouchScreen7refreshEvE5count>
    1fbc:	c0 e0       	ldi	r28, 0x00	; 0
    1fbe:	d0 e0       	ldi	r29, 0x00	; 0
  {
	count = 0;
    return;
  }
  for (uint16_t i = 0; i < Memory::SIZE; ++i)
    update_object(i);
    1fc0:	be 01       	movw	r22, r28
    1fc2:	c8 01       	movw	r24, r16
    1fc4:	af df       	rcall	.-162    	; 0x1f24 <_ZNK11TouchScreen13update_objectEj>
  if (count++ >= rate)
  {
	count = 0;
    return;
  }
  for (uint16_t i = 0; i < Memory::SIZE; ++i)
    1fc6:	21 96       	adiw	r28, 0x01	; 1
    1fc8:	c1 15       	cp	r28, r1
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	d8 07       	cpc	r29, r24
    1fce:	c1 f7       	brne	.-16     	; 0x1fc0 <_ZNK11TouchScreen7refreshEv+0x32>
    update_object(i);
}
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	08 95       	ret

00001fda <_ZN12SimpleTimer05startEv>:

void SimpleTimer0::restart ()
{
  reset();
  start();
}
    1fda:	a2 d1       	rcall	.+836    	; 0x2320 <_Z35timer0_enableTimerOverflowInterruptv>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	29 c1       	rjmp	.+594    	; 0x2232 <_Z21timer0_setClockSource12CLOCK_SOURCE>
    1fe0:	08 95       	ret

00001fe2 <_ZN12SimpleTimer011is_finishedEv>:
    1fe2:	55 d1       	rcall	.+682    	; 0x228e <_Z21timer0_getClockSourcev>
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	81 11       	cpse	r24, r1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	89 2f       	mov	r24, r25
    1fec:	08 95       	ret

00001fee <_Z5resetv>:
    1fee:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <_ZL5count>
    1ff2:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <_ZL5count+0x1>
    1ff6:	10 92 76 08 	sts	0x0876, r1	; 0x800876 <_ZL5count+0x2>
    1ffa:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <_ZL5count+0x3>
    1ffe:	96 d1       	rcall	.+812    	; 0x232c <_Z36timer0_disableTimerOverflowInterruptv>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	17 c1       	rjmp	.+558    	; 0x2232 <_Z21timer0_setClockSource12CLOCK_SOURCE>
    2004:	08 95       	ret

00002006 <__vector_23>:
    2006:	1f 92       	push	r1
    2008:	0f 92       	push	r0
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	0f 92       	push	r0
    200e:	11 24       	eor	r1, r1
    2010:	0b b6       	in	r0, 0x3b	; 59
    2012:	0f 92       	push	r0
    2014:	2f 93       	push	r18
    2016:	3f 93       	push	r19
    2018:	4f 93       	push	r20
    201a:	5f 93       	push	r21
    201c:	6f 93       	push	r22
    201e:	7f 93       	push	r23
    2020:	8f 93       	push	r24
    2022:	9f 93       	push	r25
    2024:	af 93       	push	r26
    2026:	bf 93       	push	r27
    2028:	ef 93       	push	r30
    202a:	ff 93       	push	r31
    202c:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <_ZL5count>
    2030:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <_ZL5count+0x1>
    2034:	a0 91 76 08 	lds	r26, 0x0876	; 0x800876 <_ZL5count+0x2>
    2038:	b0 91 77 08 	lds	r27, 0x0877	; 0x800877 <_ZL5count+0x3>
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	a1 1d       	adc	r26, r1
    2040:	b1 1d       	adc	r27, r1
    2042:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <_ZL5count>
    2046:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <_ZL5count+0x1>
    204a:	a0 93 76 08 	sts	0x0876, r26	; 0x800876 <_ZL5count+0x2>
    204e:	b0 93 77 08 	sts	0x0877, r27	; 0x800877 <_ZL5count+0x3>
    2052:	40 91 74 08 	lds	r20, 0x0874	; 0x800874 <_ZL5count>
    2056:	50 91 75 08 	lds	r21, 0x0875	; 0x800875 <_ZL5count+0x1>
    205a:	60 91 76 08 	lds	r22, 0x0876	; 0x800876 <_ZL5count+0x2>
    205e:	70 91 77 08 	lds	r23, 0x0877	; 0x800877 <_ZL5count+0x3>
    2062:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <_ZL9max_count>
    2066:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <_ZL9max_count+0x1>
    206a:	a0 91 72 08 	lds	r26, 0x0872	; 0x800872 <_ZL9max_count+0x2>
    206e:	b0 91 73 08 	lds	r27, 0x0873	; 0x800873 <_ZL9max_count+0x3>
    2072:	84 17       	cp	r24, r20
    2074:	95 07       	cpc	r25, r21
    2076:	a6 07       	cpc	r26, r22
    2078:	b7 07       	cpc	r27, r23
    207a:	08 f4       	brcc	.+2      	; 0x207e <__vector_23+0x78>
    207c:	b8 df       	rcall	.-144    	; 0x1fee <_Z5resetv>
    207e:	ff 91       	pop	r31
    2080:	ef 91       	pop	r30
    2082:	bf 91       	pop	r27
    2084:	af 91       	pop	r26
    2086:	9f 91       	pop	r25
    2088:	8f 91       	pop	r24
    208a:	7f 91       	pop	r23
    208c:	6f 91       	pop	r22
    208e:	5f 91       	pop	r21
    2090:	4f 91       	pop	r20
    2092:	3f 91       	pop	r19
    2094:	2f 91       	pop	r18
    2096:	0f 90       	pop	r0
    2098:	0b be       	out	0x3b, r0	; 59
    209a:	0f 90       	pop	r0
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	0f 90       	pop	r0
    20a0:	1f 90       	pop	r1
    20a2:	18 95       	reti

000020a4 <_Z13set_max_countm>:
  timer0_setClockSource(NO_CLOCK_SOURCE); // stops the timer module
}

void set_max_count (uint32_t length_ms)
{
  if (length_ms < MIN_DURATION)
    20a4:	61 15       	cp	r22, r1
    20a6:	71 05       	cpc	r23, r1
    20a8:	81 05       	cpc	r24, r1
    20aa:	91 05       	cpc	r25, r1
    20ac:	71 f0       	breq	.+28     	; 0x20ca <_Z13set_max_countm+0x26>
    20ae:	9b 01       	movw	r18, r22
    20b0:	ac 01       	movw	r20, r24
    20b2:	24 36       	cpi	r18, 0x64	; 100
    20b4:	8b e0       	ldi	r24, 0x0B	; 11
    20b6:	38 07       	cpc	r19, r24
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	48 07       	cpc	r20, r24
    20bc:	51 05       	cpc	r21, r1
    20be:	48 f0       	brcs	.+18     	; 0x20d2 <_Z13set_max_countm+0x2e>
    20c0:	23 e6       	ldi	r18, 0x63	; 99
    20c2:	3b e0       	ldi	r19, 0x0B	; 11
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	04 c0       	rjmp	.+8      	; 0x20d2 <_Z13set_max_countm+0x2e>
    length_ms = MIN_DURATION;
    20ca:	21 e0       	ldi	r18, 0x01	; 1
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
  else if (length_ms > MAX_DURATION)
    length_ms = MAX_DURATION;

  // tolerate following inefficiencies b/c not called often
  max_count = length_ms * CLOCK_RATE_MHz / MAX_TCNT;
    20d2:	a0 e8       	ldi	r26, 0x80	; 128
    20d4:	be e3       	ldi	r27, 0x3E	; 62
    20d6:	60 d4       	rcall	.+2240   	; 0x2998 <__muluhisi3>
    20d8:	2f ef       	ldi	r18, 0xFF	; 255
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	30 d4       	rcall	.+2144   	; 0x2942 <__udivmodsi4>
    20e2:	20 93 70 08 	sts	0x0870, r18	; 0x800870 <_ZL9max_count>
    20e6:	30 93 71 08 	sts	0x0871, r19	; 0x800871 <_ZL9max_count+0x1>
    20ea:	40 93 72 08 	sts	0x0872, r20	; 0x800872 <_ZL9max_count+0x2>
    20ee:	50 93 73 08 	sts	0x0873, r21	; 0x800873 <_ZL9max_count+0x3>
    20f2:	08 95       	ret

000020f4 <_ZN12SimpleTimer0C1Ej>:

/*----------------------- SimpleTimer0 implementation ------------------------*/

SimpleTimer0::SimpleTimer0 (uint16_t length_ms)
{
  set_max_count(length_ms);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	d5 df       	rcall	.-86     	; 0x20a4 <_Z13set_max_countm>
  timer0_setWaveformGenerationMode(NORMAL_MAX);
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	cb d0       	rcall	.+406    	; 0x2294 <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION>
  timer0_setCompareOutputModeA(COMPARE_OUTPUT_ZERO);
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	f8 d0       	rcall	.+496    	; 0x22f2 <_Z28timer0_setCompareOutputModeA19COMPARE_OUTPUT_MODE>
  reset();
    2102:	75 cf       	rjmp	.-278    	; 0x1fee <_Z5resetv>
    2104:	08 95       	ret

00002106 <__vector_20>:
	TIMSK1 &= 0b11111110; // disable timer overflow interrupt
	TCCR1B &= 0b11111000; // set clock source to no clock source
}

ISR (TIMER1_OVF_vect)
{
    2106:	1f 92       	push	r1
    2108:	0f 92       	push	r0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	0f 92       	push	r0
    210e:	11 24       	eor	r1, r1
    2110:	0b b6       	in	r0, 0x3b	; 59
    2112:	0f 92       	push	r0
    2114:	4f 93       	push	r20
    2116:	5f 93       	push	r21
    2118:	6f 93       	push	r22
    211a:	7f 93       	push	r23
    211c:	8f 93       	push	r24
    211e:	9f 93       	push	r25
    2120:	af 93       	push	r26
    2122:	bf 93       	push	r27
    2124:	ef 93       	push	r30
    2126:	ff 93       	push	r31
  ++count;
    2128:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <_ZL5count>
    212c:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <_ZL5count+0x1>
    2130:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <_ZL5count+0x2>
    2134:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <_ZL5count+0x3>
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	a1 1d       	adc	r26, r1
    213c:	b1 1d       	adc	r27, r1
    213e:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <_ZL5count>
    2142:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <_ZL5count+0x1>
    2146:	a0 93 7e 08 	sts	0x087E, r26	; 0x80087e <_ZL5count+0x2>
    214a:	b0 93 7f 08 	sts	0x087F, r27	; 0x80087f <_ZL5count+0x3>
  if (count > max_count)
    214e:	40 91 7c 08 	lds	r20, 0x087C	; 0x80087c <_ZL5count>
    2152:	50 91 7d 08 	lds	r21, 0x087D	; 0x80087d <_ZL5count+0x1>
    2156:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <_ZL5count+0x2>
    215a:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <_ZL5count+0x3>
    215e:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <_ZL9max_count>
    2162:	90 91 79 08 	lds	r25, 0x0879	; 0x800879 <_ZL9max_count+0x1>
    2166:	a0 91 7a 08 	lds	r26, 0x087A	; 0x80087a <_ZL9max_count+0x2>
    216a:	b0 91 7b 08 	lds	r27, 0x087B	; 0x80087b <_ZL9max_count+0x3>
    216e:	84 17       	cp	r24, r20
    2170:	95 07       	cpc	r25, r21
    2172:	a6 07       	cpc	r26, r22
    2174:	b7 07       	cpc	r27, r23
    2176:	90 f4       	brcc	.+36     	; 0x219c <__vector_20+0x96>
static volatile uint32_t count = 0;
static uint32_t max_count = 0;

static void reset ()
{
	count = 0;
    2178:	10 92 7c 08 	sts	0x087C, r1	; 0x80087c <_ZL5count>
    217c:	10 92 7d 08 	sts	0x087D, r1	; 0x80087d <_ZL5count+0x1>
    2180:	10 92 7e 08 	sts	0x087E, r1	; 0x80087e <_ZL5count+0x2>
    2184:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <_ZL5count+0x3>
	TIMSK1 &= 0b11111110; // disable timer overflow interrupt
    2188:	ef e6       	ldi	r30, 0x6F	; 111
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8e 7f       	andi	r24, 0xFE	; 254
    2190:	80 83       	st	Z, r24
	TCCR1B &= 0b11111000; // set clock source to no clock source
    2192:	e1 e8       	ldi	r30, 0x81	; 129
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	88 7f       	andi	r24, 0xF8	; 248
    219a:	80 83       	st	Z, r24
ISR (TIMER1_OVF_vect)
{
  ++count;
  if (count > max_count)
	reset();
}
    219c:	ff 91       	pop	r31
    219e:	ef 91       	pop	r30
    21a0:	bf 91       	pop	r27
    21a2:	af 91       	pop	r26
    21a4:	9f 91       	pop	r25
    21a6:	8f 91       	pop	r24
    21a8:	7f 91       	pop	r23
    21aa:	6f 91       	pop	r22
    21ac:	5f 91       	pop	r21
    21ae:	4f 91       	pop	r20
    21b0:	0f 90       	pop	r0
    21b2:	0b be       	out	0x3b, r0	; 59
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	0f 90       	pop	r0
    21ba:	1f 90       	pop	r1
    21bc:	18 95       	reti

000021be <_ZN12SimpleTimer15startEv>:
	reset();
}

void SimpleTimer1::start ()
{
	TIMSK1 |= 0b00000001; // enable timer overflow interrupt
    21be:	ef e6       	ldi	r30, 0x6F	; 111
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	81 60       	ori	r24, 0x01	; 1
    21c6:	80 83       	st	Z, r24
	TCCR1B |= 0b00000001; // internal clock source, no prescale
    21c8:	e1 e8       	ldi	r30, 0x81	; 129
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	80 83       	st	Z, r24
    21d2:	08 95       	ret

000021d4 <_ZN12SimpleTimer112set_durationEm>:

void SimpleTimer1::set_duration (uint32_t length_ms)
{
	const uint32_t CLOCK_RATE_kHz = 16000;
	const uint32_t MAX_TCNT = 0xFFFF;
	max_count = length_ms * CLOCK_RATE_kHz / MAX_TCNT;
    21d4:	a0 e8       	ldi	r26, 0x80	; 128
    21d6:	be e3       	ldi	r27, 0x3E	; 62
    21d8:	9a 01       	movw	r18, r20
    21da:	ab 01       	movw	r20, r22
    21dc:	dd d3       	rcall	.+1978   	; 0x2998 <__muluhisi3>
    21de:	2f ef       	ldi	r18, 0xFF	; 255
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	ad d3       	rcall	.+1882   	; 0x2942 <__udivmodsi4>
    21e8:	20 93 78 08 	sts	0x0878, r18	; 0x800878 <_ZL9max_count>
    21ec:	30 93 79 08 	sts	0x0879, r19	; 0x800879 <_ZL9max_count+0x1>
    21f0:	40 93 7a 08 	sts	0x087A, r20	; 0x80087a <_ZL9max_count+0x2>
    21f4:	50 93 7b 08 	sts	0x087B, r21	; 0x80087b <_ZL9max_count+0x3>
    21f8:	08 95       	ret

000021fa <_ZN12SimpleTimer111is_finishedEv>:
}

bool SimpleTimer1::is_finished ()
{
	return !(TCCR1B & 0b00000111);
    21fa:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    21fe:	97 70       	andi	r25, 0x07	; 7
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	09 f0       	breq	.+2      	; 0x2206 <__stack+0x7>
    2204:	80 e0       	ldi	r24, 0x00	; 0
}
    2206:	08 95       	ret

00002208 <_ZN12SimpleTimer15resetEv>:

void SimpleTimer1::reset ()
{
	count = 0;
    2208:	10 92 7c 08 	sts	0x087C, r1	; 0x80087c <_ZL5count>
    220c:	10 92 7d 08 	sts	0x087D, r1	; 0x80087d <_ZL5count+0x1>
    2210:	10 92 7e 08 	sts	0x087E, r1	; 0x80087e <_ZL5count+0x2>
    2214:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <_ZL5count+0x3>
	TIMSK1 &= 0b11111110; // disable timer overflow interrupt
    2218:	ef e6       	ldi	r30, 0x6F	; 111
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8e 7f       	andi	r24, 0xFE	; 254
    2220:	80 83       	st	Z, r24
	TCCR1B &= 0b11111000; // set clock source to no clock source
    2222:	e1 e8       	ldi	r30, 0x81	; 129
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 7f       	andi	r24, 0xF8	; 248
    222a:	80 83       	st	Z, r24
    222c:	08 95       	ret

0000222e <_ZN12SimpleTimer1C1Ev>:
	reset();
}

SimpleTimer1::SimpleTimer1 ()
{
	reset();
    222e:	ec cf       	rjmp	.-40     	; 0x2208 <_ZN12SimpleTimer15resetEv>
    2230:	08 95       	ret

00002232 <_Z21timer0_setClockSource12CLOCK_SOURCE>:
}

void timer0_disableOutputCompareAInterrupt ()
{
	// Write LOW to TIMSK0 (Bit 1)
	TIMSK0 &= 0b11111101;
    2232:	e8 2f       	mov	r30, r24
    2234:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <_ZL2cs>
    2238:	85 b5       	in	r24, 0x25	; 37
    223a:	88 7f       	andi	r24, 0xF8	; 248
    223c:	85 bd       	out	0x25, r24	; 37
    223e:	8e 2f       	mov	r24, r30
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	88 30       	cpi	r24, 0x08	; 8
    2244:	91 05       	cpc	r25, r1
    2246:	10 f5       	brcc	.+68     	; 0x228c <_Z21timer0_setClockSource12CLOCK_SOURCE+0x5a>
    2248:	fc 01       	movw	r30, r24
    224a:	e2 55       	subi	r30, 0x52	; 82
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	9b c3       	rjmp	.+1846   	; 0x2986 <__tablejump2__>
    2250:	85 b5       	in	r24, 0x25	; 37
    2252:	85 bd       	out	0x25, r24	; 37
    2254:	08 95       	ret
    2256:	85 b5       	in	r24, 0x25	; 37
    2258:	81 60       	ori	r24, 0x01	; 1
    225a:	85 bd       	out	0x25, r24	; 37
    225c:	08 95       	ret
    225e:	85 b5       	in	r24, 0x25	; 37
    2260:	82 60       	ori	r24, 0x02	; 2
    2262:	85 bd       	out	0x25, r24	; 37
    2264:	08 95       	ret
    2266:	85 b5       	in	r24, 0x25	; 37
    2268:	83 60       	ori	r24, 0x03	; 3
    226a:	85 bd       	out	0x25, r24	; 37
    226c:	08 95       	ret
    226e:	85 b5       	in	r24, 0x25	; 37
    2270:	84 60       	ori	r24, 0x04	; 4
    2272:	85 bd       	out	0x25, r24	; 37
    2274:	08 95       	ret
    2276:	85 b5       	in	r24, 0x25	; 37
    2278:	85 60       	ori	r24, 0x05	; 5
    227a:	85 bd       	out	0x25, r24	; 37
    227c:	08 95       	ret
    227e:	85 b5       	in	r24, 0x25	; 37
    2280:	86 60       	ori	r24, 0x06	; 6
    2282:	85 bd       	out	0x25, r24	; 37
    2284:	08 95       	ret
    2286:	85 b5       	in	r24, 0x25	; 37
    2288:	87 60       	ori	r24, 0x07	; 7
    228a:	85 bd       	out	0x25, r24	; 37
    228c:	08 95       	ret

0000228e <_Z21timer0_getClockSourcev>:
    228e:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_ZL2cs>
    2292:	08 95       	ret

00002294 <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION>:
    2294:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <_ZL3wgm>
    2298:	94 b5       	in	r25, 0x24	; 36
    229a:	9c 7f       	andi	r25, 0xFC	; 252
    229c:	94 bd       	out	0x24, r25	; 36
    229e:	95 b5       	in	r25, 0x25	; 37
    22a0:	97 7f       	andi	r25, 0xF7	; 247
    22a2:	95 bd       	out	0x25, r25	; 37
    22a4:	83 30       	cpi	r24, 0x03	; 3
    22a6:	99 f0       	breq	.+38     	; 0x22ce <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION+0x3a>
    22a8:	28 f4       	brcc	.+10     	; 0x22b4 <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION+0x20>
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	41 f0       	breq	.+16     	; 0x22be <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION+0x2a>
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	51 f0       	breq	.+20     	; 0x22c6 <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION+0x32>
    22b2:	08 95       	ret
    22b4:	84 30       	cpi	r24, 0x04	; 4
    22b6:	91 f0       	breq	.+36     	; 0x22dc <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION+0x48>
    22b8:	85 30       	cpi	r24, 0x05	; 5
    22ba:	a1 f0       	breq	.+40     	; 0x22e4 <_Z32timer0_setWaveformGenerationMode19WAVEFORM_GENERATION+0x50>
    22bc:	08 95       	ret
    22be:	84 b5       	in	r24, 0x24	; 36
    22c0:	82 60       	ori	r24, 0x02	; 2
    22c2:	84 bd       	out	0x24, r24	; 36
    22c4:	08 95       	ret
    22c6:	84 b5       	in	r24, 0x24	; 36
    22c8:	81 60       	ori	r24, 0x01	; 1
    22ca:	84 bd       	out	0x24, r24	; 36
    22cc:	08 95       	ret
    22ce:	84 b5       	in	r24, 0x24	; 36
    22d0:	81 60       	ori	r24, 0x01	; 1
    22d2:	84 bd       	out	0x24, r24	; 36
    22d4:	85 b5       	in	r24, 0x25	; 37
    22d6:	88 60       	ori	r24, 0x08	; 8
    22d8:	85 bd       	out	0x25, r24	; 37
    22da:	08 95       	ret
    22dc:	84 b5       	in	r24, 0x24	; 36
    22de:	83 60       	ori	r24, 0x03	; 3
    22e0:	84 bd       	out	0x24, r24	; 36
    22e2:	08 95       	ret
    22e4:	84 b5       	in	r24, 0x24	; 36
    22e6:	83 60       	ori	r24, 0x03	; 3
    22e8:	84 bd       	out	0x24, r24	; 36
    22ea:	85 b5       	in	r24, 0x25	; 37
    22ec:	88 60       	ori	r24, 0x08	; 8
    22ee:	85 bd       	out	0x25, r24	; 37
    22f0:	08 95       	ret

000022f2 <_Z28timer0_setCompareOutputModeA19COMPARE_OUTPUT_MODE>:
    22f2:	94 b5       	in	r25, 0x24	; 36
    22f4:	9f 73       	andi	r25, 0x3F	; 63
    22f6:	94 bd       	out	0x24, r25	; 36
    22f8:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <_ZL4comA>
    22fc:	82 30       	cpi	r24, 0x02	; 2
    22fe:	41 f0       	breq	.+16     	; 0x2310 <_Z28timer0_setCompareOutputModeA19COMPARE_OUTPUT_MODE+0x1e>
    2300:	83 30       	cpi	r24, 0x03	; 3
    2302:	51 f0       	breq	.+20     	; 0x2318 <_Z28timer0_setCompareOutputModeA19COMPARE_OUTPUT_MODE+0x26>
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	59 f4       	brne	.+22     	; 0x231e <_Z28timer0_setCompareOutputModeA19COMPARE_OUTPUT_MODE+0x2c>
    2308:	84 b5       	in	r24, 0x24	; 36
    230a:	80 64       	ori	r24, 0x40	; 64
    230c:	84 bd       	out	0x24, r24	; 36
    230e:	08 95       	ret
    2310:	84 b5       	in	r24, 0x24	; 36
    2312:	80 68       	ori	r24, 0x80	; 128
    2314:	84 bd       	out	0x24, r24	; 36
    2316:	08 95       	ret
    2318:	84 b5       	in	r24, 0x24	; 36
    231a:	80 6c       	ori	r24, 0xC0	; 192
    231c:	84 bd       	out	0x24, r24	; 36
    231e:	08 95       	ret

00002320 <_Z35timer0_enableTimerOverflowInterruptv>:

void
timer0_enableTimerOverflowInterrupt ()
{
	// Write HIGH to TIMSK0 (Bit 0)
	TIMSK0 |= 0b00000001;
    2320:	ee e6       	ldi	r30, 0x6E	; 110
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	81 60       	ori	r24, 0x01	; 1
    2328:	80 83       	st	Z, r24
    232a:	08 95       	ret

0000232c <_Z36timer0_disableTimerOverflowInterruptv>:

void
timer0_disableTimerOverflowInterrupt ()
{
	// Write LOW to TIMSK0 (Bit 0)
	TIMSK0 &= 0b11111110;
    232c:	ee e6       	ldi	r30, 0x6E	; 110
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8e 7f       	andi	r24, 0xFE	; 254
    2334:	80 83       	st	Z, r24
    2336:	08 95       	ret

00002338 <__vector_25>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART0_RECEIVE_INTERRUPT)
{
    2338:	1f 92       	push	r1
    233a:	0f 92       	push	r0
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	0f 92       	push	r0
    2340:	11 24       	eor	r1, r1
    2342:	0b b6       	in	r0, 0x3b	; 59
    2344:	0f 92       	push	r0
    2346:	2f 93       	push	r18
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	ef 93       	push	r30
    234e:	ff 93       	push	r31
    uint8_t new_head, data, status, error;
    status = UART0_STATUS;
    2350:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    2354:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE0) | (1 << DOR0)| (1 << UPE0));
    2358:	8c 71       	andi	r24, 0x1C	; 28

    new_head = (receive_head + 1) & UART0_BUFFER_MASK;
    235a:	e0 91 85 08 	lds	r30, 0x0885	; 0x800885 <_ZL12receive_head>
    235e:	ef 5f       	subi	r30, 0xFF	; 255
    2360:	ef 71       	andi	r30, 0x1F	; 31
    if (new_head == receive_tail)
    2362:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <_ZL12receive_tail>
    2366:	e9 17       	cp	r30, r25
    2368:	39 f0       	breq	.+14     	; 0x2378 <__vector_25+0x40>
        error = UART0_BUFFER_OVERFLOW >> 8;
    else
    {
        receive_head = new_head;
    236a:	e0 93 85 08 	sts	0x0885, r30	; 0x800885 <_ZL12receive_head>
        receive_buffer[new_head] = data;
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	ea 57       	subi	r30, 0x7A	; 122
    2372:	f7 4f       	sbci	r31, 0xF7	; 247
    2374:	20 83       	st	Z, r18
    2376:	01 c0       	rjmp	.+2      	; 0x237a <__vector_25+0x42>
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE0) | (1 << DOR0)| (1 << UPE0));

    new_head = (receive_head + 1) & UART0_BUFFER_MASK;
    if (new_head == receive_tail)
        error = UART0_BUFFER_OVERFLOW >> 8;
    2378:	82 e0       	ldi	r24, 0x02	; 2
    else
    {
        receive_head = new_head;
        receive_buffer[new_head] = data;
    }
    last_receive_error |= error;   
    237a:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_ZL18last_receive_error>
    237e:	89 2b       	or	r24, r25
    2380:	80 93 83 08 	sts	0x0883, r24	; 0x800883 <_ZL18last_receive_error>
}
    2384:	ff 91       	pop	r31
    2386:	ef 91       	pop	r30
    2388:	9f 91       	pop	r25
    238a:	8f 91       	pop	r24
    238c:	2f 91       	pop	r18
    238e:	0f 90       	pop	r0
    2390:	0b be       	out	0x3b, r0	; 59
    2392:	0f 90       	pop	r0
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	0f 90       	pop	r0
    2398:	1f 90       	pop	r1
    239a:	18 95       	reti

0000239c <__vector_26>:

ISR (UART0_TRANSMIT_INTERRUPT)
{
    239c:	1f 92       	push	r1
    239e:	0f 92       	push	r0
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	0f 92       	push	r0
    23a4:	11 24       	eor	r1, r1
    23a6:	0b b6       	in	r0, 0x3b	; 59
    23a8:	0f 92       	push	r0
    23aa:	8f 93       	push	r24
    23ac:	9f 93       	push	r25
    23ae:	ef 93       	push	r30
    23b0:	ff 93       	push	r31
    uint8_t new_tail;
    if (transmit_head != transmit_tail)
    23b2:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <_ZL13transmit_head>
    23b6:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <_ZL13transmit_tail>
    23ba:	98 17       	cp	r25, r24
    23bc:	69 f0       	breq	.+26     	; 0x23d8 <__vector_26+0x3c>
    {
        new_tail = (transmit_tail + 1) & UART0_BUFFER_MASK;
    23be:	e0 91 a6 08 	lds	r30, 0x08A6	; 0x8008a6 <_ZL13transmit_tail>
    23c2:	ef 5f       	subi	r30, 0xFF	; 255
    23c4:	ef 71       	andi	r30, 0x1F	; 31
        transmit_tail = new_tail;
    23c6:	e0 93 a6 08 	sts	0x08A6, r30	; 0x8008a6 <_ZL13transmit_tail>
        UART0_DATA = transmit_buffer[new_tail]; // transmit
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	e8 55       	subi	r30, 0x58	; 88
    23ce:	f7 4f       	sbci	r31, 0xF7	; 247
    23d0:	80 81       	ld	r24, Z
    23d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    23d6:	05 c0       	rjmp	.+10     	; 0x23e2 <__vector_26+0x46>
    }
    else
        UART0_CONTROL_B &= ~(1 << UDRIE0); // buffer empty so end transmission
    23d8:	e1 ec       	ldi	r30, 0xC1	; 193
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8f 7d       	andi	r24, 0xDF	; 223
    23e0:	80 83       	st	Z, r24
}
    23e2:	ff 91       	pop	r31
    23e4:	ef 91       	pop	r30
    23e6:	9f 91       	pop	r25
    23e8:	8f 91       	pop	r24
    23ea:	0f 90       	pop	r0
    23ec:	0b be       	out	0x3b, r0	; 59
    23ee:	0f 90       	pop	r0
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	0f 90       	pop	r0
    23f4:	1f 90       	pop	r1
    23f6:	18 95       	reti

000023f8 <_Z16uart0_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart0_initialize (uint16_t baudrate)
{
    transmit_head = 0;
    23f8:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <_ZL13transmit_head>
    transmit_tail = 0;
    23fc:	10 92 a6 08 	sts	0x08A6, r1	; 0x8008a6 <_ZL13transmit_tail>
    receive_head = 0;
    2400:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <_ZL12receive_head>
    receive_tail = 0;
    2404:	10 92 84 08 	sts	0x0884, r1	; 0x800884 <_ZL12receive_tail>

    UBRR0H = (uint8_t)((baudrate >> 8) & 0x80) ;
    2408:	90 78       	andi	r25, 0x80	; 128
    240a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t)(baudrate & 0x00FF);
    240e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      
    // set enable bits
    UART0_CONTROL_B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    2412:	88 e9       	ldi	r24, 0x98	; 152
    2414:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    // set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
    UART0_CONTROL_C = (1 << UCSZ01) | (1 << UCSZ00);
    2418:	86 e0       	ldi	r24, 0x06	; 6
    241a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    241e:	08 95       	ret

00002420 <_Z15uart0_read_bytev>:
uint16_t uart0_read_byte ()
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
    2420:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <_ZL12receive_head>
    2424:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <_ZL12receive_tail>
    2428:	98 17       	cp	r25, r24
    242a:	a9 f0       	breq	.+42     	; 0x2456 <_Z15uart0_read_bytev+0x36>
        return UART0_NO_DATA;
    new_tail = (receive_tail + 1) & UART0_BUFFER_MASK;
    242c:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <_ZL12receive_tail>
    2430:	8f 5f       	subi	r24, 0xFF	; 255
    2432:	8f 71       	andi	r24, 0x1F	; 31
    data = receive_buffer[new_tail];
    2434:	e8 2f       	mov	r30, r24
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	ea 57       	subi	r30, 0x7A	; 122
    243a:	f7 4f       	sbci	r31, 0xF7	; 247
    243c:	20 81       	ld	r18, Z
    receive_tail = new_tail;
    243e:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <_ZL12receive_tail>
    error = last_receive_error;
    2442:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <_ZL18last_receive_error>
    last_receive_error = 0;
    2446:	10 92 83 08 	sts	0x0883, r1	; 0x800883 <_ZL18last_receive_error>
    return (error << 8) + data;
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	98 2f       	mov	r25, r24
    244e:	88 27       	eor	r24, r24
    2450:	82 0f       	add	r24, r18
    2452:	91 1d       	adc	r25, r1
    2454:	08 95       	ret
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
        return UART0_NO_DATA;
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	91 e0       	ldi	r25, 0x01	; 1
    data = receive_buffer[new_tail];
    receive_tail = new_tail;
    error = last_receive_error;
    last_receive_error = 0;
    return (error << 8) + data;
}
    245a:	08 95       	ret

0000245c <_Z15uart0_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart0_send_byte (uint8_t data)
{
    uint8_t new_head;
    new_head  = (transmit_head + 1) & UART0_BUFFER_MASK;
    245c:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <_ZL13transmit_head>
    2460:	2f 5f       	subi	r18, 0xFF	; 255
    2462:	2f 71       	andi	r18, 0x1F	; 31
    while (new_head == transmit_tail) {} // wait for free space in buffer
    2464:	90 91 a6 08 	lds	r25, 0x08A6	; 0x8008a6 <_ZL13transmit_tail>
    2468:	29 17       	cp	r18, r25
    246a:	e1 f3       	breq	.-8      	; 0x2464 <_Z15uart0_send_byteh+0x8>
    transmit_buffer[new_head] = data;
    246c:	e2 2f       	mov	r30, r18
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	e8 55       	subi	r30, 0x58	; 88
    2472:	f7 4f       	sbci	r31, 0xF7	; 247
    2474:	80 83       	st	Z, r24
    transmit_head = new_head;
    2476:	20 93 a7 08 	sts	0x08A7, r18	; 0x8008a7 <_ZL13transmit_head>
    UART0_CONTROL_B |= (1 << UDRIE0); // enable data register interrupt
    247a:	e1 ec       	ldi	r30, 0xC1	; 193
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	80 62       	ori	r24, 0x20	; 32
    2482:	80 83       	st	Z, r24
    2484:	08 95       	ret

00002486 <__vector_36>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART1_RECEIVE_INTERRUPT)
{
    2486:	1f 92       	push	r1
    2488:	0f 92       	push	r0
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	0f 92       	push	r0
    248e:	11 24       	eor	r1, r1
    2490:	0b b6       	in	r0, 0x3b	; 59
    2492:	0f 92       	push	r0
    2494:	2f 93       	push	r18
    2496:	8f 93       	push	r24
    2498:	9f 93       	push	r25
    249a:	ef 93       	push	r30
    249c:	ff 93       	push	r31
    uint8_t new_head, data, status, error;
    status = UART1_STATUS;
    249e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    data = UART1_DATA;
    24a2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE1) | (1 << DOR1)| (1 << UPE1));
    24a6:	8c 71       	andi	r24, 0x1C	; 28

    new_head = (receive_head + 1) & UART1_BUFFER_MASK;
    24a8:	e0 91 ca 08 	lds	r30, 0x08CA	; 0x8008ca <_ZL12receive_head>
    24ac:	ef 5f       	subi	r30, 0xFF	; 255
    24ae:	ef 71       	andi	r30, 0x1F	; 31
    if (new_head == receive_tail)
    24b0:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <_ZL12receive_tail>
    24b4:	e9 17       	cp	r30, r25
    24b6:	39 f0       	breq	.+14     	; 0x24c6 <__vector_36+0x40>
        error = UART1_BUFFER_OVERFLOW >> 8;
    else
    {
        receive_head = new_head;
    24b8:	e0 93 ca 08 	sts	0x08CA, r30	; 0x8008ca <_ZL12receive_head>
        receive_buffer[new_head] = data;
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	e5 53       	subi	r30, 0x35	; 53
    24c0:	f7 4f       	sbci	r31, 0xF7	; 247
    24c2:	20 83       	st	Z, r18
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <__vector_36+0x42>
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE1) | (1 << DOR1)| (1 << UPE1));

    new_head = (receive_head + 1) & UART1_BUFFER_MASK;
    if (new_head == receive_tail)
        error = UART1_BUFFER_OVERFLOW >> 8;
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    else
    {
        receive_head = new_head;
        receive_buffer[new_head] = data;
    }
    last_receive_error |= error;   
    24c8:	90 91 c8 08 	lds	r25, 0x08C8	; 0x8008c8 <_ZL18last_receive_error>
    24cc:	89 2b       	or	r24, r25
    24ce:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <_ZL18last_receive_error>
}
    24d2:	ff 91       	pop	r31
    24d4:	ef 91       	pop	r30
    24d6:	9f 91       	pop	r25
    24d8:	8f 91       	pop	r24
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0b be       	out	0x3b, r0	; 59
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <__vector_37>:

ISR (UART1_TRANSMIT_INTERRUPT)
{
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	11 24       	eor	r1, r1
    24f4:	0b b6       	in	r0, 0x3b	; 59
    24f6:	0f 92       	push	r0
    24f8:	8f 93       	push	r24
    24fa:	9f 93       	push	r25
    24fc:	ef 93       	push	r30
    24fe:	ff 93       	push	r31
    uint8_t new_tail;
    if (transmit_head != transmit_tail)
    2500:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <_ZL13transmit_head>
    2504:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <_ZL13transmit_tail>
    2508:	98 17       	cp	r25, r24
    250a:	69 f0       	breq	.+26     	; 0x2526 <__vector_37+0x3c>
    {
        new_tail = (transmit_tail + 1) & UART1_BUFFER_MASK;
    250c:	e0 91 eb 08 	lds	r30, 0x08EB	; 0x8008eb <_ZL13transmit_tail>
    2510:	ef 5f       	subi	r30, 0xFF	; 255
    2512:	ef 71       	andi	r30, 0x1F	; 31
        transmit_tail = new_tail;
    2514:	e0 93 eb 08 	sts	0x08EB, r30	; 0x8008eb <_ZL13transmit_tail>
        UART1_DATA = transmit_buffer[new_tail]; // transmit
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	e3 51       	subi	r30, 0x13	; 19
    251c:	f7 4f       	sbci	r31, 0xF7	; 247
    251e:	80 81       	ld	r24, Z
    2520:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    2524:	05 c0       	rjmp	.+10     	; 0x2530 <__vector_37+0x46>
    }
    else
        UART1_CONTROL_B &= ~(1 << UDRIE1); // buffer empty so end transmission
    2526:	e9 ec       	ldi	r30, 0xC9	; 201
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8f 7d       	andi	r24, 0xDF	; 223
    252e:	80 83       	st	Z, r24
}
    2530:	ff 91       	pop	r31
    2532:	ef 91       	pop	r30
    2534:	9f 91       	pop	r25
    2536:	8f 91       	pop	r24
    2538:	0f 90       	pop	r0
    253a:	0b be       	out	0x3b, r0	; 59
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	0f 90       	pop	r0
    2542:	1f 90       	pop	r1
    2544:	18 95       	reti

00002546 <_Z16uart1_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart1_initialize (uint16_t baudrate)
{
    transmit_head = 0;
    2546:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <_ZL13transmit_head>
    transmit_tail = 0;
    254a:	10 92 eb 08 	sts	0x08EB, r1	; 0x8008eb <_ZL13transmit_tail>
    receive_head = 0;
    254e:	10 92 ca 08 	sts	0x08CA, r1	; 0x8008ca <_ZL12receive_head>
    receive_tail = 0;
    2552:	10 92 c9 08 	sts	0x08C9, r1	; 0x8008c9 <_ZL12receive_tail>

    UBRR1H = (uint8_t)((baudrate >> 8) & 0x80) ;
    2556:	90 78       	andi	r25, 0x80	; 128
    2558:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    UBRR1L = (uint8_t)(baudrate & 0x00FF);
    255c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
      
    // set enable bits
    UART1_CONTROL_B = (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    2560:	88 e9       	ldi	r24, 0x98	; 152
    2562:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    
    // set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
    UART1_CONTROL_C = (1 << UCSZ11) | (1 << UCSZ10);
    2566:	86 e0       	ldi	r24, 0x06	; 6
    2568:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    256c:	08 95       	ret

0000256e <_Z15uart1_read_bytev>:
uint16_t uart1_read_byte ()
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
    256e:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <_ZL12receive_head>
    2572:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <_ZL12receive_tail>
    2576:	98 17       	cp	r25, r24
    2578:	a9 f0       	breq	.+42     	; 0x25a4 <_Z15uart1_read_bytev+0x36>
        return UART1_NO_DATA;
    new_tail = (receive_tail + 1) & UART1_BUFFER_MASK;
    257a:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <_ZL12receive_tail>
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	8f 71       	andi	r24, 0x1F	; 31
    data = receive_buffer[new_tail];
    2582:	e8 2f       	mov	r30, r24
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	e5 53       	subi	r30, 0x35	; 53
    2588:	f7 4f       	sbci	r31, 0xF7	; 247
    258a:	20 81       	ld	r18, Z
	receive_tail = new_tail;
    258c:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <_ZL12receive_tail>
    error = last_receive_error;
    2590:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <_ZL18last_receive_error>
    last_receive_error = 0;
    2594:	10 92 c8 08 	sts	0x08C8, r1	; 0x8008c8 <_ZL18last_receive_error>
    return (error << 8) + data;
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	98 2f       	mov	r25, r24
    259c:	88 27       	eor	r24, r24
    259e:	82 0f       	add	r24, r18
    25a0:	91 1d       	adc	r25, r1
    25a2:	08 95       	ret
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
        return UART1_NO_DATA;
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    data = receive_buffer[new_tail];
	receive_tail = new_tail;
    error = last_receive_error;
    last_receive_error = 0;
    return (error << 8) + data;
}
    25a8:	08 95       	ret

000025aa <_Z15uart1_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart1_send_byte (uint8_t data)
{
    uint8_t new_head;
    new_head  = (transmit_head + 1) & UART1_BUFFER_MASK;
    25aa:	20 91 ec 08 	lds	r18, 0x08EC	; 0x8008ec <_ZL13transmit_head>
    25ae:	2f 5f       	subi	r18, 0xFF	; 255
    25b0:	2f 71       	andi	r18, 0x1F	; 31
    while (new_head == transmit_tail) {} // wait for free space in buffer
    25b2:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <_ZL13transmit_tail>
    25b6:	29 17       	cp	r18, r25
    25b8:	e1 f3       	breq	.-8      	; 0x25b2 <_Z15uart1_send_byteh+0x8>
    transmit_buffer[new_head] = data;
    25ba:	e2 2f       	mov	r30, r18
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	e3 51       	subi	r30, 0x13	; 19
    25c0:	f7 4f       	sbci	r31, 0xF7	; 247
    25c2:	80 83       	st	Z, r24
    transmit_head = new_head;
    25c4:	20 93 ec 08 	sts	0x08EC, r18	; 0x8008ec <_ZL13transmit_head>
    UART1_CONTROL_B |= (1 << UDRIE1); // enable data register interrupt
    25c8:	e9 ec       	ldi	r30, 0xC9	; 201
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 62       	ori	r24, 0x20	; 32
    25d0:	80 83       	st	Z, r24
    25d2:	08 95       	ret

000025d4 <__vector_51>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART2_RECEIVE_INTERRUPT)
{
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	0b b6       	in	r0, 0x3b	; 59
    25e0:	0f 92       	push	r0
    25e2:	2f 93       	push	r18
    25e4:	8f 93       	push	r24
    25e6:	9f 93       	push	r25
    25e8:	ef 93       	push	r30
    25ea:	ff 93       	push	r31
    uint8_t new_head, data, status, error;
    status = UART2_STATUS;
    25ec:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
    data = UART2_DATA;
    25f0:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE2) | (1 << DOR2)| (1 << UPE2));
    25f4:	8c 71       	andi	r24, 0x1C	; 28

    new_head = (receive_head + 1) & UART2_BUFFER_MASK;
    25f6:	e0 91 0f 09 	lds	r30, 0x090F	; 0x80090f <_ZL12receive_head>
    25fa:	ef 5f       	subi	r30, 0xFF	; 255
    25fc:	ef 71       	andi	r30, 0x1F	; 31
    if (new_head == receive_tail)
    25fe:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <_ZL12receive_tail>
    2602:	e9 17       	cp	r30, r25
    2604:	39 f0       	breq	.+14     	; 0x2614 <__vector_51+0x40>
        error = UART2_BUFFER_OVERFLOW >> 8;
    else
    {
        receive_head = new_head;
    2606:	e0 93 0f 09 	sts	0x090F, r30	; 0x80090f <_ZL12receive_head>
        receive_buffer[new_head] = data;
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	e0 5f       	subi	r30, 0xF0	; 240
    260e:	f6 4f       	sbci	r31, 0xF6	; 246
    2610:	20 83       	st	Z, r18
    2612:	01 c0       	rjmp	.+2      	; 0x2616 <__vector_51+0x42>
    // detect frame error, data overrun, or parity error
    error = status & ((1 << FE2) | (1 << DOR2)| (1 << UPE2));

    new_head = (receive_head + 1) & UART2_BUFFER_MASK;
    if (new_head == receive_tail)
        error = UART2_BUFFER_OVERFLOW >> 8;
    2614:	82 e0       	ldi	r24, 0x02	; 2
    else
    {
        receive_head = new_head;
        receive_buffer[new_head] = data;
    }
    last_receive_error |= error;   
    2616:	90 91 0d 09 	lds	r25, 0x090D	; 0x80090d <_ZL18last_receive_error>
    261a:	89 2b       	or	r24, r25
    261c:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <_ZL18last_receive_error>
}
    2620:	ff 91       	pop	r31
    2622:	ef 91       	pop	r30
    2624:	9f 91       	pop	r25
    2626:	8f 91       	pop	r24
    2628:	2f 91       	pop	r18
    262a:	0f 90       	pop	r0
    262c:	0b be       	out	0x3b, r0	; 59
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <__vector_52>:

ISR (UART2_TRANSMIT_INTERRUPT)
{
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	0b b6       	in	r0, 0x3b	; 59
    2644:	0f 92       	push	r0
    2646:	8f 93       	push	r24
    2648:	9f 93       	push	r25
    264a:	ef 93       	push	r30
    264c:	ff 93       	push	r31
    uint8_t new_tail;
    if (transmit_head != transmit_tail)
    264e:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <_ZL13transmit_head>
    2652:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <_ZL13transmit_tail>
    2656:	98 17       	cp	r25, r24
    2658:	69 f0       	breq	.+26     	; 0x2674 <__vector_52+0x3c>
    {
        new_tail = (transmit_tail + 1) & UART2_BUFFER_MASK;
    265a:	e0 91 30 09 	lds	r30, 0x0930	; 0x800930 <_ZL13transmit_tail>
    265e:	ef 5f       	subi	r30, 0xFF	; 255
    2660:	ef 71       	andi	r30, 0x1F	; 31
        transmit_tail = new_tail;
    2662:	e0 93 30 09 	sts	0x0930, r30	; 0x800930 <_ZL13transmit_tail>
        UART2_DATA = transmit_buffer[new_tail]; // transmit
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	ee 5c       	subi	r30, 0xCE	; 206
    266a:	f6 4f       	sbci	r31, 0xF6	; 246
    266c:	80 81       	ld	r24, Z
    266e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    2672:	05 c0       	rjmp	.+10     	; 0x267e <__vector_52+0x46>
    }
    else
        UART2_CONTROL_B &= ~(1 << UDRIE2); // buffer empty so end transmission
    2674:	e1 ed       	ldi	r30, 0xD1	; 209
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	8f 7d       	andi	r24, 0xDF	; 223
    267c:	80 83       	st	Z, r24
}
    267e:	ff 91       	pop	r31
    2680:	ef 91       	pop	r30
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	0f 90       	pop	r0
    2688:	0b be       	out	0x3b, r0	; 59
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	0f 90       	pop	r0
    2690:	1f 90       	pop	r1
    2692:	18 95       	reti

00002694 <_Z16uart2_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart2_initialize (uint16_t baudrate)
{
    transmit_head = 0;
    2694:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <_ZL13transmit_head>
    transmit_tail = 0;
    2698:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <_ZL13transmit_tail>
    receive_head = 0;
    269c:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <_ZL12receive_head>
    receive_tail = 0;
    26a0:	10 92 0e 09 	sts	0x090E, r1	; 0x80090e <_ZL12receive_tail>

    UBRR2H = (uint8_t)((baudrate >> 8) & 0x80) ;
    26a4:	90 78       	andi	r25, 0x80	; 128
    26a6:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
    UBRR2L = (uint8_t)(baudrate & 0x00FF);
    26aa:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
      
    // set enable bits
    UART2_CONTROL_B = (1 << RXCIE2) | (1 << RXEN2) | (1 << TXEN2);
    26ae:	88 e9       	ldi	r24, 0x98	; 152
    26b0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
    
    // set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
    UART2_CONTROL_C = (1 << UCSZ21) | (1 << UCSZ20);
    26b4:	86 e0       	ldi	r24, 0x06	; 6
    26b6:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    26ba:	08 95       	ret

000026bc <_Z15uart2_read_bytev>:
uint16_t uart2_read_byte ()
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
    26bc:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <_ZL12receive_head>
    26c0:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <_ZL12receive_tail>
    26c4:	98 17       	cp	r25, r24
    26c6:	a9 f0       	breq	.+42     	; 0x26f2 <_Z15uart2_read_bytev+0x36>
        return UART2_NO_DATA;
    new_tail = (receive_tail + 1) & UART2_BUFFER_MASK;
    26c8:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <_ZL12receive_tail>
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	8f 71       	andi	r24, 0x1F	; 31
    data = receive_buffer[new_tail];
    26d0:	e8 2f       	mov	r30, r24
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	e0 5f       	subi	r30, 0xF0	; 240
    26d6:	f6 4f       	sbci	r31, 0xF6	; 246
    26d8:	20 81       	ld	r18, Z
	receive_tail = new_tail;
    26da:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <_ZL12receive_tail>
    error = last_receive_error;
    26de:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <_ZL18last_receive_error>
    last_receive_error = 0;
    26e2:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <_ZL18last_receive_error>
    return (error << 8) + data;
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	98 2f       	mov	r25, r24
    26ea:	88 27       	eor	r24, r24
    26ec:	82 0f       	add	r24, r18
    26ee:	91 1d       	adc	r25, r1
    26f0:	08 95       	ret
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
        return UART2_NO_DATA;
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    data = receive_buffer[new_tail];
	receive_tail = new_tail;
    error = last_receive_error;
    last_receive_error = 0;
    return (error << 8) + data;
}
    26f6:	08 95       	ret

000026f8 <_Z15uart2_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart2_send_byte (uint8_t data)
{
    uint8_t new_head;
    new_head  = (transmit_head + 1) & UART2_BUFFER_MASK;
    26f8:	20 91 31 09 	lds	r18, 0x0931	; 0x800931 <_ZL13transmit_head>
    26fc:	2f 5f       	subi	r18, 0xFF	; 255
    26fe:	2f 71       	andi	r18, 0x1F	; 31
    while (new_head == transmit_tail) {} // wait for free space in buffer
    2700:	90 91 30 09 	lds	r25, 0x0930	; 0x800930 <_ZL13transmit_tail>
    2704:	29 17       	cp	r18, r25
    2706:	e1 f3       	breq	.-8      	; 0x2700 <_Z15uart2_send_byteh+0x8>
    transmit_buffer[new_head] = data;
    2708:	e2 2f       	mov	r30, r18
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	ee 5c       	subi	r30, 0xCE	; 206
    270e:	f6 4f       	sbci	r31, 0xF6	; 246
    2710:	80 83       	st	Z, r24
    transmit_head = new_head;
    2712:	20 93 31 09 	sts	0x0931, r18	; 0x800931 <_ZL13transmit_head>
    UART2_CONTROL_B |= (1 << UDRIE2); // enable data register interrupt
    2716:	e1 ed       	ldi	r30, 0xD1	; 209
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	80 62       	ori	r24, 0x20	; 32
    271e:	80 83       	st	Z, r24
    2720:	08 95       	ret

00002722 <__vector_54>:
static volatile uint8_t last_receive_error;

/*------------------------ Interrupt Service Routines ------------------------*/

ISR (UART3_RECEIVE_INTERRUPT)
{
    2722:	1f 92       	push	r1
    2724:	0f 92       	push	r0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	0f 92       	push	r0
    272a:	11 24       	eor	r1, r1
    272c:	0b b6       	in	r0, 0x3b	; 59
    272e:	0f 92       	push	r0
    2730:	2f 93       	push	r18
    2732:	8f 93       	push	r24
    2734:	9f 93       	push	r25
    2736:	ef 93       	push	r30
    2738:	ff 93       	push	r31
    uint8_t new_head, data, status, error;
    status = UART3_STATUS;
    273a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7e0130>
    data = UART3_DATA;
    273e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7e0136>
    
    // detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));
    2742:	8c 71       	andi	r24, 0x1C	; 28

    new_head = (receive_head + 1) & UART3_BUFFER_MASK;
    2744:	e0 91 54 09 	lds	r30, 0x0954	; 0x800954 <_ZL12receive_head>
    2748:	ef 5f       	subi	r30, 0xFF	; 255
    274a:	ef 71       	andi	r30, 0x1F	; 31
    if (new_head == receive_tail)
    274c:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <_ZL12receive_tail>
    2750:	e9 17       	cp	r30, r25
    2752:	39 f0       	breq	.+14     	; 0x2762 <__vector_54+0x40>
        error = UART3_BUFFER_OVERFLOW >> 8;
    else
    {
        receive_head = new_head;
    2754:	e0 93 54 09 	sts	0x0954, r30	; 0x800954 <_ZL12receive_head>
        receive_buffer[new_head] = data;
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	eb 5a       	subi	r30, 0xAB	; 171
    275c:	f6 4f       	sbci	r31, 0xF6	; 246
    275e:	20 83       	st	Z, r18
    2760:	01 c0       	rjmp	.+2      	; 0x2764 <__vector_54+0x42>
    // detect frame error, data overrun, or parity error
	error = status & ((1 << FE3) | (1 << DOR3)| (1 << UPE3));

    new_head = (receive_head + 1) & UART3_BUFFER_MASK;
    if (new_head == receive_tail)
        error = UART3_BUFFER_OVERFLOW >> 8;
    2762:	82 e0       	ldi	r24, 0x02	; 2
    else
    {
        receive_head = new_head;
        receive_buffer[new_head] = data;
    }
    last_receive_error |= error;   
    2764:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <_ZL18last_receive_error>
    2768:	89 2b       	or	r24, r25
    276a:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <_ZL18last_receive_error>
}
    276e:	ff 91       	pop	r31
    2770:	ef 91       	pop	r30
    2772:	9f 91       	pop	r25
    2774:	8f 91       	pop	r24
    2776:	2f 91       	pop	r18
    2778:	0f 90       	pop	r0
    277a:	0b be       	out	0x3b, r0	; 59
    277c:	0f 90       	pop	r0
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	0f 90       	pop	r0
    2782:	1f 90       	pop	r1
    2784:	18 95       	reti

00002786 <__vector_55>:

ISR (UART3_TRANSMIT_INTERRUPT)
{
    2786:	1f 92       	push	r1
    2788:	0f 92       	push	r0
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	0f 92       	push	r0
    278e:	11 24       	eor	r1, r1
    2790:	0b b6       	in	r0, 0x3b	; 59
    2792:	0f 92       	push	r0
    2794:	8f 93       	push	r24
    2796:	9f 93       	push	r25
    2798:	ef 93       	push	r30
    279a:	ff 93       	push	r31
    uint8_t new_tail;
    if (transmit_head != transmit_tail)
    279c:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <_ZL13transmit_head>
    27a0:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <_ZL13transmit_tail>
    27a4:	98 17       	cp	r25, r24
    27a6:	69 f0       	breq	.+26     	; 0x27c2 <__vector_55+0x3c>
    {
        new_tail = (transmit_tail + 1) & UART3_BUFFER_MASK;
    27a8:	e0 91 75 09 	lds	r30, 0x0975	; 0x800975 <_ZL13transmit_tail>
    27ac:	ef 5f       	subi	r30, 0xFF	; 255
    27ae:	ef 71       	andi	r30, 0x1F	; 31
        transmit_tail = new_tail;
    27b0:	e0 93 75 09 	sts	0x0975, r30	; 0x800975 <_ZL13transmit_tail>
        UART3_DATA = transmit_buffer[new_tail]; // transmit
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	e9 58       	subi	r30, 0x89	; 137
    27b8:	f6 4f       	sbci	r31, 0xF6	; 246
    27ba:	80 81       	ld	r24, Z
    27bc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7e0136>
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <__vector_55+0x46>
    }
    else
        UART3_CONTROL_B &= ~(1 << UDRIE3); // buffer empty so end transmission
    27c2:	e1 e3       	ldi	r30, 0x31	; 49
    27c4:	f1 e0       	ldi	r31, 0x01	; 1
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 7d       	andi	r24, 0xDF	; 223
    27ca:	80 83       	st	Z, r24
}
    27cc:	ff 91       	pop	r31
    27ce:	ef 91       	pop	r30
    27d0:	9f 91       	pop	r25
    27d2:	8f 91       	pop	r24
    27d4:	0f 90       	pop	r0
    27d6:	0b be       	out	0x3b, r0	; 59
    27d8:	0f 90       	pop	r0
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	0f 90       	pop	r0
    27de:	1f 90       	pop	r1
    27e0:	18 95       	reti

000027e2 <_Z16uart3_initializej>:

/*------------------------------ Initialization ------------------------------*/

void uart3_initialize (uint16_t baudrate)
{
    transmit_head = 0;
    27e2:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <_ZL13transmit_head>
    transmit_tail = 0;
    27e6:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <_ZL13transmit_tail>
    receive_head = 0;
    27ea:	10 92 54 09 	sts	0x0954, r1	; 0x800954 <_ZL12receive_head>
    receive_tail = 0;
    27ee:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <_ZL12receive_tail>

    UBRR3H = (uint8_t)((baudrate >> 8) & 0x80) ;
    27f2:	90 78       	andi	r25, 0x80	; 128
    27f4:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7e0135>
    UBRR3L = (uint8_t)(baudrate & 0x00FF);
    27f8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7e0134>
      
    // set enable bits
    UART3_CONTROL_B = (1 << RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    27fc:	88 e9       	ldi	r24, 0x98	; 152
    27fe:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7e0131>
    
    // set frame format (asynchronous, 8 bits of data, no parity bit, 1 stop bit)
    UART3_CONTROL_C = (1 << UCSZ31) | (1 << UCSZ30);
    2802:	86 e0       	ldi	r24, 0x06	; 6
    2804:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7e0132>
    2808:	08 95       	ret

0000280a <_Z15uart3_read_bytev>:
uint16_t uart3_read_byte ()
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
    280a:	90 91 54 09 	lds	r25, 0x0954	; 0x800954 <_ZL12receive_head>
    280e:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <_ZL12receive_tail>
    2812:	98 17       	cp	r25, r24
    2814:	a9 f0       	breq	.+42     	; 0x2840 <_Z15uart3_read_bytev+0x36>
        return UART3_NO_DATA;
    new_tail = (receive_tail + 1) & UART3_BUFFER_MASK;
    2816:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <_ZL12receive_tail>
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	8f 71       	andi	r24, 0x1F	; 31
    data = receive_buffer[new_tail];
    281e:	e8 2f       	mov	r30, r24
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	eb 5a       	subi	r30, 0xAB	; 171
    2824:	f6 4f       	sbci	r31, 0xF6	; 246
    2826:	20 81       	ld	r18, Z
	receive_tail = new_tail;
    2828:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <_ZL12receive_tail>
    error = last_receive_error;
    282c:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <_ZL18last_receive_error>
    last_receive_error = 0;
    2830:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <_ZL18last_receive_error>
    return (error << 8) + data;
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	98 2f       	mov	r25, r24
    2838:	88 27       	eor	r24, r24
    283a:	82 0f       	add	r24, r18
    283c:	91 1d       	adc	r25, r1
    283e:	08 95       	ret
{    
    uint8_t new_tail;
    uint8_t data;
    uint8_t error;
    if (receive_head == receive_tail)
        return UART3_NO_DATA;
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	91 e0       	ldi	r25, 0x01	; 1
    data = receive_buffer[new_tail];
	receive_tail = new_tail;
    error = last_receive_error;
    last_receive_error = 0;
    return (error << 8) + data;
}
    2844:	08 95       	ret

00002846 <_Z15uart3_send_byteh>:
/*--------------------- Functions for Writing to Buffer ----------------------*/

void uart3_send_byte (uint8_t data)
{
    uint8_t new_head;
    new_head  = (transmit_head + 1) & UART3_BUFFER_MASK;
    2846:	20 91 76 09 	lds	r18, 0x0976	; 0x800976 <_ZL13transmit_head>
    284a:	2f 5f       	subi	r18, 0xFF	; 255
    284c:	2f 71       	andi	r18, 0x1F	; 31
    while (new_head == transmit_tail) {} // wait for free space in buffer
    284e:	90 91 75 09 	lds	r25, 0x0975	; 0x800975 <_ZL13transmit_tail>
    2852:	29 17       	cp	r18, r25
    2854:	e1 f3       	breq	.-8      	; 0x284e <_Z15uart3_send_byteh+0x8>
    transmit_buffer[new_head] = data;
    2856:	e2 2f       	mov	r30, r18
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	e9 58       	subi	r30, 0x89	; 137
    285c:	f6 4f       	sbci	r31, 0xF6	; 246
    285e:	80 83       	st	Z, r24
    transmit_head = new_head;
    2860:	20 93 76 09 	sts	0x0976, r18	; 0x800976 <_ZL13transmit_head>
    UART3_CONTROL_B |= (1 << UDRIE3); // enable data register interrupt
    2864:	e1 e3       	ldi	r30, 0x31	; 49
    2866:	f1 e0       	ldi	r31, 0x01	; 1
    2868:	80 81       	ld	r24, Z
    286a:	80 62       	ori	r24, 0x20	; 32
    286c:	80 83       	st	Z, r24
    286e:	08 95       	ret

00002870 <__cmpsf2>:
    2870:	40 d0       	rcall	.+128    	; 0x28f2 <__fp_cmp>
    2872:	08 f4       	brcc	.+2      	; 0x2876 <__cmpsf2+0x6>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	08 95       	ret

00002878 <__floatunsisf>:
    2878:	e8 94       	clt
    287a:	09 c0       	rjmp	.+18     	; 0x288e <__floatsisf+0x12>

0000287c <__floatsisf>:
    287c:	97 fb       	bst	r25, 7
    287e:	3e f4       	brtc	.+14     	; 0x288e <__floatsisf+0x12>
    2880:	90 95       	com	r25
    2882:	80 95       	com	r24
    2884:	70 95       	com	r23
    2886:	61 95       	neg	r22
    2888:	7f 4f       	sbci	r23, 0xFF	; 255
    288a:	8f 4f       	sbci	r24, 0xFF	; 255
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	99 23       	and	r25, r25
    2890:	a9 f0       	breq	.+42     	; 0x28bc <__floatsisf+0x40>
    2892:	f9 2f       	mov	r31, r25
    2894:	96 e9       	ldi	r25, 0x96	; 150
    2896:	bb 27       	eor	r27, r27
    2898:	93 95       	inc	r25
    289a:	f6 95       	lsr	r31
    289c:	87 95       	ror	r24
    289e:	77 95       	ror	r23
    28a0:	67 95       	ror	r22
    28a2:	b7 95       	ror	r27
    28a4:	f1 11       	cpse	r31, r1
    28a6:	f8 cf       	rjmp	.-16     	; 0x2898 <__floatsisf+0x1c>
    28a8:	fa f4       	brpl	.+62     	; 0x28e8 <__floatsisf+0x6c>
    28aa:	bb 0f       	add	r27, r27
    28ac:	11 f4       	brne	.+4      	; 0x28b2 <__floatsisf+0x36>
    28ae:	60 ff       	sbrs	r22, 0
    28b0:	1b c0       	rjmp	.+54     	; 0x28e8 <__floatsisf+0x6c>
    28b2:	6f 5f       	subi	r22, 0xFF	; 255
    28b4:	7f 4f       	sbci	r23, 0xFF	; 255
    28b6:	8f 4f       	sbci	r24, 0xFF	; 255
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	16 c0       	rjmp	.+44     	; 0x28e8 <__floatsisf+0x6c>
    28bc:	88 23       	and	r24, r24
    28be:	11 f0       	breq	.+4      	; 0x28c4 <__floatsisf+0x48>
    28c0:	96 e9       	ldi	r25, 0x96	; 150
    28c2:	11 c0       	rjmp	.+34     	; 0x28e6 <__floatsisf+0x6a>
    28c4:	77 23       	and	r23, r23
    28c6:	21 f0       	breq	.+8      	; 0x28d0 <__floatsisf+0x54>
    28c8:	9e e8       	ldi	r25, 0x8E	; 142
    28ca:	87 2f       	mov	r24, r23
    28cc:	76 2f       	mov	r23, r22
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <__floatsisf+0x5e>
    28d0:	66 23       	and	r22, r22
    28d2:	71 f0       	breq	.+28     	; 0x28f0 <__floatsisf+0x74>
    28d4:	96 e8       	ldi	r25, 0x86	; 134
    28d6:	86 2f       	mov	r24, r22
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	2a f0       	brmi	.+10     	; 0x28e8 <__floatsisf+0x6c>
    28de:	9a 95       	dec	r25
    28e0:	66 0f       	add	r22, r22
    28e2:	77 1f       	adc	r23, r23
    28e4:	88 1f       	adc	r24, r24
    28e6:	da f7       	brpl	.-10     	; 0x28de <__floatsisf+0x62>
    28e8:	88 0f       	add	r24, r24
    28ea:	96 95       	lsr	r25
    28ec:	87 95       	ror	r24
    28ee:	97 f9       	bld	r25, 7
    28f0:	08 95       	ret

000028f2 <__fp_cmp>:
    28f2:	99 0f       	add	r25, r25
    28f4:	00 08       	sbc	r0, r0
    28f6:	55 0f       	add	r21, r21
    28f8:	aa 0b       	sbc	r26, r26
    28fa:	e0 e8       	ldi	r30, 0x80	; 128
    28fc:	fe ef       	ldi	r31, 0xFE	; 254
    28fe:	16 16       	cp	r1, r22
    2900:	17 06       	cpc	r1, r23
    2902:	e8 07       	cpc	r30, r24
    2904:	f9 07       	cpc	r31, r25
    2906:	c0 f0       	brcs	.+48     	; 0x2938 <__fp_cmp+0x46>
    2908:	12 16       	cp	r1, r18
    290a:	13 06       	cpc	r1, r19
    290c:	e4 07       	cpc	r30, r20
    290e:	f5 07       	cpc	r31, r21
    2910:	98 f0       	brcs	.+38     	; 0x2938 <__fp_cmp+0x46>
    2912:	62 1b       	sub	r22, r18
    2914:	73 0b       	sbc	r23, r19
    2916:	84 0b       	sbc	r24, r20
    2918:	95 0b       	sbc	r25, r21
    291a:	39 f4       	brne	.+14     	; 0x292a <__fp_cmp+0x38>
    291c:	0a 26       	eor	r0, r26
    291e:	61 f0       	breq	.+24     	; 0x2938 <__fp_cmp+0x46>
    2920:	23 2b       	or	r18, r19
    2922:	24 2b       	or	r18, r20
    2924:	25 2b       	or	r18, r21
    2926:	21 f4       	brne	.+8      	; 0x2930 <__fp_cmp+0x3e>
    2928:	08 95       	ret
    292a:	0a 26       	eor	r0, r26
    292c:	09 f4       	brne	.+2      	; 0x2930 <__fp_cmp+0x3e>
    292e:	a1 40       	sbci	r26, 0x01	; 1
    2930:	a6 95       	lsr	r26
    2932:	8f ef       	ldi	r24, 0xFF	; 255
    2934:	81 1d       	adc	r24, r1
    2936:	81 1d       	adc	r24, r1
    2938:	08 95       	ret

0000293a <__gesf2>:
    293a:	db df       	rcall	.-74     	; 0x28f2 <__fp_cmp>
    293c:	08 f4       	brcc	.+2      	; 0x2940 <__gesf2+0x6>
    293e:	8f ef       	ldi	r24, 0xFF	; 255
    2940:	08 95       	ret

00002942 <__udivmodsi4>:
    2942:	a1 e2       	ldi	r26, 0x21	; 33
    2944:	1a 2e       	mov	r1, r26
    2946:	aa 1b       	sub	r26, r26
    2948:	bb 1b       	sub	r27, r27
    294a:	fd 01       	movw	r30, r26
    294c:	0d c0       	rjmp	.+26     	; 0x2968 <__udivmodsi4_ep>

0000294e <__udivmodsi4_loop>:
    294e:	aa 1f       	adc	r26, r26
    2950:	bb 1f       	adc	r27, r27
    2952:	ee 1f       	adc	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	a2 17       	cp	r26, r18
    2958:	b3 07       	cpc	r27, r19
    295a:	e4 07       	cpc	r30, r20
    295c:	f5 07       	cpc	r31, r21
    295e:	20 f0       	brcs	.+8      	; 0x2968 <__udivmodsi4_ep>
    2960:	a2 1b       	sub	r26, r18
    2962:	b3 0b       	sbc	r27, r19
    2964:	e4 0b       	sbc	r30, r20
    2966:	f5 0b       	sbc	r31, r21

00002968 <__udivmodsi4_ep>:
    2968:	66 1f       	adc	r22, r22
    296a:	77 1f       	adc	r23, r23
    296c:	88 1f       	adc	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	1a 94       	dec	r1
    2972:	69 f7       	brne	.-38     	; 0x294e <__udivmodsi4_loop>
    2974:	60 95       	com	r22
    2976:	70 95       	com	r23
    2978:	80 95       	com	r24
    297a:	90 95       	com	r25
    297c:	9b 01       	movw	r18, r22
    297e:	ac 01       	movw	r20, r24
    2980:	bd 01       	movw	r22, r26
    2982:	cf 01       	movw	r24, r30
    2984:	08 95       	ret

00002986 <__tablejump2__>:
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	00 24       	eor	r0, r0
    298c:	00 1c       	adc	r0, r0
    298e:	0b be       	out	0x3b, r0	; 59
    2990:	07 90       	elpm	r0, Z+
    2992:	f6 91       	elpm	r31, Z
    2994:	e0 2d       	mov	r30, r0
    2996:	09 94       	ijmp

00002998 <__muluhisi3>:
    2998:	09 d0       	rcall	.+18     	; 0x29ac <__umulhisi3>
    299a:	a5 9f       	mul	r26, r21
    299c:	90 0d       	add	r25, r0
    299e:	b4 9f       	mul	r27, r20
    29a0:	90 0d       	add	r25, r0
    29a2:	a4 9f       	mul	r26, r20
    29a4:	80 0d       	add	r24, r0
    29a6:	91 1d       	adc	r25, r1
    29a8:	11 24       	eor	r1, r1
    29aa:	08 95       	ret

000029ac <__umulhisi3>:
    29ac:	a2 9f       	mul	r26, r18
    29ae:	b0 01       	movw	r22, r0
    29b0:	b3 9f       	mul	r27, r19
    29b2:	c0 01       	movw	r24, r0
    29b4:	a3 9f       	mul	r26, r19
    29b6:	70 0d       	add	r23, r0
    29b8:	81 1d       	adc	r24, r1
    29ba:	11 24       	eor	r1, r1
    29bc:	91 1d       	adc	r25, r1
    29be:	b2 9f       	mul	r27, r18
    29c0:	70 0d       	add	r23, r0
    29c2:	81 1d       	adc	r24, r1
    29c4:	11 24       	eor	r1, r1
    29c6:	91 1d       	adc	r25, r1
    29c8:	08 95       	ret

000029ca <_exit>:
    29ca:	f8 94       	cli

000029cc <__stop_program>:
    29cc:	ff cf       	rjmp	.-2      	; 0x29cc <__stop_program>
